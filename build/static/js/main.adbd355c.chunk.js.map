{"version":3,"sources":["components/common/OwnedTokenAccountsSelect.tsx","skin/index.ts","store/actions.ts","components/rewards/RewardsList.tsx","utils/tokens.tsx","components/Stake.tsx","idl/lockup.ts","idl/registry.ts","idl/multisig.ts","components/common/WalletProvider.tsx","utils/registry.ts","store/reducer.ts","store/index.ts","components/common/BootstrapProvider.tsx","components/common/Header.tsx","components/common/Footer.tsx","components/common/Layout.tsx","components/common/RegistrarSelect.tsx","components/Me.tsx","utils/lockup.ts","components/rewards/DropRewardButton.tsx","components/common/MyNode.tsx","components/rewards/ClaimRewardButton.tsx","components/rewards/Rewards.tsx","components/common/VestingAccountsSelect.tsx","pages/MyNode.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/common/Notification.tsx","store/config.ts"],"names":["OwnedTokenAccountsSelect","p","mint","decimals","variant","onChange","style","ownedTokenAccounts","useSelector","state","common","filter","ota","account","toString","useState","fromAccount","setFromAccount","fullWidth","value","e","pk","target","pubkey","PublicKey","token","publicKey","equals","pop","BN","amount","length","map","ownedTokenAccount","width","display","justifyContent","overflow","float","color","toDisplay","_skin","active","ready","notReady","inactive","deactivating","instance","ActionType","RewardsList","props","rewards","loading","forEach","r","marginLeft","marginRight","vendor","expired","RewardListItem","rli","primary","open","setOpen","dateLabel","Date","startTs","toNumber","toLocaleString","fromLabel","from","button","onClick","visibility","reward","locked","needsClaim","total","secondary","in","timeout","unmountOnExit","undefined","RewardListItemDetails","registryClient","useWallet","useSnackbar","enqueueSnackbar","closeSnackbar","registrar","registry","vendorMint","accounts","expiryReceiverToken","setExpiryReceiverToken","expire","a","createProgramAddress","toBuffer","Buffer","nonce","programId","vendorSigner","rpc","expireReward","vault","expiryReceiver","tokenProgram","TokenInstructions","TOKEN_PROGRAM_ID","clock","SYSVAR_CLOCK_PUBKEY","tx","action","signature","poolTokenSupply","expiryTs","toLocaleDateString","rewardEventQCursor","now","provider","wallet","flexDirection","flex","f","RewardListItemViewModel","cursor","ctx","event","member","sptAccount","balances","spt","lockedSptAccount","balancesLocked","ownsPoolShares","notYetClaimed","rewardsCursor","isEligible","lastStakeTs","vendorProgramAccount","TokenListContext","React","createContext","tokenMap","Map","useTokenInfos","useContext","TokenRegistryProvider","setTokenMap","useEffect","TokenListProvider","resolve","then","tokens","tokenList","filterByClusterSlug","getList","reduce","item","set","address","Provider","children","fromDisplay","toDisplayLabel","whitelistedMint","Object","keys","networks","mainnet","mints","label","toUpperCase","Stake","dispatch","useDispatch","registrarAccount","memberAccount","createPoolTokens","isLocked","poolMint","u64","rewardEventQ","memberSigner","registrarSigner","beneficiary","stake","redeemPoolTokens","pendingWithdrawal","Account","SYSVAR_RENT_PUBKEY","rent","createInstruction","signers","instructions","startUnstake","pwAccount","type","RegistryCreatePendingWithdrawal","createPool","shares","catch","err","console","error","redeemPool","marginTop","marginBottom","PoolCard","title","create","redeem","RedemptionList","AllPendingTransfers","poolAmount","setPoolAmount","setIsLocked","poolTokenMint","pricePerShare","stakeRate","cost","mul","subheader","paddingRight","fontWeight","supply","withdrawalTimelock","parseInt","disabled","control","checked","labelPlacement","pendingWithdrawals","pw","concat","all","RegistrySetPendingWithdrawals","paddingLeft","paddingBottom","paddingTop","borderBottom","fontSize","idx","PendingStakeListItem","isLast","sptLabel","l","whiteSpace","maxWidth","PendingWithdrawalButton","endTs","pool","endPendingWithdrawal","vaultPw","endUnstake","updatedPendingWithdrawal","burned","RegistryUpdatePendingWithdrawal","skin","height","mintAccount","pendingTransfers","setPendingTransfers","transfers","sort","b","fetchAll","maxHeight","padding","div","idl","version","name","isMut","isSigner","args","option","defined","struct","kind","fields","vec","methods","types","errors","code","msg","variants","w","WalletContext","Error","WalletProvider","wallets","useMemo","getPhantomWallet","getSolflareWallet","getSolletWallet","WalletProviderInner","solWallet","useSolana","walletProvider","network","opts","preflightCommitment","commitment","connection","Connection","url","Wallet","adapter","lockupClient","Program","LockupIdl","lockupProgramId","RegistryIdl","registryProgramId","multisigClient","MultisigIdl","multisigProgramId","this","cb","on","connect","disconnect","signTransaction","txs","signAllTransactions","anchor","findProgramAddress","memberSeed","sha256","seed","slice","createBalanceSandbox","registrySigner","vaultStake","getMinimumBalanceForRentExemption","lamports","serumCmn","createSptIx","createVaultIx","createVaultStakeIx","createVaultPwIx","tx0","Transaction","add","rewardEvents","rewardQ","events","tail","head","push","BootstrapState","initialState","bootstrapTrigger","shutdownTrigger","isWalletConnected","bootstrapState","NeedsBootstrap","lockup","vestings","registrars","srm","store","createStore","newState","CommonAppWillBootstrap","IsBootstrapping","CommonAppDidBootstrap","Bootstrapped","CommonWalletSetProvider","CommonWalletDidConnect","CommonWalletDidDisconnect","CommonSetNetwork","networkKey","values","CommonTriggerBootstrap","CommonTriggerShutdown","CommonDidShutdown","s","CommonOwnedTokenAccountsSet","CommonOwnedTokenAccountsUpdate","programAccount","LockupSetVestings","vestingAccounts","LockupUpdateVesting","vesting","LockupCreateVesting","unshift","RegistrySetMember","RegistrySetRegistrar","AccountAdd","AccountUpdate","BootstrapProvider","bootstrap","useCallback","autoHideDuration","refreshAccounts","members","accountStore","fromEntries","m","registrarSwitch","shutdown","fetchRegistrars","registrarAddresses","getMultipleAccounts","raw","coder","decode","data","parseMintAccount","rewardQs","fetchMembers","Promise","createWithSeed","memberPublicKey","memberAddresses","memberAccounts","fetchAndDispatchMemberAccounts","fetchMints","mintAddresses","fetchOwnedTokenAccounts","getOwnedTokenAccounts","fetchVestingAccounts","v","newRegistrar","oldRegistrar","oldMember","oldMemberAccount","newMember","newMemberAccount","subscribeRegistrar","subscribeMember","oldRegistrarAccount","rewardQueue","unsubscribe","newRegistrarAccount","subscribe","onAccountChange","acc","createVaultSubscription","tokenAccount","parseTokenAccount","filters","getOwnedAccountsFilters","getProgramAccounts","resp","result","parseTokenAccountData","ACCOUNT_LAYOUT","BufferLayout","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span","owner","Header","isAppReady","isRefreshing","setIsRefreshing","AppBar","position","background","boxShadow","Toolbar","SerumLogoButton","BarButton","hrefClient","CircularProgress","IconButton","NetworkSelector","WalletConnectButton","history","useHistory","Button","alt","src","href","Link","textDecoration","Typography","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","Boolean","onClose","n","MenuItem","showDisconnect","Footer","zIndex","bottom","textAlign","backgroundColor","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","window","localStorage","getItem","DisconnectedSplash","RiskDisclosureForm","onConsent","setItem","useStyles","makeStyles","theme","root","spacing","classes","isDisconnected","className","LinearProgress","activeRegistrar","RegistrarSelect","selectedRegistrar","tokenInfos","Select","getImage","get","registrarToDisplayLabel","entry","logoURI","Me","MemberBalancesCard","lockedVault","lockedVaultStake","lockedVaultPw","lockedSpt","tables","description","rows","balance","pending","Card","CardContent","t","BalanceTable","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","component","scope","vestingSigner","RewardTypeViewModel","TabModel","DropRewardButton","showDialog","setShowDialog","DropRewardDialog","Unlocked","rewardTypeTab","setRewardTypeTab","Dialog","DialogTitle","DialogContent","Tabs","_e","Tab","Locked","DropUnlockedForm","DropLockedForm","snack","rewardDisplayAmount","setRewardDisplayAmount","setExpiryTs","depositor","setDepositor","setMint","isSendEnabled","sendUnlockedReward","notification","lockedRewardAmount","rewardKind","unlocked","vendorVault","depositorAuthority","rewardVendor","dropReward","DropVendorForm","onCancel","setStartTs","setEndTs","periodCount","setPeriodCount","sendLockedRewards","rewardAmount","mintOptions","FormHelperText","FormControl","InputLabel","TextField","id","InputLabelProps","shrink","parseFloat","InputProps","inputProps","min","d","getTime","placeholder","DialogActions","ClaimRewardButton","setToken","clickHandler","_vendorSigner","vendoredVesting","vendoredVestingVault","vendoredVestingSigner","remainingAccounts","instruction","createVesting","meta","lockupProgram","cmn","createTokenAccountInstrs","claimRewardLocked","claimReward","to","unlockedAlloc","Rewards","rewardEventQueue","fromMessage","reverse","nextReward","shift","Paper","VestingAccountsSelect","deposit","availableAmount","outstanding","sub","whitelistOwned","MyNode","tab","setTab","MyNodeBanner","Container","fixed","showDepositDialog","setShowDepositDialog","showWithdrawDialog","setShowWithdrawDialog","createStakeAccount","memberSignerPublicKey","mainTx","lockedTx","transaction","SystemProgram","size","fromPubkey","newAccountPubkey","basePubkey","space","createAccountWithSeed","createMember","allTxs","sendAll","skipPreflight","txSigs","log","memberProgramAccount","HoverSpan","styled","DepositDialog","WithdrawDialog","TransferDialog","contextText","onTransfer","displayAmount","relayData","encode","_memberSigner","_vestingSigner","isWritable","relayAccounts","whitelistedProgram","whitelistedProgramVault","whitelistedProgramVaultAuthority","transfer","whitelistWithdraw","updatedVestingAccount","getTokenAccount","whitelistDeposit","withdraw","setDisplayAmount","setFrom","setVesting","maxDisplayAmount","setMaxDisplayAmount","submitBtnDisabled","TransitionComponent","Transition","keepMounted","FormControlLabel","Switch","max","_maxDisplayAmount","forwardRef","ref","Slide","direction","MyNodePage","App","createMuiTheme","palette","default","typography","fontFamily","join","overrides","CssBaseline","maxSnack","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","withTx","beforeLabel","afterLabel","execTx","ViewTransactionOnExplorerButton","explorerClusterSuffix","urlSuffix","rel","srmFaucet","msrmFaucet","msrm","fida","dxl","devnet","token1","token2","localhost"],"mappings":"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,CACJkF,KAAM,SACNC,OAAQ,CACN,CACER,KAAM,OACN3E,KAAM,OAER,CACE2E,KAAM,OACN3E,KAAM,OAER,CACE2E,KAAM,SACN3E,KAAM,CACJoF,IAAK,CACHJ,QAAS,oBAOrB,CACEL,KAAM,eACN3E,KAAM,CACJkF,KAAM,SACNC,OAAQ,CACN,CACER,KAAM,YACN3E,KAAM,aAER,CACE2E,KAAM,QACN3E,KAAM,aAER,CACE2E,KAAM,OACN3E,KAAM,aAER,CACE2E,KAAM,QACN3E,KAAM,MAER,CACE2E,KAAM,kBACN3E,KAAM,OAER,CACE2E,KAAM,qBACN3E,KAAM,OAER,CACE2E,KAAM,UACN3E,KAAM,OAER,CACE2E,KAAM,WACN3E,KAAM,OAER,CACE2E,KAAM,iBACN3E,KAAM,aAER,CACE2E,KAAM,OACN3E,KAAM,aAER,CACE2E,KAAM,QACN3E,KAAM,OAER,CACE2E,KAAM,UACN3E,KAAM,QAER,CACE2E,KAAM,OACN3E,KAAM,CACJgF,QAAS,yBAOrBM,MAAO,CACL,CACEX,KAAM,iBACN3E,KAAM,CACJkF,KAAM,SACNC,OAAQ,CACN,CACER,KAAM,MACN3E,KAAM,aAER,CACE2E,KAAM,QACN3E,KAAM,aAER,CACE2E,KAAM,aACN3E,KAAM,aAER,CACE2E,KAAM,UACN3E,KAAM,gBAKd,CACE2E,KAAM,cACN3E,KAAM,CACJkF,KAAM,SACNC,OAAQ,CACN,CACER,KAAM,SACN3E,KAAM,aAER,CACE2E,KAAM,KACN3E,KAAM,OAER,CACE2E,KAAM,SACN3E,KAAM,WAKd,CACE2E,KAAM,mBACN3E,KAAM,CACJkF,KAAM,OACNQ,SAAU,CACR,CACEf,KAAM,YAER,CACEA,KAAM,SACNQ,OAAQ,CACN,CACER,KAAM,WACN3E,KAAM,OAER,CACE2E,KAAM,SACN3E,KAAM,OAER,CACE2E,KAAM,eACN3E,KAAM,aAQpBuF,OAAQ,CACN,CACEC,KAAM,IACNb,KAAM,4BACNc,IAAK,wDAEP,CACED,KAAM,IACNb,KAAM,eACNc,IAAK,2DAEP,CACED,KAAM,IACNb,KAAM,2BACNc,IAAK,+BAEP,CACED,KAAM,IACNb,KAAM,sBACNc,IAAK,oDAEP,CACED,KAAM,IACNb,KAAM,sBACNc,IAAK,2DAEP,CACED,KAAM,IACNb,KAAM,mBACNc,IAAK,sEAEP,CACED,KAAM,IACNb,KAAM,eACNc,IAAK,sDAEP,CACED,KAAM,IACNb,KAAM,oBACNc,IAAK,wBAEP,CACED,KAAM,IACNb,KAAM,UACNc,IAAK,iCAEP,CACED,KAAM,IACNb,KAAM,kBACNc,IAAK,6CAEP,CACED,KAAM,IACNb,KAAM,qBACNc,IAAK,mEAEP,CACED,KAAM,IACNb,KAAM,gBACNc,IAAK,4DAEP,CACED,KAAM,IACNb,KAAM,gBACNc,IAAK,uCAEP,CACED,KAAM,IACNb,KAAM,yBACNc,IAAK,2CAEP,CACED,KAAM,IACNb,KAAM,sBACNc,IAAK,0DAEP,CACED,KAAM,IACNb,KAAM,sBACNc,IAAK,8CAEP,CACED,KAAM,IACNb,KAAM,yBACNc,IAAK,kEAEP,CACED,KAAM,IACNb,KAAM,uBACNc,IAAK,mEAEP,CACED,KAAM,IACNb,KAAM,yBACNc,IAAK,kEAEP,CACED,KAAM,IACNb,KAAM,uBACNc,IAAK,qDAEP,CACED,KAAM,IACNb,KAAM,mBACNc,IAAK,oEAEP,CACED,KAAM,IACNb,KAAM,qBACNc,IAAK,kCAEP,CACED,KAAM,IACNb,KAAM,0BACNc,IAAK,kEAEP,CACED,KAAM,IACNb,KAAM,yBACNc,IAAK,mDAEP,CACED,KAAM,IACNb,KAAM,0BACNc,IAAK,4DChqCIhB,EAxSE,CACfC,QAAS,QACTC,KAAM,WACN9E,aAAc,CACZ,CACE8E,KAAM,iBACNrL,SAAU,CACR,CACEqL,KAAM,WACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,OACNC,OAAO,EACPC,UAAU,IAGdC,KAAM,CACJ,CACEH,KAAM,SACN3E,KAAM,CACJoF,IAAK,cAGT,CACET,KAAM,YACN3E,KAAM,OAER,CACE2E,KAAM,QACN3E,KAAM,QAIZ,CACE2E,KAAM,oBACNrL,SAAU,CACR,CACEqL,KAAM,WACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,cACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,WACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,OACNC,OAAO,EACPC,UAAU,IAGdC,KAAM,CACJ,CACEH,KAAM,MACN3E,KAAM,aAER,CACE2E,KAAM,OACN3E,KAAM,CACJoF,IAAK,CACHJ,QAAS,wBAIf,CACEL,KAAM,OACN3E,KAAM,WAIZ,CACE2E,KAAM,UACNrL,SAAU,CACR,CACEqL,KAAM,WACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,cACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,QACNC,OAAO,EACPC,UAAU,IAGdC,KAAM,IAER,CACEH,KAAM,YACNrL,SAAU,CACR,CACEqL,KAAM,WACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,iBACNC,OAAO,EACPC,UAAU,IAGdC,KAAM,CACJ,CACEH,KAAM,SACN3E,KAAM,CACJoF,IAAK,gBAKb,CACET,KAAM,kBACNrL,SAAU,CACR,CACEqL,KAAM,WACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,iBACNC,OAAO,EACPC,UAAU,IAGdC,KAAM,CACJ,CACEH,KAAM,YACN3E,KAAM,SAIZ,CACE2E,KAAM,qBACNrL,SAAU,CACR,CACEqL,KAAM,WACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,iBACNC,OAAO,EACPC,UAAU,GAEZ,CACEF,KAAM,cACNC,OAAO,EACPC,UAAU,IAGdC,KAAM,KAGVxL,SAAU,CACR,CACEqL,KAAM,WACN3E,KAAM,CACJkF,KAAM,SACNC,OAAQ,CACN,CACER,KAAM,SACN3E,KAAM,CACJoF,IAAK,cAGT,CACET,KAAM,YACN3E,KAAM,OAER,CACE2E,KAAM,QACN3E,KAAM,MAER,CACE2E,KAAM,gBACN3E,KAAM,UAKd,CACE2E,KAAM,cACN3E,KAAM,CACJkF,KAAM,SACNC,OAAQ,CACN,CACER,KAAM,WACN3E,KAAM,aAER,CACE2E,KAAM,YACN3E,KAAM,aAER,CACE2E,KAAM,WACN3E,KAAM,CACJoF,IAAK,CACHJ,QAAS,wBAIf,CACEL,KAAM,OACN3E,KAAM,SAER,CACE2E,KAAM,UACN3E,KAAM,CACJoF,IAAK,SAGT,CACET,KAAM,aACN3E,KAAM,QAER,CACE2E,KAAM,gBACN3E,KAAM,WAMhBsF,MAAO,CACL,CACEX,KAAM,qBACN3E,KAAM,CACJkF,KAAM,SACNC,OAAQ,CACN,CACER,KAAM,SACN3E,KAAM,aAER,CACE2E,KAAM,WACN3E,KAAM,QAER,CACE2E,KAAM,aACN3E,KAAM,YAMhBuF,OAAQ,CACN,CACEC,KAAM,IACNb,KAAM,eACNc,IAAK,iDAEP,CACED,KAAM,IACNb,KAAM,mBACNc,IAAK,8CAEP,CACED,KAAM,IACNb,KAAM,2BACNc,IAAK,iEAEP,CACED,KAAM,IACNb,KAAM,WACNc,IAAK,yBAEP,CACED,KAAM,IACNb,KAAM,iBACNc,IAAK,yDAEP,CACED,KAAM,IACNb,KAAM,kBACNc,IAAK,oDAEP,CACED,KAAM,IACNb,KAAM,mBACNc,IAAK,mE,OCxQJ,SAAS1M,IACd,IAAM4M,EAAI9I,qBAAW+I,GACrB,IAAKD,EACH,MAAM,IAAIE,MAAM,0BAElB,OAAOF,EAGT,IAAMC,EAAgBpJ,IAAMC,cAA0C,MASvD,SAASqJ,EACtBlP,GAEA,IAAMmP,EAAUC,mBACd,iBAAM,CAACC,cAAoBC,cAAqBC,iBAChD,IAGF,OACE,cAAC,IAAD,CAAsBJ,QAASA,EAA/B,SACE,cAACK,EAAD,eAAyBxP,MAK/B,SAASwP,EAAoBxP,GAC3B,IAAgByP,EAAcC,cAAtBnL,OACR,EAAoCjH,aAAY,SAACC,GAC/C,MAAO,CACLoS,eAAgBpS,EAAMC,OAAOmS,eAC7BC,QAASrS,EAAMC,OAAOoS,YAHlBD,EAAR,EAAQA,eAAgBC,EAAxB,EAAwBA,QAMxB,EACER,mBAAQ,WACN,IAAMS,EAAuB,CAC3BC,oBAAqB,SACrBC,WAAY,UAERC,EAAa,IAAIC,aAAWL,EAAQM,IAAKL,EAAKC,qBAC9CvL,EAAS,IAAI4L,EAAOV,EAAYA,EAAUW,eAAYpO,GAEtDsC,EAAW,IAAI0C,WAASgJ,EAAYzL,EAAQsL,GAiBlD,MAAO,CACLtL,SACA8L,aAjBmB,IAAIC,IACvBC,EACAX,EAAQY,gBACRlM,GAeApC,eAbqB,IAAIoO,IACzBG,EACAb,EAAQc,kBACRpM,GAWAqM,eATqB,IAAIL,IACzBM,EACAhB,EAAQiB,kBACRvM,MAQD,CAACmL,EAAWE,EAAgBC,IAhCzBrL,EAAR,EAAQA,OAAQ8L,EAAhB,EAAgBA,aAAcnO,EAA9B,EAA8BA,eAAgByO,EAA9C,EAA8CA,eAkC9C,OACE,cAAC3B,EAAchI,SAAf,CACE/I,MAAO,CAAEsG,SAAQ8L,eAAcnO,iBAAgByO,kBADjD,SAGG3Q,EAAMiH,W,IAKPkJ,E,WAMJ,WAAqBC,GAAqC,yBAArCA,U,2CALrB,WAEE,OAAOU,KAAKV,QAAUU,KAAKV,QAAQ5R,eAAYwD,I,gBAKjD,SAAG8C,EAAYiM,GACb,GAAID,KAAKV,QACP,OAAOU,KAAKV,QAAQY,GAAGlM,EAAOiM,K,4DAIlC,sBAAAjO,EAAA,0DACMgO,KAAKV,QADX,yCAGYU,KAAKV,QAAQa,UAHzB,sDAKMvH,QAAQC,MAAR,MALN,wD,8EAUA,WACMmH,KAAKV,SACPU,KAAKV,QAAQc,e,6BAIjB,SAAgBpN,GACd,GAAIgN,KAAKV,QACP,OAAOU,KAAKV,QAAQe,gBAAgBrN,K,iCAIxC,SAAoBsN,GAClB,GAAIN,KAAKV,QACP,OAAOU,KAAKV,QAAQiB,oBAAoBD,O,wZClJvC,SAAe7I,EAAtB,oC,4CAAO,WACLpF,EACAZ,GAFK,qBAAAO,EAAA,sEAI4BwO,IAAYhT,UAAUiT,mBACrD,CAAChP,EAAUS,YACXG,GANG,0CAIE3E,EAJF,KAIa0E,EAJb,uBAQE,CACL1E,YACA0E,UAVG,4C,sBAcA,SAAeoF,EAAtB,sC,4CAAO,WACLnF,EACAZ,EACAwC,GAHK,qBAAAjC,EAAA,sEAK4BwO,IAAYhT,UAAUiT,mBACrD,CAAChP,EAAUS,WAAY+B,EAAO/B,YAC9BG,GAPG,0CAKE3E,EALF,KAKa0E,EALb,uBASE,CACL1E,YACA0E,UAXG,4C,sBAeA,SAAeE,EAAtB,sC,4CAAO,WACLD,EACAZ,EACAhC,GAHK,qBAAAuC,EAAA,sEAK4BwO,IAAYhT,UAAUiT,mBACrD,CAAChP,EAAUS,WAAYzC,EAAOyC,YAC9BG,GAPG,0CAKE3E,EALF,KAKa0E,EALb,uBASE,CACL1E,YACA0E,UAXG,4C,sBAkBA,SAAesO,EAAtB,kC,4CAAO,WAA0BjP,GAA1B,eAAAO,EAAA,sEACcwO,IAAaG,OAAb,UAAuBlP,EAAU3E,WAAjC,YADd,cACC8T,EADD,yBAGEA,EAAKC,MAAM,EAAG,KAHhB,4C,sBAOA,SAAeC,EAAtB,sC,4CAAO,WACLtN,EACAlE,EACAyR,GAHK,mCAAA/O,EAAA,6DAKCoC,EAAM,IAAI0D,UACVrF,EAAQ,IAAIqF,UACZkJ,EAAa,IAAIlJ,UACjBgE,EAAU,IAAIhE,UARf,SAUkBtE,EAAS0L,WAAW+B,kCACzC,KAXG,cAUCC,EAVD,gBAcqBC,2BACxB3N,EACAY,EAAI1G,UACJ4B,EAAE+H,SACF0J,EACAG,GAnBG,cAcCE,EAdD,iBAqBuBD,2BAC1B3N,EACAf,EAAM/E,UACN4B,EAAEpD,KACF6U,EACAG,GA1BG,eAqBCG,EArBD,iBA4B4BF,2BAC/B3N,EACAwN,EAAWtT,UACX4B,EAAEpD,KACF6U,EACAG,GAjCG,eA4BCI,EA5BD,iBAmCyBH,2BAC5B3N,EACAsI,EAAQpO,UACR4B,EAAEpD,KACF6U,EACAG,GAxCG,eAmCCK,EAnCD,QA0CDC,EAAM,IAAIC,eACVC,IAAJ,MAAAF,EAAG,YACEJ,GADF,mBAEEC,GAFF,YAGEC,GAHF,YAIEC,KAICvO,EAAK,CAAEA,GAAIwO,EAAKtJ,QAFP,CAAC9D,EAAK3B,EAAOuO,EAAYlF,IAjDnC,kBAqDE,CACL9I,EACA,CACEoB,IAAKA,EAAI1G,UACT+E,MAAOA,EAAM/E,UACbsT,WAAYA,EAAWtT,UACvBoO,QAASA,EAAQpO,aA3DhB,6C,sBAiEA,SAASiU,EAAaC,GAG3B,IAFA,IAAIC,EAAS,GACTC,EAAOF,EAAQE,KACZA,EAAOF,EAAQG,MAAM,CAC1B,IAAI5G,EAAM2G,EAAOF,EAAQC,OAAO9T,OAChC8T,EAAOG,KAAKJ,EAAQC,OAAO1G,IAC3B2G,GAAQ,EAEV,OAAOD,I,wQC7HGI,E,iJAAAA,O,mCAAAA,I,qCAAAA,I,gCAAAA,M,KAmKL,IAAMC,EAAsB,CACjCxV,OAAQ,CACNyV,kBAAkB,EAClBC,iBAAiB,EACjBC,mBAAmB,EACnBxD,eAAgB,wBAChByD,eAAgBL,EAAeM,eAC/BzD,QAASrI,IAASC,QAClBnK,mBAAoB,IAEtBiW,OAAQ,CACNC,SAAU,IAEZ/Q,SAAU,CACR+I,mBAAoB,KACpBhJ,UAAWgF,IAASC,QAAQgM,WAAWC,KAEzC/Q,SAAU,ICvLCgR,EAAQC,aDSN,WAGL,IAFRpW,EAEO,uDAFQyV,EACfjP,EACO,uCACH6P,EAAW,CACbpW,OAAO,eAAMD,EAAMC,QACnB8V,OAAO,eAAM/V,EAAM+V,QACnB9Q,SAAS,eAAMjF,EAAMiF,UACrBE,SAAS,eAAMnF,EAAMmF,WAEvB,OAAQqB,EAAOqF,MAEb,KAAKtJ,IAAW+T,uBAGd,OAFAD,EAASpW,OAAO4V,eAAiBL,EAAee,gBAChDF,EAASpW,OAAOyV,kBAAmB,EAC5BW,EACT,KAAK9T,IAAWiU,sBAEd,OADAH,EAASpW,OAAO4V,eAAiBL,EAAeiB,aACzCJ,EACT,KAAK9T,IAAWmU,wBAEd,OADAL,EAASpW,OAAOmS,eAAiB5L,EAAO8C,KAAK8I,eACtCiE,EACT,KAAK9T,IAAWoU,uBAEd,OADAN,EAASpW,OAAO2V,mBAAoB,EAC7BS,EACT,KAAK9T,IAAWqU,0BAEd,OADAP,EAASpW,OAAO2V,mBAAoB,EAC7BS,EACT,KAAK9T,IAAWsU,iBACd,GAAIR,EAASpW,OAAOoS,QAAQlI,QAAU3D,EAAO8C,KAAK+I,QAAQlI,MAAO,CAC/DkM,EAASpW,OAAOoS,QAAU7L,EAAO8C,KAAK+I,QACtCgE,EAASpW,OAAO4V,eAAiBL,EAAeM,eAChDO,EAASpW,OAAO0V,iBAAkB,EAClC,IAAMtD,EAAUrI,IAASxD,EAAO8C,KAAKwN,YACrCT,EAASpR,SAASD,UAAY8E,OAAOiN,OAAO1E,EAAQ4D,YAAY,GAElE,OAAOI,EACT,KAAK9T,IAAWyU,uBAGd,OAFAX,EAASpW,OAAO4V,eAAiBL,EAAeM,eAChDO,EAASpW,OAAOyV,kBAAmB,EAC5BW,EACT,KAAK9T,IAAW0U,sBAGd,OAFAZ,EAASpW,OAAO4V,eAAiBL,EAAeM,eAChDO,EAASpW,OAAO0V,iBAAkB,EAC3BU,EACT,KAAK9T,IAAW2U,kBAEd,IAAIC,EAAC,eACA1B,GAIL,OAFA0B,EAAElX,OAAOoS,QAAUgE,EAASpW,OAAOoS,QACnC8E,EAAElS,SAASD,UAAYqR,EAASpR,SAASD,UAClCmS,EACT,KAAK5U,IAAW6U,4BAEd,OADAf,EAASpW,OAAOH,mBAAqB0G,EAAO8C,KAAKxJ,mBAC1CuW,EAET,KAAK9T,IAAW8U,+BAUd,OATAhB,EAASpW,OAAOH,mBAAqBuW,EAASpW,OAAOH,mBAAmByB,KACtE,SAAA+V,GACE,OAAIA,EAAerW,UAAUC,OAAOsF,EAAO8C,KAAKlJ,QAAQa,WAC/CuF,EAAO8C,KAAKlJ,QAEZkX,KAINjB,EAGT,KAAK9T,IAAWgV,kBAEd,OADAlB,EAASN,OAAOC,SAAWxP,EAAO8C,KAAKkO,gBAChCnB,EACT,KAAK9T,IAAWkV,oBAGd,OAFApB,EAASlR,SAASqB,EAAO8C,KAAKoO,QAAQzW,UAAUZ,YAC9CmG,EAAO8C,KAAKoO,QAAQtX,QACfiW,EACT,KAAK9T,IAAWoV,oBAId,OAHAtB,EAASN,OAAOC,SAAS4B,QAAQpR,EAAO8C,KAAKoO,QAAQzW,WACrDoV,EAASlR,SAASqB,EAAO8C,KAAKoO,QAAQzW,UAAUZ,YAC9CmG,EAAO8C,KAAKoO,QAAQtX,QACfiW,EAGT,KAAK9T,IAAWsV,kBAId,OADAxB,EAASpR,SAASuC,OAAShB,EAAO8C,KAAK9B,OAChC6O,EACT,KAAK9T,IAAWuV,qBAId,OAHAzB,EAASpR,SAASD,UAAYwB,EAAO8C,KAAKtE,UAC1CqR,EAASpR,SAASuC,OAAShB,EAAO8C,KAAK9B,OACvC6O,EAASpR,SAAS+I,mBAAqB,KAChCqI,EACT,KAAK9T,IAAW6L,8BAOd,OANA5H,EAAO8C,KAAK0E,mBAAmBpL,SAAQ,SAACqL,GACtCoI,EAASlR,SAAS8I,EAAGhN,UAAUZ,YAAc4N,EAAG7N,WAElDiW,EAASpR,SAAS+I,mBAAqBxH,EAAO8C,KAAK0E,mBAAmBzM,KACpE,SAAC0M,GAAD,OAAaA,EAAGhN,aAEXoV,EACT,KAAK9T,IAAWuJ,gCASd,OARAuK,EAASlR,SAASqB,EAAO8C,KAAK8B,kBAAkBnK,UAAUZ,YACxDmG,EAAO8C,KAAK8B,kBAAkBhL,QACa,OAAzCiW,EAASpR,SAAS+I,qBACpBqI,EAASpR,SAAS+I,mBAAqB,IAEzCqI,EAASpR,SAAS+I,mBAAmB4J,QACnCpR,EAAO8C,KAAK8B,kBAAkBnK,WAEzBoV,EACT,KAAK9T,IAAWkN,gCAGd,OAFA4G,EAASlR,SAASqB,EAAO8C,KAAK8B,kBAAkBnK,UAAUZ,YACxDmG,EAAO8C,KAAK8B,kBAAkBhL,QACzBiW,EACT,KAAK9T,IAAWwV,WAIhB,KAAKxV,IAAWyV,cAGd,OAFA3B,EAASlR,SAASqB,EAAO8C,KAAKlJ,QAAQa,UAAUZ,YAC9CmG,EAAO8C,KAAKlJ,QAAQA,QACfiW,EACT,QACE,OAAOA,M,qFEnHE,SAAS4B,EAAkBxV,GACxC,MAAkE1C,aAChE,SAACC,GACC,MAAO,CACL0V,iBAAkB1V,EAAMC,OAAOyV,iBAC/BC,gBAAiB3V,EAAMC,OAAO0V,gBAC9BtD,QAASrS,EAAMC,OAAOoS,QACtBrN,UAAWhF,EAAMiF,SAASD,cANxB0Q,EAAR,EAAQA,iBAAkBC,EAA1B,EAA0BA,gBAAiBtD,EAA3C,EAA2CA,QAASrN,EAApD,EAAoDA,UAU9CsF,EAAWC,cACjB,EAAiD3F,cAAzCoC,EAAR,EAAQA,OAAQ8L,EAAhB,EAAgBA,aAAcnO,EAA9B,EAA8BA,eACtBG,EAAoBD,cAApBC,gBAGFoT,EAAYC,sBAAW,sBAAC,kCAAA5S,EAAA,6DAC5BT,EAAgB,iBAAD,OAAkBuN,EAAQlI,OAAS,CAChDxK,QAAS,OACTyY,iBAAkB,OAGpB9N,EAAS,CACPuB,KAAMtJ,IAAW+T,uBACjBhN,KAAM,KARoB,SAWQ+O,EAAgB,CAClD/N,WACAwI,eACAnO,iBACA0N,UACArL,WAhB0B,uBAWtBiP,EAXsB,EAWtBA,WAAYqC,EAXU,EAWVA,QASZC,EAAezO,OAAO0O,YAC1B,IAAIhQ,IAAIyN,EAAW1U,KAAI,SAAAsB,GAAC,MAAI,CAACA,EAAE5B,UAAUZ,WAAYwC,EAAEzC,cAEzDkY,EAAQ1V,SAAQ,SAAA6V,GACdF,EAAaE,EAAExX,UAAUZ,YAAcoY,EAAErY,WAxBf,UA2BtBsY,EACJ/T,EACA4T,EACAjO,EACAtF,OACAP,GAhC0B,QAmC5B6F,EAAS,CACPuB,KAAMtJ,IAAWiU,sBACjBlN,KAAM,KAGRxE,EAAgB,yBAA0B,CACxCnF,QAAS,UACTyY,iBAAkB,OA1CQ,4CA4C3B,CACD9N,EACAxF,EACAH,EACAK,EACA8N,EACAT,EACArL,IAGI2R,EAAWR,sBAAW,sBAAC,sBAAA5S,EAAA,sDAC3ByB,EAAO2M,aACPrJ,EAAS,CACPuB,KAAMtJ,IAAW2U,kBACjB5N,KAAM,KAJmB,2CAM1B,CAACgB,EAAUtD,IAqBd,OAnBA6B,qBAAU,WACJ6M,GACFwC,IAAYjM,OAAM,SAAAC,GAChBC,QAAQC,MAAMF,GACdpH,EAAgB,oCAAD,OAAqCoH,EAAI7L,YAAc,CACpEV,QAAS,aAIXgW,GACFgD,IAAW1M,OAAM,SAAAC,GACfC,QAAQC,MAAMF,GACdpH,EAAgB,oCAAD,OAAqCoH,EAAI7L,YAAc,CACpEV,QAAS,eAId,CAAC+V,EAAkBwC,EAAWvC,EAAiBgD,EAAU7T,IAErD,mCAAGrC,EAAMiH,WAIX,SAAe2O,EAAtB,kC,4CAAO,mDAAA9S,EAAA,6DACL+E,EADK,EACLA,SACAwI,EAFK,EAELA,aACAnO,EAHK,EAGLA,eACA0N,EAJK,EAILA,QACArL,EALK,EAKLA,OAGM4R,EARD,+BAAArT,EAAA,MAQmB,kCAAAA,EAAA,6DAChBsT,EAAkC/O,OAAOiN,OAAO1E,EAAQ4D,YADxC,SAKdlC,IAAa+E,oBACjBnU,EAAeoC,SAAS0L,WACxBoG,GAPkB,cAIhB5C,EAJgB,OASpB1U,KAAI,SAAAwX,GACJ,IAAM3Y,EAAUuE,EAAeqU,MAAM7T,SAAS8T,OAC5C,YACAF,EAAK3Y,QAAQ8Y,MAEf,MAAO,CACLjY,UAAW8X,EAAK9X,UAChBb,cAhBkB,SAsBd2T,IAAa+E,oBACjBnU,EAAeoC,SAAS0L,WACxBwD,EAAW1U,KAAI,SAAAsB,GAAC,OAAIA,EAAEzC,QAAQX,SAxBZ,cAqBhByK,EArBgB,OA0BpB3I,KAAI,SAAAwX,GACJ,IAAM3Y,EAAU+Y,2BAAiBJ,EAAK3Y,QAAQ8Y,MAC9C,MAAO,CACLjY,UAAW8X,EAAK9X,UAChBb,cA9BkB,SAoCd2T,IAAa+E,oBACjBnU,EAAeoC,SAAS0L,WACxBwD,EAAW1U,KAAI,SAAAsB,GAAC,OAAIA,EAAEzC,QAAQ0K,iBAtCZ,cAmChBsO,EAnCgB,OAwCpB7X,KAAI,SAAAwX,GACJ,IAAM3Y,EAAUuE,EAAeqU,MAAM7T,SAAS8T,OAC5C,cACAF,EAAK3Y,QAAQ8Y,MAEf,MAAO,CACLjY,UAAW8X,EAAK9X,UAChBb,cAKJ6V,EACG/H,OAAOhE,GACPgE,OAAOkL,GACPxW,SAAQ,SAAAC,GACPyH,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,QAASyC,QA3DK,kBA+DfoT,GA/De,4CARnB,qDA2ECoD,EA3ED,+BAAA9T,EAAA,MA2EgB,WACnB0Q,GADmB,mBAAA1Q,EAAA,sEAGG+T,QAAQnL,IAC5B8H,EACG1U,KAAI,SAACsB,GAAD,OAAuBA,EAAE5B,aAC7BM,KAAI,SAACsB,GAAD,OACHoR,YAAWpR,GACRmG,MAAK,SAAAmL,GAAI,OACRpT,YAAUwY,eACRvS,EAAO/F,UACPkT,EACAxP,EAAeiB,cAGlBoD,MAAK,SAAAxB,GACJ,MAAO,CACLgS,gBAAiBhS,EACjBxC,UAAWnC,UAlBJ,cAGbyV,EAHa,OAuBbmB,EAA+BnB,EAAQ/W,KAAI,SAAAkX,GAAC,OAAIA,EAAEe,mBAvBrC,SAyBXzF,IAAa+E,oBACjBnU,EAAeoC,SAAS0L,WACxBgH,GA3Be,cAwBbC,EAxBa,OA8BhBxZ,QAAO,SAAA6Y,GAAG,OAAY,OAARA,KACdxX,KAAI,SAACwX,GACJ,IAAM3Y,EAAUuE,EAAeqU,MAAM7T,SAAS8T,OAC5C,SACAF,EAAK3Y,QAAQ8Y,MAEf,MAAO,CACLjY,UAAW8X,EAAK9X,UAChBb,cAtCa,SA+CbkZ,QAAQnL,IACZuL,EAAenY,KAAI,SAAAkJ,GACjB,OAAOkP,EACLlP,EACAH,EACA3F,EAAeoC,SAAS0L,gBApDX,cA2DnBiH,EAAe9W,SAAQ,SAAA6V,GACrBnO,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,QAASqY,QA/DI,kBAoEZiB,GApEY,4CA3EhB,sDAmJCE,EAnJD,+BAAArU,EAAA,MAmJc,WAAO0Q,GAAP,eAAA1Q,EAAA,6DACXsU,EAAgB5D,EACnB1U,KAAI,SAAAsB,GAAC,OAAIA,EAAEzC,QAAQX,QACnByO,OAAO+H,EAAW1U,KAAI,SAAAsB,GAAC,OAAIA,EAAEzC,QAAQwK,aAHvB,SAKTmJ,IAAa+E,oBACjBnU,EAAeoC,SAAS0L,WACxBoH,GAPa,cASftY,KAAI,SAAAwX,GACJ,IAAM3Y,EAAU+Y,2BAAiBJ,EAAK3Y,QAAQ8Y,MAC9C,MAAO,CACLjY,UAAW8X,EAAK9X,UAChBb,cAGEwC,SAAQ,SAAA6V,GACZnO,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,QAASqY,QApBE,2CAnJd,sDA8KCqB,EA9KD,+BAAAvU,EAAA,MA8K2B,4BAAAA,EAAA,sEACGwU,EAC/BjH,EAAa/L,SAAS0L,WACtBzL,EAAO/F,WAHqB,OACxBnB,EADwB,OAK9BwK,EAAS,CACPuB,KAAMtJ,IAAW6U,4BACjB9N,KAAM,CACJxJ,wBAR0B,2CA9K3B,qDA4LCka,EA5LD,+BAAAzU,EAAA,MA4LwB,4BAAAA,EAAA,sEACGuN,EAAa1S,QAAQsX,QAAQvJ,IACzDnH,EAAO/F,UAAUwE,YAFQ,QACrB+R,EADqB,QAIX5U,SAAQ,SAACxC,GACvBkK,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,gBAINkK,EAAS,CACPuB,KAAMtJ,IAAWgV,kBACjBjO,KAAM,CACJkO,gBAAiBA,EAAgBjW,KAC/B,SAAC0Y,GAAD,OAAuBA,EAAEhZ,gBAhBJ,2CA5LxB,8DAkNoB2X,IAlNpB,cAkNC3C,EAlND,iBAmNiBoD,EAAapD,GAnN9B,eAmNCqC,EAnND,iBAoNCsB,EAAW3D,GApNZ,yBAqNC6D,IArND,yBAsNCE,IAtND,iCAwNE,CAAE/D,aAAYqC,YAxNhB,6C,sBA2NA,SAAeI,EAAtB,0C,4CAAO,WACL/T,EACAQ,EACAmF,EACA4P,EACAC,GALK,eAAA5U,EAAA,sEAOmB,sBAAC,8BAAAA,EAAA,8DACFd,IAAjB0V,EADmB,8CAEd1V,GAFc,mBAIC1D,YAJD,KAKrB4D,EAAeoC,SAASC,OAAO/F,UALV,SAMfgT,YAAWkG,GANI,+BAOrBxV,EAAeiB,UAPM,eAIW2T,eAJX,yCAIjBa,EAJiB,OASjBC,EAAmBlV,EAASiV,EAAU/Z,YATrB,uBAUKoE,IAArB4V,EACH,CACEpZ,UAAWmZ,EACXha,QAASia,QAEX5V,GAfmB,2CAAD,GAPnB,8BAyBmB,sBAAC,8BAAAc,EAAA,kEACCxE,YADD,KAErB4D,EAAeoC,SAASC,OAAO/F,UAFV,SAGfgT,YAAWiG,GAHI,+BAIrBvV,EAAeiB,UAJM,cACW2T,eADX,wCACjBe,EADiB,OAMjBC,EAAmBpV,EAASmV,EAAUja,YANrB,kBAOhBka,EACH,CACEtZ,UAAWqZ,EACXla,QAASma,QAEX9V,GAZmB,2CAAD,GAzBnB,cAyBC6V,EAzBD,gBAwCCE,EACJ7V,EACAQ,EACAmF,EACA4P,EACAC,GA7CG,OA+CDG,GAEFG,EAAgBH,EAAW3V,EAAgB2F,GAI7CA,EAAS,CACPuB,KAAMtJ,IAAWuV,qBACjBxO,KAAM,CACJtE,UAAWkV,EACX1S,OAAQ8S,EAAYA,EAAUrZ,eAAYwD,KAzDzC,6C,sBA8DA,SAAe+V,EAAtB,0C,4CAAO,WACL7V,EACAQ,EACAmF,EACA4P,EACAC,GALK,iBAAA5U,EAAA,sDAOD4U,IACIO,EAAsBvV,EAASgV,EAAa9Z,YAClDsE,EAAevE,QAAQua,YAAYC,YACjCF,EAAoB5P,eAKlB+P,EAAsB1V,EAAS+U,EAAa7Z,YAGrCsE,EAAevE,QAAQua,YAAYG,UAC9CD,EAAoB/P,cAEjB2I,GAAG,UAAU,SAACrT,GACjBkK,EAAS,CACPuB,KAAMtJ,IAAWyV,cACjB1O,KAAM,CACJlJ,QAAS,CACPa,UAAW4Z,EAAoB/P,aAC/B1K,iBAQRuE,EAAeoC,SAAS0L,WAAWsI,gBACjCF,EAAoBjQ,UACpB,SAACoQ,GACC,IAAMpQ,EAAWuO,2BAAiB6B,EAAI9B,MACtC5O,EAAS,CACPuB,KAAMtJ,IAAWyV,cACjB1O,KAAM,CACJlJ,QAAS,CACPa,UAAW4Z,EAAoBjQ,SAC/BxK,QAASwK,QAKjB,UAjDG,4C,sBAqDA,SAAS6P,EACdH,EACA3V,EACA2F,GAGA3F,EAAevE,QAAQoH,OACpBsT,UAAUR,EAAUrZ,WACpBwS,GAAG,UAAU,SAACrT,GACbkK,EAAS,CACPuB,KAAMtJ,IAAWyV,cACjB1O,KAAM,CACJlJ,QAAS,CACPa,UAAWqZ,EAAUrZ,UACrBb,iBAUV,IAAM6a,EAA0B,SAACzR,GAC/B7E,EAAeoC,SAAS0L,WAAWsI,gBACjCvR,GACA,SAACwR,GACC,IAAME,EAAeC,4BAAkBH,EAAI9B,MAC3C5O,EAAS,CACPuB,KAAMtJ,IAAWyV,cACjB1O,KAAM,CACJlJ,QAAS,CACPa,UAAWuI,EACXpJ,QAAS8a,QAKjB,WAKJD,EAAwBX,EAAUla,QAAQsH,SAAS1B,OACnDiV,EAAwBX,EAAUla,QAAQsH,SAAS6M,YACnD0G,EAAwBX,EAAUla,QAAQsH,SAAS2H,SACnD4L,EAAwBX,EAAUla,QAAQsH,SAASC,KACnDsT,EAAwBX,EAAUla,QAAQyH,eAAe7B,OACzDiV,EAAwBX,EAAUla,QAAQyH,eAAe0M,YACzD0G,EAAwBX,EAAUla,QAAQyH,eAAewH,SACzD4L,EAAwBX,EAAUla,QAAQyH,eAAeF,KAQpD,SAAegS,EAAtB,sC,4CAAO,WACLlP,EACAH,EACAmI,GAHK,SAAAlN,EAAA,sEAMGwO,IAAa+E,oBAAoBrG,EAAY,CACjDhI,EAAcrK,QAAQsH,SAAS1B,MAC/ByE,EAAcrK,QAAQsH,SAAS6M,WAC/B9J,EAAcrK,QAAQsH,SAAS2H,QAC/B5E,EAAcrK,QAAQsH,SAASC,IAC/B8C,EAAcrK,QAAQyH,eAAe7B,MACrCyE,EAAcrK,QAAQyH,eAAe0M,WACrC9J,EAAcrK,QAAQyH,eAAewH,QACrC5E,EAAcrK,QAAQyH,eAAeF,MAdpC,cAiBFzH,QAAO,SAAA6Y,GAAG,OAAY,OAARA,KACdxX,KAAI,SAACwX,GACJ,MAAO,CACL9X,UAAW8X,EAAI9X,UACfb,QAAS+a,4BAAkBpC,EAAI3Y,QAAQ8Y,UAGpCtW,SAAQ,SAAAxC,GACfkK,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,gBA5BD,4C,sBAkCA,SAAe2Z,EAAtB,oC,4CAAO,WAAqCtH,EAAwBxR,GAA7D,mBAAAsE,EAAA,6DACD6V,EAAUC,EAAwBpa,GADjC,SAEYwR,EAAW6I,mBAC1BlV,mBACA,CACEgV,YALC,cAEDG,EAFC,OAQCC,EAAUD,EACbha,KAAI,YAAoC,IAAjCT,EAAgC,EAAhCA,OAAmBoY,EAAa,EAAxB9Y,QAAW8Y,KACzB,MAAO,CACLjY,UAAW,IAAIF,YAAUD,GACzBV,QAASqb,EAAsBvC,OAZhC,kBAgBEsC,GAhBF,4C,sBAmBA,IAAME,EAAiBC,SAAoB,CAChDA,OAAkB,GAAI,QACtBA,OAAkB,GAAI,SACtBA,OAAkB,UAClBA,OAAkB,MAIb,SAASN,EAAwBpa,GACtC,MAAO,CACL,CACE2a,OAAQ,CAENC,OAAQH,EAAeI,SAAS,SAChCC,MAAO9a,EAAU+a,aAGrB,CACEC,SAAUP,EAAeQ,OAKxB,SAAST,EAAsBvC,GAEpC,MAA8BwC,EAAezC,OAAOC,GAA9CzZ,EAAN,EAAMA,KAAM0c,EAAZ,EAAYA,MAAO9a,EAAnB,EAAmBA,OACnB,MAAO,CACL5B,KAAM,IAAIsB,YAAUtB,GACpB0c,MAAO,IAAIpb,YAAUob,GACrB9a,U,gLChjBW,SAAS+a,GAAO3Z,GAC7B,IAAQ4Z,EAAe5Z,EAAf4Z,WACAhK,EAAYtS,aAAY,SAACC,GAC/B,MAAO,CACLqS,QAASrS,EAAMC,OAAOoS,QACtBgK,WACErc,EAAMC,OAAO2V,mBACb5V,EAAMC,OAAO4V,iBAAmBL,EAAeiB,iBAL7CpE,QAQF/H,EAAWC,cACjB,EAA2C1F,cAAnCC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,cACzB,EAAiDH,cAAzCoC,EAAR,EAAQA,OAAQrC,EAAhB,EAAgBA,eAAgBmO,EAAhC,EAAgCA,aAChC,EAAwCxS,oBAAS,GAAjD,mBAAOgc,EAAP,KAAqBC,EAArB,KACA,OACE,cAACC,EAAA,EAAD,CACEC,SAAS,SACT5c,MAAO,CACL6c,WAAY,UACZ5a,MAAO,UACP6a,UAAW,OACXnO,aAAc,kBANlB,SASE,cAACoO,GAAA,EAAD,UACE,sBACE/c,MAAO,CACL6B,QAAS,OACTC,eAAgB,gBAChBF,MAAO,QAJX,UAOE,sBAAK5B,MAAO,CAAE6B,QAAS,QAAvB,UACE,cAACmb,GAAD,IACA,cAACC,GAAD,CAAW3S,MAAM,QAAQ4S,WAAW,WACpC,cAACD,GAAD,CAAW3S,MAAM,UAAU4S,WAAW,wCACtC,cAACD,GAAD,CAAW3S,MAAM,SAAS4S,WAAW,uCACrC,cAACD,GAAD,CAAW3S,MAAM,aAAa4S,WAAW,8CAc3C,sBACEld,MAAO,CACL6B,QAAS,QAFb,UAKE,qBACEqC,QAAS,WACPwY,GAAgB,GAChBzX,EAAgB,aAAc,CAC5BnF,QAAS,SAEX0Y,EAAgB,CACd/N,WACAwI,eACAnO,iBACA0N,UACArL,WAECgC,MAAK,WACJuT,GAAgB,GAChBxX,OAEDkH,OAAM,SAACC,GACNqQ,GAAgB,GAChBxX,IACAD,EAAgB,mCAAD,OAAoCoH,GAAO,CACxDvM,QAAS,QACTyY,iBAAkB,WAI1BvY,MAAO,CACL6B,QAAS2a,EAAa,QAAU,OAChC1a,eAAgB,SAChBsF,cAAe,SACflE,YAAa,QA9BjB,SAiCGuZ,EACC,qBACEzc,MAAO,CACLyM,UAAW,MACX8D,QAAS,QAHb,SAME,cAAC4M,GAAA,EAAD,CAAkBnd,MAAO,CAAE4B,MAAO,OAAQkO,OAAQ,YAGpD,8BACE,cAACsN,GAAA,EAAD,UACE,cAAC,KAAD,UAKR,cAACC,GAAD,IACA,cAACC,GAAD,cAQZ,SAASN,KACP,IAAMO,EAAUC,cAChB,OACE,qBAAKxd,MAAO,CAAE6B,QAAS,QAAUqC,QAAS,kBAAMqZ,EAAQ7H,KAAK,MAA7D,SACE,cAAC+H,EAAA,EAAD,CAAQxb,MAAM,UAAd,SACE,qBACEjC,MAAO,CACL6B,QAAS,OACTuF,cAAe,SACftF,eAAgB,UAJpB,SAOE,qBACE9B,MAAO,CACL6B,QAAS,QACTiO,OAAQ,QAEV4N,IAAI,OACJC,IAAI,iFAchB,SAASV,GAAUra,GACjB,IAAM2a,EAAUC,cACRlT,EAA4B1H,EAA5B0H,MAAOsT,EAAqBhb,EAArBgb,KAAMV,EAAeta,EAAfsa,WACrB,OACE,qBACEld,MAAO,CACL6B,QAAS,OACTuF,cAAe,SACftF,eAAgB,UAElBoC,QAAS,kBAAMgZ,GAAcK,EAAQ7H,KAAKwH,IAN5C,SAQE,cAACW,GAAA,EAAD,CACE7d,MAAO,CAAEiC,MAAO,UAAW6b,eAAgB,QAC3CF,KAAMA,EACN5c,OAAO,SAHT,SAKE,cAACyc,EAAA,EAAD,CAAQxb,MAAM,UAAd,SACE,qBACEjC,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBsF,cAAe,UAJnB,SAOE,cAAC2W,EAAA,EAAD,CAAY/d,MAAO,CAAE4O,SAAU,QAA/B,SAA0CtE,YAQtD,SAAS+S,KACP,IAAM7K,EAAUtS,aAAY,SAACC,GAC3B,OAAOA,EAAMC,OAAOoS,WAEhB/H,EAAWC,cACjB,EAAgCjK,mBAAS,MAAzC,mBAAOud,EAAP,KAAiBC,EAAjB,KAEMC,EAAc,WAClBD,EAAY,OAGd,OACE,sBACEje,MAAO,CACLkD,YAAa,OACb0L,SAAU,OACV/M,QAAS,OACTC,eAAgB,SAChBsF,cAAe,UANnB,UASE,eAACqW,EAAA,EAAD,CACExb,MAAM,UACNiC,QAAS,SAACpD,GAAD,OACPmd,EAEEnd,EAAEqd,gBALR,UASE,cAAC,KAAD,IACA,cAACJ,EAAA,EAAD,CAAY/d,MAAO,CAAEiD,WAAY,MAAO2L,SAAU,QAAlD,SACG4D,EAAQlI,WAGb,cAAC8T,GAAA,EAAD,CACEJ,SAAUA,EACVxa,KAAM6a,QAAQL,GACdM,QAASJ,EACTle,MAAO,CACLiD,WAAY,OACZhB,MAAO,SANX,SASGgI,OAAOC,KAAKC,KAAUzI,KAAI,SAAC6c,GAAD,OACzB,cAACC,GAAA,EAAD,CAEEta,QAAS,WACPga,IACAzT,EAAS,CACPuB,KAAMtJ,IAAWsU,iBACjBvN,KAAM,CACJ+I,QAASrI,IAASoU,GAClBtH,WAAYsH,MARpB,SAaE,cAACR,EAAA,EAAD,UAAa5T,IAASoU,GAAGjU,SAZpBiU,WAoBV,SAASjB,KACapd,aAAY,SAACC,GACtC,MAAO,CACLse,eAAgBte,EAAMC,OAAO2V,sBAFzB0I,eAAR,IAKMhU,EAAWC,cACjB,EAAiC3F,cAAzBoC,EAAR,EAAQA,OAAQ8L,EAAhB,EAAgBA,aACRhO,EAAoBD,cAApBC,gBA8BR,OA3BA+D,qBAAU,WACR7B,EAAOyM,GAAG,cAAc,WACtB3O,EAAgB,2BAA4B,CAC1CnF,QAAS,OACTyY,iBAAkB,OAEpB9N,EAAS,CACPuB,KAAMtJ,IAAWqU,0BACjBtN,KAAM,KAERgB,EAAS,CACPuB,KAAMtJ,IAAW0U,sBACjB3N,KAAM,QAGVtC,EAAOyM,GAAG,UAAV,sBAAqB,sBAAAlO,EAAA,sDACnB+E,EAAS,CACPuB,KAAMtJ,IAAWoU,uBACjBrN,KAAM,KAERgB,EAAS,CACPuB,KAAMtJ,IAAWyU,uBACjB1N,KAAM,KAPW,8CAUpB,CAACtC,EAAQsD,EAAUxF,EAAiBgO,EAAa/L,SAAS0L,aAG3D,eAAC,KAAD,WACE,qBACE5S,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBsF,cAAe,UAEjBlD,QAAS,kBAAMiD,EAAO2M,cANxB,SAQE,cAAC,KAAD,MAEF,qBACE5P,QAAS,kBAAMiD,EAAO0M,WACtB7T,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBsF,cAAe,UALnB,SAQE,cAAC,KAAD,SClVO,SAASsX,KACtB,OACE,qBACE1e,MAAO,CACL2e,OAAQ,GACR/B,SAAU,QACVhb,MAAO,OACPgd,OAAQ,EACRC,UAAW,SACX/O,OAAQ,OACRgP,gBAAiB,UACjBC,UAAW,iBACXld,QAAS,OACTC,eAAgB,gBAChB0M,YAAa,OACbd,aAAc,QAblB,SAgBE,sBAAK1N,MAAO,CAAEiD,WAAY,OAAQC,YAAa,OAAQrB,QAAS,QAAhE,UACE,cAACmd,GAAD,CACEpB,KACE,sFAEFtT,MAAO,4BAET,cAAC0U,GAAD,CACEpB,KAAM,iDACNtT,MAAO,wBAET,cAAC0U,GAAD,CACEpB,KAAM,kDACNtT,MAAO,YAET,cAAC0U,GAAD,CAAcpB,KAAM,4BAA6BtT,MAAO,aACxD,cAAC0U,GAAD,CACEpB,KAAM,mCACNtT,MAAO,WAET,cAAC0U,GAAD,CACEpB,KAAM,0BACNtT,MAAO,iBACP2U,OAAO,SAajB,SAASD,GAAapc,GACpB,IAAQ0H,EAAuB1H,EAAvB0H,MAAOsT,EAAgBhb,EAAhBgb,KAAMqB,EAAUrc,EAAVqc,MACrB,OACE,qBACEjf,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBsF,cAAe,SACflE,YAAa+b,EAAQ,GAAK,QAL9B,SAQE,cAACpB,GAAA,EAAD,CAAMD,KAAMA,EAAM5c,OAAO,SAASiB,MAAM,UAAxC,SACE,cAAC8b,EAAA,EAAD,CAAY/d,MAAO,CAAE4O,SAAU,QAA/B,SAA0CtE,QC1DnC,SAAS4U,GAAOtc,GAC7B,IAAQ4Z,EAAetc,aAAY,SAACC,GAClC,MAAO,CACLqc,WACErc,EAAMC,OAAO2V,mBACb5V,EAAMC,OAAO4V,iBAAmBL,EAAeiB,iBAJ7C4F,WAOR,EAA8B/b,oBAAS,GAAvC,mBAAO0e,EAAP,KAAgBC,EAAhB,KACA,OACE,sBACEpf,MAAO,CACL6B,QAAS,OACTwd,UAAW,QACXjY,cAAe,SACf0X,gBAAiB,sBALrB,UAQE,qBACE9e,MAAO,CACL4c,SAAU,QACVhb,MAAO,OACP+c,OAAQ,IAJZ,SAOA,cAACpC,GAAD,CAAQC,WAAYA,MAEpB,qBACExc,MAAO,CACL4B,MAAO,OACP6K,UAAW,OACXpF,KAAM,EACNxF,QAAS,OACT6K,aAAc,QANlB,SASG4S,OAAOC,aAAaC,QAAQ,WAC1BhD,EAGC,qBAAKxc,MAAO,CAAE4B,MAAO,QAArB,SAAgCgB,EAAMiH,WAFtC,cAAC4V,GAAD,IAKF,cAACC,GAAD,CACEC,UAAW,WACTL,OAAOC,aAAaK,QAAQ,UAAW,QACvCR,GAAYD,QAKpB,cAACT,GAAD,OAON,IAAMmB,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJpe,MAAO,OACP,YAAa,CACX6K,UAAWsT,EAAME,QAAQ,SAK/B,SAASP,GAAT,GAAuE,IAAzCC,EAAwC,EAAxCA,UAC5B,OACE,sBACE3f,MAAO,CACLqH,KAAM,IACNxF,QAAS,OACTC,eAAgB,SAChBsF,cAAe,SACfyX,UAAW,UANf,UASE,qBAAK7e,MAAO,CAAE4B,MAAO,OAAQC,QAAS,QAAtC,SACE,qBACE7B,MAAO,CAAE6B,QAAS,OAAQoB,WAAY,OAAQC,YAAa,QAD7D,SAGE,cAAC6a,EAAA,EAAD,CACE/d,MAAO,CAAE0M,aAAc,OAAQyC,SAAU,UACzClN,MAAM,gBACNnC,QAAQ,KAHV,oGASJ,qBAAKE,MAAO,CAAE6B,QAAS,OAAQoB,WAAY,OAAQC,YAAa,QAAhE,SACE,cAACua,EAAA,EAAD,CAAQ3d,QAAQ,YAAYmC,MAAM,UAAUiC,QAASyb,EAArD,0BAQR,SAASF,KACP,IAAMS,EAAUL,KAChB,EAAoC3f,aAAY,SAACC,GAC/C,MAAO,CACLqS,QAASrS,EAAMC,OAAOoS,QACtB2N,gBAAiBhgB,EAAMC,OAAO2V,sBAH1BvD,EAAR,EAAQA,QAAS2N,EAAjB,EAAiBA,eAMjB,OACE,qBACEngB,MAAO,CACLqH,KAAM,IACNxF,QAAS,OACTC,eAAgB,SAChBsF,cAAe,SACfyX,UAAW,UANf,SASE,qBAAK7e,MAAO,CAAE4B,MAAO,OAAQC,QAAS,QAAtC,SACGse,EACC,qBACEngB,MAAO,CAAE6B,QAAS,OAAQoB,WAAY,OAAQC,YAAa,QAD7D,SAGE,cAAC6a,EAAA,EAAD,CACE/d,MAAO,CAAEiD,WAAY,QACrBhB,MAAM,gBACNnC,QAAQ,KAHV,4BASF,qBAAKE,MAAO,CAAE4B,MAAO,QAArB,SACE,sBAAK5B,MAAO,CAAE4B,MAAO,QAAUwe,UAAWF,EAAQF,KAAlD,UACE,8BACE,cAACjC,EAAA,EAAD,CAAYje,QAAQ,KAApB,iCACoB0S,EAAQlI,MAD5B,WAIF,qBACEtK,MAAO,CACLiD,WAAY,OACZC,YAAa,OACbtB,MAAO,SAJX,SAOE,cAACye,EAAA,EAAD,CAAgBrgB,MAAO,CAAE4B,MAAO,qB,+PCnJzC,SAAS0e,GACdngB,GA2BA,OAzBmB8J,OAAOC,KAAK/J,EAAMC,OAAOoS,QAAQ4D,YACjD1U,KAAI,SAAAyD,GAWH,MAVsC,CACpCA,EACA,CACE/D,UAAWjB,EAAMC,OAAOoS,QAAQ4D,WAAWjR,GAC3C5E,QACEJ,EAAMmF,SACJnF,EAAMC,OAAOoS,QAAQ4D,WAAWjR,GAAW3E,iBAMpDH,QAAO,SAAA2C,GAAC,YAAqB4B,IAAjB5B,EAAE,GAAGzC,WAEjBF,QAAO,oDAAkBe,UAAUC,OAAOlB,EAAMiF,SAASD,cACzDzD,KAAI,YAAe,IAAD,mBACjB,MAAO,CACL4I,MAFe,KAGfmN,eAHe,SAMlBnW,MAKU,SAASif,KACtB,IAAQzb,EAAmBC,cAAnBD,eACR,EAA6D5E,aAC3D,SAACC,GACC,IAAMiW,EAAanM,OAAOC,KAAK/J,EAAMC,OAAOoS,QAAQ4D,YACjD1U,KAAI,SAAAyD,GAWH,MAVsC,CACpCA,EACA,CACE/D,UAAWjB,EAAMC,OAAOoS,QAAQ4D,WAAWjR,GAC3C5E,QACEJ,EAAMmF,SACJnF,EAAMC,OAAOoS,QAAQ4D,WAAWjR,GAAW3E,iBAMpDH,QAAO,SAAA2C,GAAC,YAAqB4B,IAAjB5B,EAAE,GAAGzC,WACdigB,EAAyBpK,EAC5B/V,QAAO,oDAAkBe,UAAUC,OAAOlB,EAAMiF,SAASD,cACzDzD,KAAI,YAAe,IAAD,mBACjB,MAAO,CACL4I,MAFe,KAGfmN,eAHe,SAMlBnW,MACH,MAAO,CACLkR,QAASrS,EAAMC,OAAOoS,QACtBlN,SAAUnF,EAAMmF,SAChB8Q,aACAoK,wBA9BEpK,EAAR,EAAQA,WAAYoK,EAApB,EAAoBA,kBAAmBlb,EAAvC,EAAuCA,SAAUkN,EAAjD,EAAiDA,QAkC3C/H,EAAWC,cACX+V,EAAa7X,cAEnB,OACE,cAAC8X,GAAA,EAAD,CACE1gB,MAAO,CAAE4B,MAAO,QAASkO,OAAQ,QACjChQ,QAAS,WACTc,WAAS,EACTC,MAAO2f,EAAkBlW,MACzBvK,SAAQ,uCAAE,WAAMe,GAAN,eAAA4E,EAAA,sDACFP,EAA4BiR,EAC/B/V,QAAO,mCAAE2C,EAAF,iBAAcA,IAAMlC,EAAEE,OAAOH,SACpCa,KAAI,uDACJJ,MAEH+W,EACEvT,EACAQ,EACAmF,EACAtF,EAAW/D,UACXof,EAAkB/I,eAAerW,WAX3B,2CAAF,sDALV,SAoByB,IAAtBgV,EAAW3U,OACV,cAAC+c,GAAA,EAAD,CAAU3d,MAAO,WAAjB,mCAEAuV,EAAW1U,KAAI,YAAyB,IAAD,mBAAtB4I,EAAsB,KAAfnF,EAAe,KACrC,OACE,cAACqZ,GAAA,EAAD,CAAsB3d,MAAOyJ,EAA7B,SACE,sBAAKtK,MAAO,CAAE6B,QAAS,QAAvB,UACE,qBACE7B,MAAO,CACL6B,QAAS,OACTuF,cAAe,SACftF,eAAgB,UAJpB,SAOG6e,GAASF,EAAWG,IAAIzb,EAAU5E,QAAQX,KAAKY,eAElD,qBACER,MAAO,CACL+B,SAAU,SACVF,QAAS,OACTuF,cAAe,SACftF,eAAgB,UALpB,mBAQM+e,GAAwB1b,EAAWqN,UAnB9BlI,QA8B3B,SAASuW,GACP1b,EACAqN,GAEA,IAAMsO,EAAQ7W,OAAOC,KAAKsI,EAAQ4D,YAC/B/V,QAAO,SAAA2C,GAAC,OAAIwP,EAAQ4D,WAAWpT,GAAG3B,OAAO8D,EAAU/D,cACnDE,MACH,YAAcsD,IAAVkc,EACKA,EAAMvW,cAERpF,EAAU/D,UAAUZ,WAGtB,SAASmgB,GAASxf,EAAmBnB,GAC1C,OAAImB,EAEA,qBACEuc,IAAI,aACJ1d,MAAK,OAAEA,QAAF,IAAEA,IAAS,CAAEkD,YAAa,OAAQ4M,OAAQ,QAC/C6N,IAAKxc,EAAM4f,UAIR,qBAAK/gB,MAAO,CAAEiD,WAAY,U,mFCjJtB,SAAS+d,KACtB,IAAQrZ,EAAWzH,aAAY,SAACC,GAC9B,MAAO,CACLwH,OAAQxH,EAAMiF,SAASuC,WAFnBA,OAMR,OACE,qBAAK3H,MAAO,CAAE6B,QAAS,OAAQD,MAAO,QAAtC,SACE,qBAAK5B,MAAO,CAAEqH,KAAM,EAAGoF,UAAW,OAAQC,aAAc,QAAxD,SACG/E,GAAU,cAACsZ,GAAD,QAOnB,SAASA,KACP,MAWI/gB,aAAY,SAACC,GACf,IAAMwH,EAASxH,EAAMmF,SAASnF,EAAMiF,SAASuC,OAAQnH,YAC/C2E,EAAYhF,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,YAC1D,MAAO,CACL2E,YACAvF,KAAMO,EAAMmF,SAASH,EAAUvF,KAAKY,YACpC2F,MAAOhG,EAAMmF,SAASqC,EAAOE,SAAS1B,OACtCuO,WAAYvU,EAAMmF,SAASqC,EAAOE,SAAS6M,YAC3ClF,QAASrP,EAAMmF,SAASqC,EAAOE,SAAS2H,SACxC1H,IAAK3H,EAAMmF,SAASqC,EAAOE,SAASC,KACpCoZ,YAAa/gB,EAAMmF,SAASqC,EAAOK,eAAe7B,OAClDgb,iBAAkBhhB,EAAMmF,SAASqC,EAAOK,eAAe0M,YACvD0M,cAAejhB,EAAMmF,SAASqC,EAAOK,eAAewH,SACpD6R,UAAWlhB,EAAMmF,SAASqC,EAAOK,eAAeF,SAvBlDlI,EADF,EACEA,KACAuF,EAFF,EAEEA,UACAgB,EAHF,EAGEA,MACAuO,EAJF,EAIEA,WACAlF,EALF,EAKEA,QACA1H,EANF,EAMEA,IACAoZ,EAPF,EAOEA,YACAC,EARF,EAQEA,iBACAC,EATF,EASEA,cACAC,EAVF,EAUEA,UAiBIC,EAAS,CACb,CACE1U,MAAO,gBACP2U,YAAa,yDACbC,KAAM,CACJ,CACErgB,MAAO4I,YAAe5E,EAAUvF,MAChC6hB,QAASvf,YAAUiE,EAAM3E,OAAQ5B,EAAKC,UACtCwL,MAAOnJ,YAAUwS,EAAWlT,OAAQ5B,EAAKC,UACzC6hB,QAASxf,YAAUsN,EAAQhO,OAAQ5B,EAAKC,UACxCiI,IAAK5F,YAAU4F,EAAItG,OAAQ,MAIjC,CACEoL,MAAO,kBACP2U,YACE,8LACFC,KAAM,CACJ,CACErgB,MAAO4I,YAAe5E,EAAUvF,MAChC6hB,QAASvf,YAAUgf,EAAY1f,OAAQ5B,EAAKC,UAC5CwL,MAAOnJ,YAAUif,EAAiB3f,OAAQ5B,EAAKC,UAC/C6hB,QAASxf,YAAUkf,EAAc5f,OAAQ5B,EAAKC,UAC9CiI,IAAK5F,YAAUmf,EAAU7f,OAAQ,OAKzC,OACE,cAACmgB,GAAA,EAAD,CACE3hB,MAAO,CACL0M,aAAc,QAFlB,SAKE,cAACkV,GAAA,EAAD,CACE5hB,MAAO,CACLyM,UAAW,OACXmQ,SAAU,WACVlO,WAAY,EACZD,cAAe,QALnB,SAQG6S,EAAO5f,KAAI,SAAAmgB,GAAC,OACX,cAACC,GAAD,CAEElV,MAAOiV,EAAEjV,MACT2U,YAAaM,EAAEN,YACfC,KAAMK,EAAEL,MAHHK,EAAEjV,cAyBnB,SAASkV,GAAalf,GACpB,IAAQgK,EAA6BhK,EAA7BgK,MAAO4U,EAAsB5e,EAAtB4e,KAAMD,EAAgB3e,EAAhB2e,YACrB,OACE,sBAAKvhB,MAAO,CAAE0M,aAAc,QAA5B,UACE,cAACqR,EAAA,EAAD,CAAY/d,MAAO,CAAE2N,WAAY,QAAjC,SAA4Cf,IAC5C,cAACmR,EAAA,EAAD,CAAY9b,MAAM,gBAAgBjC,MAAO,CAAE4O,SAAU,QAArD,SACG2S,IAEH,cAACQ,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,UACE,eAACC,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,oBACA,cAACA,GAAA,EAAD,CAAWC,MAAM,QAAjB,uBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,QAAjB,qBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,QAAjB,oBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,QAAjB,uBAGJ,cAACC,GAAA,EAAD,UACY,OAATb,EACC,cAACrE,GAAA,EAAD,IAEAqE,EAAK9f,KAAI,SAAA4gB,GAAG,OACV,eAACJ,GAAA,EAAD,WACE,cAACC,GAAA,EAAD,CAAWI,UAAU,KAAKC,MAAM,MAAhC,SACGF,EAAInhB,QAEP,cAACghB,GAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BE,EAAIb,UAC9B,cAACU,GAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BE,EAAIZ,UAC9B,cAACS,GAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BE,EAAIjX,QAC9B,cAAC8W,GAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BE,EAAIxa,QAPjBwa,EAAInhB,oBCtJ5B,SAAeshB,GAAtB,qC,8CAAO,WACL1c,EACA8R,GAFK,qBAAAnS,EAAA,sEAI4BwO,IAAYhT,UAAUiT,mBACrD,CAAC0D,EAAQjS,YACTG,GANG,0CAIE3E,EAJF,KAIa0E,EAJb,uBAQE,CACL1E,YACA0E,UAVG,4C,0BC+CF4c,G,GCLAC,G,qEDZU,SAASC,KACtB,MAAoCniB,oBAAS,GAA7C,mBAAOoiB,EAAP,KAAmBC,EAAnB,KACA,OACE,qCACE,qBAAK5e,QAAS,kBAAM4e,GAAc,IAAlC,SACE,cAACrF,EAAA,EAAD,CAAQ3d,QAAQ,YAAYmC,MAAM,YAAlC,4BAIF,cAAC8gB,GAAD,CACEvf,KAAMqf,EACNvE,QAAS,kBAAMwE,GAAc,SAgBrC,SAASC,GAAiBngB,GACxB,IAAQY,EAAkBZ,EAAlBY,KAAM8a,EAAY1b,EAAZ0b,QACNkC,EAAsBtgB,aAAY,SAACC,GACzC,MAAO,CACLqgB,kBAAmBF,GAAgBngB,OAF/BqgB,kBAKR,EAA0C/f,mBACxCiiB,GAAoBM,UADtB,mBAAOC,EAAP,KAAsBC,EAAtB,KAIA,OACE,eAACC,GAAA,EAAD,CAAQ3f,KAAMA,EAAM8a,QAASA,EAAS1d,WAAS,EAACuO,SAAS,KAAzD,UACE,cAACiU,GAAA,EAAD,UACE,qBAAKpjB,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,iBAA/C,SACE,cAACic,EAAA,EAAD,CAAYje,QAAQ,KAAKyiB,UAAU,KAAnC,mCACsB/B,EAAkBlW,MAAMC,cAD9C,kBAKJ,eAAC8Y,GAAA,EAAD,WACE,eAACC,GAAA,EAAD,CAAMziB,MAAOoiB,EAAeljB,SAAU,SAACwjB,EAAI1B,GAAL,OAAWqB,EAAiBrB,IAAlE,UACE,cAAC2B,GAAA,EAAD,CAAK3iB,MAAO6hB,GAAoBM,SAAU1Y,MAAM,aAChD,cAACkZ,GAAA,EAAD,CAAK3iB,MAAO6hB,GAAoBe,OAAQnZ,MAAM,cAE/C2Y,IAAkBP,GAAoBM,UACrC,cAACU,GAAD,CAAkBpF,QAASA,IAE5B2E,IAAkBP,GAAoBe,QACrC,cAACE,GAAD,CAAgBrF,QAASA,UAWnC,SAASoF,GAAiB9gB,GACxB,IAAQ0b,EAAY1b,EAAZ0b,QACFsF,EAAQ5e,cACNF,EAAmBC,cAAnBD,eACR,EAAyC5E,aAAY,SAACC,GACpD,MAAO,CACLqS,QAASrS,EAAMC,OAAOoS,QACtBrN,UAAW,CACT/D,UAAWjB,EAAMiF,SAASD,UAC1B5E,QAASJ,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,aAEnD8E,SAAUnF,EAAMmF,aAPZkN,EAAR,EAAQA,QAASrN,EAAjB,EAAiBA,UAAWG,EAA5B,EAA4BA,SAW5B,EAAsD7E,mBACpD,MADF,mBAAOojB,EAAP,KAA4BC,EAA5B,KAGA,EAAgCrjB,mBAAwB,MAAxD,mBAAOqG,EAAP,KAAiBid,EAAjB,KACA,EAAkCtjB,mBAA2B,MAA7D,mBAAOujB,EAAP,KAAkBC,EAAlB,KACA,EAAwBxjB,mBAAwB,MAAhD,mBAAOb,EAAP,KAAaskB,EAAb,KAEMC,EACK,OAATvkB,GACc,OAAdokB,GACwB,OAAxBH,GACAA,GAAuB,KACV,OAAb/c,EAEIsd,EAAkB,uCAAG,sBAAA1e,EAAA,sEACnB2e,KACJT,EACA,8BACA,0BAHI,sBAIJ,4CAAAle,EAAA,yDACMqK,EAAczK,EAASkN,EAAQnI,MAAMzK,GAAOY,YADlD,gCAGwBqU,cAClB/P,EAAeoC,SACfsL,EAAQnI,MAAMzK,IALpB,OAGImQ,EAHJ,qBASQuU,EAAqBxa,YACzB+Z,EACA9T,EAAYlQ,UAER0kB,EAAa,CAAEC,SAAU,IACzBrhB,EAAS,IAAIqI,UACbiZ,EAAc,IAAIjZ,UAf1B,UAgBsCtK,YAAUiT,mBAC5C,CAAChP,EAAU/D,UAAUwE,WAAYzC,EAAO/B,UAAUwE,YAClDd,EAAeiB,WAlBnB,2CAgBSC,EAhBT,KAgBuBF,EAhBvB,UAoBehB,EAAemB,IApB9B,KAqBIse,EArBJ,KAsBID,EAtBJ,KAuBI,IAAI/iB,KAAGuF,GAvBX,KAwBIhC,EAAeoC,SAASC,OAAO/F,UAxBnC,KAyBI0E,EAzBJ,KA2BgB,CACRX,UAAWA,EAAU/D,UACrB6J,aAAc9F,EAAU5E,QAAQ0K,aAChCF,SAAU5F,EAAU5E,QAAQwK,SAC5B5H,OAAQA,EAAO/B,UACfqjB,YAAaA,EAAYrjB,UACzB4iB,YACAU,mBAAoB5f,EAAeoC,SAASC,OAAO/F,UACnDiF,aAAcC,qBAAkBC,iBAChCC,MAAOC,sBACPiF,KAAMD,sBArCd,KAuCe,CAACgZ,EAAathB,GAvC7B,4BAyCkB0R,2BACR/P,EAAeoC,SACfud,EAAYrjB,UACZoR,EAAQnI,MAAMzK,GACdoG,GA7CV,4DA+CclB,EAAevE,QAAQokB,aAAahZ,kBACxCxI,GAhDV,0FA2BMmC,SA3BN,KAuCMsG,QAvCN,KAwCMC,aAxCN,sBAoBkC+Y,WApBlC,gIALuB,OA4DzBtG,IA5DyB,2CAAH,qDAyExB,OACE,cAACuG,GAAD,CACErS,QAASA,EACT5S,KAAMA,EACNskB,QAASA,EACTD,aAAcA,EACdH,uBAAwBA,EACxBhd,SAAUA,EACVid,YAAaA,EACbe,SAAUxG,EACVpa,QArBY,WACdkgB,IAAqBhY,OAAM,SAAAC,GACzBC,QAAQC,MAAMF,GACduX,EAAM3e,gBAAN,0CACqCoH,EAAI7L,YACvC,CACEV,QAAS,cAgBbqkB,cAAeA,IAOrB,SAASR,GAAe/gB,GACtB,IAAQ0b,EAAY1b,EAAZ0b,QACFsF,EAAQ5e,cACNF,EAAmBC,cAAnBD,eACR,EAAyC5E,aAAY,SAACC,GACpD,MAAO,CACLqS,QAASrS,EAAMC,OAAOoS,QACtBrN,UAAW,CACT/D,UAAWjB,EAAMiF,SAASD,UAC1B5E,QAASJ,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,aAEnD8E,SAAUnF,EAAMmF,aAPZkN,EAAR,EAAQA,QAASrN,EAAjB,EAAiBA,UAAWG,EAA5B,EAA4BA,SAW5B,EAAsD7E,mBACpD,MADF,mBAAOojB,EAAP,KAA4BC,EAA5B,KAGA,EAA8BrjB,mBAAwB,MAAtD,mBAAOmD,EAAP,KAAgBmhB,EAAhB,KACA,EAA0BtkB,mBAAwB,MAAlD,mBAAO4O,EAAP,KAAc2V,EAAd,KACA,EAAgCvkB,mBAAwB,MAAxD,mBAAOqG,EAAP,KAAiBid,EAAjB,KACA,EAAkCtjB,mBAA2B,MAA7D,mBAAOujB,EAAP,KAAkBC,EAAlB,KACA,EAAwBxjB,mBAAwB,MAAhD,mBAAOb,EAAP,KAAaskB,EAAb,KACA,EAAsCzjB,mBAAS,GAA/C,mBAAOwkB,EAAP,KAAoBC,EAApB,KAEMf,EACQ,OAAZvgB,GACU,OAAVyL,GACS,OAATzP,GACc,OAAdokB,GACwB,OAAxBH,GACAA,GAAuB,KACV,OAAb/c,EAEIqe,EAAiB,uCAAG,sBAAAzf,EAAA,sEAClB2e,KACJT,EACA,4BACA,wBAHI,sBAIJ,4CAAAle,EAAA,6DACQ6e,EAAa,CACjBlgB,OAAQ,CACNT,QAAS,IAAIrC,KAAGqC,GAChByL,MAAO,IAAI9N,KAAG8N,GACd4V,YAAa,IAAI1jB,KAAG0jB,KAGlB9hB,EAAS,IAAIqI,UACbiZ,EAAc,IAAIjZ,UAT1B,SAUsCtK,YAAUiT,mBAC5C,CAAChP,EAAU/D,UAAUwE,WAAYzC,EAAO/B,UAAUwE,YAClDd,EAAeiB,WAZnB,0CAUSC,EAVT,KAUuBF,EAVvB,KAcMiK,EAAczK,EAASkN,EAAQnI,MAAMzK,GAAOY,YAC1C4kB,EAAetb,YACnB+Z,EACA9T,EAAYlQ,UAjBhB,KAmBeiF,EAAemB,IAnB9B,KAoBIse,EApBJ,KAqBIa,EArBJ,KAsBI,IAAI7jB,KAAGuF,GAtBX,KAuBIhC,EAAeoC,SAASC,OAAO/F,UAvBnC,KAwBI0E,EAxBJ,KA0BgB,CACRX,UAAWA,EAAU/D,UACrB6J,aAAc9F,EAAU5E,QAAQ0K,aAChCF,SAAU5F,EAAU5E,QAAQwK,SAC5B5H,OAAQA,EAAO/B,UACfqjB,YAAaA,EAAYrjB,UACzB4iB,YACAU,mBAAoB5f,EAAeoC,SAASC,OAAO/F,UACnDiF,aAAcC,qBAAkBC,iBAChCC,MAAOC,sBACPiF,KAAMD,sBApCd,KAsCe,CAACgZ,EAAathB,GAtC7B,4BAwCkB0R,2BACR/P,EAAeoC,SACfud,EAAYrjB,UACZoR,EAAQnI,MAAMzK,GACdoG,GA5CV,4DA8CclB,EAAevE,QAAQokB,aAAahZ,kBACxCxI,GA/CV,0FA0BMmC,SA1BN,KAsCMsG,QAtCN,KAuCMC,aAvCN,sBAmBkC+Y,WAnBlC,gIALsB,OA2DxBtG,IA3DwB,2CAAH,qDAsEvB,OACE,cAACuG,GAAD,CACErS,QAASA,EACT5S,KAAMA,EACNskB,QAASA,EACTD,aAAcA,EACdH,uBAAwBA,EACxBiB,WAAYA,EACZC,SAAUA,EACVC,YAAaA,EACbC,eAAgBA,EAChBpe,SAAUA,EACVid,YAAaA,EACbe,SAAUxG,EACVpa,QAtBY,WACdihB,IAAoB/Y,OAAM,SAAAC,GACxBuX,EAAM3e,gBAAN,wCAAuDoH,EAAI7L,YAAc,CACvEV,QAAS,cAoBXqkB,cAAeA,IAsBrB,SAASU,GAAejiB,GACtB,IACE4P,EAcE5P,EAdF4P,QACA5S,EAaEgD,EAbFhD,KACAqkB,EAYErhB,EAZFqhB,aACAC,EAWEthB,EAXFshB,QACAJ,EAUElhB,EAVFkhB,uBACAiB,EASEniB,EATFmiB,WACAC,EAQEpiB,EARFoiB,SACAC,EAOEriB,EAPFqiB,YACAC,EAMEtiB,EANFsiB,eACApe,EAKElE,EALFkE,SACAid,EAIEnhB,EAJFmhB,YACAe,EAGEliB,EAHFkiB,SACA5gB,EAEEtB,EAFFsB,QACAigB,EACEvhB,EADFuhB,cAEIkB,EAAyDpb,OAAOC,KACpEsI,EAAQnI,OACR3I,KAAI,SAAA4I,GACJ,MAAO,CACLA,QACAlJ,UAAWoR,EAAQnI,MAAMC,OAI7B,OACE,qCACE,gCACE,sBAAKtK,MAAO,CAAE6B,QAAS,OAAQ4K,UAAW,QAA1C,UACE,sBAAKzM,MAAO,CAAEqH,KAAM,GAApB,UACE,cAAC3H,GAAA,EAAD,CACEM,MAAO,CAAE8P,OAAQ,QACjBlQ,KAAe,OAATA,OAAgBgF,EAAY4N,EAAQnI,MAAMzK,GAChDG,SAAU,SAACuH,GAAD,OAAkB2c,EAAa3c,MAE3C,cAACge,GAAA,EAAD,sCAEF,8BACE,eAACC,GAAA,EAAD,CACEzlB,QAAQ,WACRE,MAAO,CAAE4B,MAAO,QAASqB,WAAY,OAAQwJ,UAAW,QAF1D,UAIE,cAAC+Y,GAAA,EAAD,mBACA,cAAC9E,GAAA,EAAD,CACE7f,MAAOjB,EACPG,SAAU,SAAAe,GAAC,OAAIojB,EAAQpjB,EAAEE,OAAOH,QAChCyJ,MAAM,OAHR,SAKG+a,EAAY3jB,KAAI,SAAAkX,GAAC,OAChB,cAAC4F,GAAA,EAAD,CAAU3d,MAAO+X,EAAEtO,MAAnB,SAA2BsO,EAAEtO,MAAMC,0BAK3C,8BACE,cAACkb,GAAA,EAAD,CACEzlB,MAAO,CAAEiD,WAAY,OAAQwJ,UAAW,QACxCiZ,GAAG,kBACHpb,MAAM,SACN0B,KAAK,SACL2Z,gBAAiB,CACfC,QAAQ,GAEV9lB,QAAQ,WACRC,SAAU,SAAAe,GAAC,OACTgjB,EAAuB+B,WAAW/kB,EAAEE,OAAOH,SAE7CilB,WAAY,CAAEC,WAAY,CAAEC,IAAK,gBAIzBphB,IAAbogB,QAAyCpgB,IAAfmgB,GACzB,qCACE,qBAAK/kB,MAAO,CAAE6B,QAAS,OAAQ4K,UAAW,QAA1C,SACE,sBAAKzM,MAAO,CAAEqH,KAAM,GAApB,UACE,cAACoe,GAAA,EAAD,CACE7kB,WAAS,EACT0J,MAAM,aACN0B,KAAK,iBACL2Z,gBAAiB,CACfC,QAAQ,GAEV7lB,SAAU,SAAAe,GACR,IAAMmlB,EAAI,IAAItiB,KAAK7C,EAAEE,OAAOH,OAC5BkkB,EAAWkB,EAAEC,UAAY,QAG7B,cAACZ,GAAA,EAAD,uCAGJ,sBAAKtlB,MAAO,CAAEqH,KAAM,EAAGoF,UAAW,QAAlC,UACE,cAACgZ,GAAA,EAAD,CACE7kB,WAAS,EACT0J,MAAM,WACN0B,KAAK,iBACL2Z,gBAAiB,CACfC,QAAQ,GAEV7lB,SAAU,SAAAe,GACR,IAAMmlB,EAAI,IAAItiB,KAAK7C,EAAEE,OAAOH,OAC5BmkB,EAASiB,EAAEC,UAAY,QAG3B,cAACZ,GAAA,EAAD,0DAIF,8BACE,cAACC,GAAA,EAAD,CAAa3kB,WAAS,EAAtB,SACE,cAAC6kB,GAAA,EAAD,CACEzlB,MAAO,CAAEyM,UAAW,QACpBiZ,GAAG,kBACHpb,MAAM,eACN0B,KAAK,SACL2Z,gBAAiB,CACfC,QAAQ,GAEV9lB,QAAQ,WACRe,MAAOokB,EACPllB,SAAU,SAAAe,GAAC,OACTokB,EAAgBpX,SAAShN,EAAEE,OAAOH,SAEpCilB,WAAY,CAAEC,WAAY,CAAEC,IAAK,aAM3C,sBAAKhmB,MAAO,CAAEyM,UAAW,OAAQ5K,QAAS,QAA1C,UACE,sBACE7B,MAAO,CACLqH,KAAM,EACNyI,OAAQ,OACR5M,YAAa,QAJjB,UAOE,cAACuiB,GAAA,EAAD,CACE7kB,WAAS,EACT0J,MAAM,cACN0B,KAAK,iBACL2Z,gBAAiB,CACfC,QAAQ,GAEV7lB,SAAU,SAAAe,GACR,IAAMmlB,EAAI,IAAItiB,KAAK7C,EAAEE,OAAOH,OAC5BkjB,EAAYkC,EAAEC,UAAY,QAG9B,cAACZ,GAAA,EAAD,yGAKF,qBAAKtlB,MAAO,CAAEyM,UAAW,QAAzB,SACE,cAACgZ,GAAA,EAAD,CACEzlB,MAAO,CAAE8P,OAAQ,QACjB/B,UAAQ,EACRoY,YAAY,wBACZvlB,WAAS,EACTC,MAAOiG,YAKf,eAACsf,GAAA,EAAD,WACE,cAAC3I,EAAA,EAAD,CAAQvZ,QAAS4gB,EAAjB,oBACA,cAACrH,EAAA,EAAD,CACEvZ,QAASA,EACT8H,KAAK,SACL/J,MAAM,UACN8L,UAAWoW,EAJb,wBExfO,SAASkC,GAAkBzjB,GACxC,MAAyCmC,cAAjCD,EAAR,EAAQA,eAAgBmO,EAAxB,EAAwBA,aACxB,EAA8B/S,aAAY,SAACC,GAWzC,MAAO,CACLgF,UAXgB,CAChB/D,UAAWjB,EAAMiF,SAASD,UAC1B5E,QAASJ,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,aAUjDmH,OARaxH,EAAMiF,SAASuC,OAC1B,CACEvG,UAAWjB,EAAMiF,SAASuC,OAC1BpH,QAASJ,EAAMmF,SAASnF,EAAMiF,SAASuC,OAAOnH,kBAEhDoE,MAVE+C,EAAR,EAAQA,OAAQxC,EAAhB,EAAgBA,UAgBR7B,EAAQV,EAARU,IACFmH,EAAWC,cACXkZ,EAAQ5e,cACd,EAA0BvE,mBAA2B,MAArD,mBAAOU,EAAP,KAAcmlB,EAAd,KAGMC,EAAY,uCAAG,sBAAA7gB,EAAA,sDACnB2e,KACET,EADF,mCAE8BtgB,EAAKH,OAAQ/B,UAAUZ,YACnD,mBAHF,sBAIE,0CAAAkF,EAAA,sEACuBZ,EAAevE,QAAQokB,aAC1CrhB,EAAIH,OAAQ/B,WAFhB,cACQ+B,EADR,gBAI8B6C,YAC1BlB,EAAeiB,UACfZ,EAAU/D,UACVkC,EAAIH,OAAQ/B,WAPhB,UAIQolB,EAJR,QASMljB,EAAKc,OAAOC,OATlB,wBAUUoiB,EAAkB,IAAIjb,UACtBkb,EAAuB,IAAIlb,UAXrC,UAYwCiX,GAClCxP,EAAalN,UACb0gB,EAAgBrlB,WAdtB,eAYUulB,EAZV,OAgBUC,EAAoB3T,EAAa4T,YAAYC,cAChDxhB,SAAS,CACRuS,QAAS4O,EAAgBrlB,UACzB+E,MAAOugB,EAAqBtlB,UAC5B4iB,UAAW7gB,EAAOgD,MAClBue,mBAAoB8B,EAAcplB,UAClCiF,aAAcC,qBAAkBC,iBAChCmF,KAAMD,qBACNjF,MAAOC,wBAIR/E,KAAI,SAACqlB,GAAD,OACHA,EAAK9lB,OAAOI,OAAOmlB,EAAcplB,WAAjC,2BACS2lB,GADT,IACelW,UAAU,IACrBkW,KA/BZ,KAiCqBjiB,EAAemB,IAjCpC,KAkCM0gB,EAAsB7gB,MAlC5B,UAsC0BhB,EAAe3E,MAAMwJ,UAtC/C,gCAuCyBsJ,EAAalN,UAvCtC,KAwCe,CACHZ,UAAWA,EAAU/D,UACrBuG,OAAQA,EAAQvG,UAChBgK,YAAatG,EAAeoC,SAASC,OAAO/F,UAC5CyG,SAAUF,EAAQpH,QAAQsH,SAC1BG,eAAgBL,EAAQpH,QAAQyH,eAChC7E,OAAQG,EAAIH,OAAQ/B,UACpB+E,MAAO7C,EAAIH,OAAQ5C,QAAQ4F,MAC3BH,aAAcwgB,EAAcplB,UAC5BiF,aAAcC,qBAAkBC,iBAChCC,MAAOC,uBAlDnB,MAsCUrB,SAtCV,KAuCU4hB,cAvCV,KAwCUC,IAxCV,WAqDQL,EArDR,KAsDiB,CAACH,EAAiBC,GAtDnC,UAwDgBzT,EAAa1S,QAAQsX,QAAQlM,kBACjC8a,GAzDZ,4DA2DoBS,mCACRpiB,EAAeoC,SACfwf,EAAqBtlB,UACrBkC,EAAIH,OAAQ5C,QAAQX,KACpB+mB,EAAsBvlB,WA/DlC,6FAoCQkE,SApCR,KAqDQshB,kBArDR,KAsDQhb,QAtDR,KAuDQC,aAvDR,sBAiCwCsb,kBAjCxC,qCAiCUzgB,EAjCV,iBAqEkCuM,EAAa1S,QAAQsX,QAAQvJ,IACzDxJ,EAAeoC,SAASC,OAAO/F,UAAUwE,YAtE/C,eAqEU+R,EArEV,QAwEoB5U,SAAQ,SAAAxC,GACtBkK,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,gBAINkK,EAAS,CACPuB,KAAMtJ,IAAWgV,kBACjBjO,KAAM,CACJkO,gBAAiBA,EAAgBjW,KAAI,SAAA0Y,GAAC,OAAIA,EAAEhZ,gBAnFpD,kBAsFWsF,GAtFX,yBAwFiB5B,EAAemB,IAAImhB,YAAY,CAC1C9hB,SAAU,CACR+hB,GAAIlmB,EACJ8lB,IAAK,CACH9hB,UAAWA,EAAU/D,UACrBuG,OAAQA,EAAQvG,UAChBgK,YAAatG,EAAeoC,SAASC,OAAO/F,UAC5CyG,SAAUF,EAAQpH,QAAQsH,SAC1BG,eAAgBL,EAAQpH,QAAQyH,eAEhC7E,OAAQG,EAAIH,OAAQ/B,UACpB+E,MAAOhD,EAAOgD,MACdH,aAAcwgB,EAAcplB,UAE5BiF,aAAcC,qBAAkBC,iBAChCC,MAAOC,0BAvGjB,sFALiB,2CAAH,qDAqHlB,OACE,sCACInD,EAAIc,OAAOC,QACX,8BACE,cAAC3E,GAAA,EAAD,CACEM,MAAO,CAAE4B,MAAO,QAASkO,OAAQ,QACjClQ,KAAM0D,EAAIH,OAAO5C,QAAQX,KACzBG,SAAU,SAACuH,GAAD,OAAkBgf,EAAShf,QAI3C,qBAAKtH,MAAO,CAAEiD,WAAY,OAAQC,YAAa,QAA/C,SACE,cAACua,EAAA,EAAD,CACE1P,SAAUzK,EAAIc,OAAOkjB,eAA2B,OAAVnmB,EACtCrB,QAAQ,YACRmC,MAAM,UACNiC,QAAS,kBACPqiB,IAAena,OAAM,SAAAC,GACnBC,QAAQC,MAAMF,GACduX,EAAM3e,gBAAN,2CACsCoH,EAAI7L,YACxC,CACEV,QAAS,cAVnB,iCClKO,SAASynB,KACtB,IAAQziB,EAAmBC,cAAnBD,eACF2F,EAAWC,cACXkZ,EAAQ5e,cACRyC,EAAMvH,aAAY,SAACC,GACvB,IAAMgF,EAAYhF,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,YACpDgnB,EAAmB,CACvBpmB,UAAW+D,EAAU8F,aACrB1K,QAASJ,EAAMmF,SAASH,EAAU8F,aAAazK,aAEjD,MAAO,CACL8E,SAAUnF,EAAMmF,SAChBkiB,mBACA7f,OAAQxH,EAAMiF,SAASuC,OACnB,CACEvG,UAAWjB,EAAMiF,SAASuC,OAC1BpH,QAASJ,EAAMmF,SAASnF,EAAMiF,SAASuC,OAAOnH,kBAEhDoE,EACJ4N,QAASrS,EAAMC,OAAOoS,YAGlBgV,EAAqB/f,EAArB+f,iBAEFjS,EAASvD,mBAAQ,kBAAMqD,YAAamS,EAAiBjnB,WAAU,CACnEinB,EAAiBjnB,UAGnByI,qBAAU,WACR,sBAAC,sBAAAtD,EAAA,sEAEwBwO,IAAa+E,oBAClCnU,EAAeoC,SAAS0L,WACxB2C,EAAO7T,KAAI,SAAAkX,GAAC,OAAIA,EAAEzV,WAJrB,cAMUJ,SAAQ,SAAA2C,GACf,GAAU,OAANA,EAAJ,CAMA,IAAMnF,EAAUuE,EAAeqU,MAAM7T,SAAS8T,OAC5C,eACA1T,EAAEnF,QAAQ8Y,MAEZ5O,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,QAAS,CAAEa,UAAWsE,EAAEtE,UAAWb,mBAZrCqjB,EAAM3e,gBAAN,2CAAkE,CAChEnF,QAAS,aAThB,0CAAD,KAyBC,CACDyV,EACA9K,EACAmZ,EACA9e,EAAeqU,MAAM7T,SACrBR,EAAeoC,SAAS0L,aAI1B,IAAM/P,EAAU0S,EACb7T,KAAI,SAACkX,GAAD,OAAYrR,KAAwBkgB,YAAYhgB,EAAKmR,MACzD8O,UAGCC,EAAa,KAUjB,OAT+C,IAA3C9kB,EAAQxC,QAAO,SAAA2C,GAAC,OAAU,OAANA,KAAYvB,SAClCkmB,EAAa9kB,EACVxC,QAAO,SAAA2C,GAAC,OAAIA,EAAGsB,cACf6L,MAAK,SAACzK,EAAG0K,GAAJ,OACJ1K,EAAG8B,OAAS4I,EAAG5I,QAAU,EAAI9B,EAAG8B,OAAS4I,EAAG5I,OAAS,EAAI,KAE1DogB,SAIH,sBAAK5nB,MAAO,CAAE4B,MAAO,OAAQ6K,UAAW,QAAxC,UACGkb,GACC,cAAChG,GAAA,EAAD,CAAM3hB,MAAO,CAAE0M,aAAc,QAA7B,SACE,cAACkV,GAAA,EAAD,UACE,eAAC7D,EAAA,EAAD,CAAYje,QAAQ,KAApB,gIAEoD,oCAAW,IAF/D,2HASN,sBACEE,MAAO,CACL0M,aAAc,OACd7K,QAAS,OACTC,eAAgB,iBAJpB,UAOE,cAACic,EAAA,EAAD,CAAY/d,MAAO,CAAE2N,WAAY,OAAQiB,SAAU,QAAnD,4BAGA,sBAAK5O,MAAO,CAAE6B,QAAS,QAAvB,UACG8lB,GAAc,cAACtB,GAAD,CAAmB/iB,IAAKqkB,IACtCpI,aAAaC,QAAQ,YAAc,cAACoD,GAAD,UAGxC,qBAAK5iB,MAAO,CAAE0M,aAAc,QAA5B,SACE,eAACqR,EAAA,EAAD,0JAGK,wCAHL,oBAGoC,yCAHpC,qEAI+C,uCAJ/C,yHASF,cAAC8J,GAAA,EAAD,UACE,cAACllB,GAAA,EAAD,CAAaE,QAASA,SCpHf,SAASilB,GAAsBnoB,GAC5C,IAAQC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,SAAUC,EAAsCH,EAAtCG,QAASC,EAA6BJ,EAA7BI,SAAUC,EAAmBL,EAAnBK,MAAO+nB,EAAYpoB,EAAZooB,QAC5C5R,EAA6BjW,aAAY,SAACC,GAC9C,OAAKP,EAGEO,EAAM+V,OAAOC,SACjBzU,KAAI,SAAA0Y,GACH,MAAO,CAAEhZ,UAAWgZ,EAAG7Z,QAASJ,EAAMmF,SAAS8U,EAAE5Z,gBAElDH,QAAO,SAAA+Z,GAAC,OAAIA,EAAE7Z,QAAQX,KAAKyB,OAAOzB,MAN5B,MAQX,EAAsCa,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,OACE,cAAC+f,GAAA,EAAD,CACE1gB,MAAOA,EACPF,QAASA,EACTc,WAAS,EACTC,MAAOH,EACPX,SAAU,SAAAe,GACR,IAAMC,EAAKD,EAAEE,OAAOH,MACpBF,EAAeI,GACf,IAAME,EAAS,IAAIC,YAAUH,GACvBqZ,EAAIjE,EAAS9V,QAAO,SAAA+Z,GAAC,OAAIA,EAAEhZ,UAAUC,OAAOJ,MAASK,MAC3DvB,EAASkB,EAAQ+mB,GAAgB5N,EAAI2N,KAVzC,SAauB,IAApB5R,EAAS1U,OACR,cAAC+c,GAAA,EAAD,CAAU3d,MAAO,GAAjB,uCAEAsV,EAASzU,KAAI,SAAA0Y,GACX,OACE,cAACoE,GAAA,EAAD,CAAU3d,MAAOuZ,EAAEhZ,UAAUZ,WAA7B,SACE,sBACER,MAAO,CACL4B,MAAO,OACPC,QAAS,OACTC,eAAgB,iBAJpB,UAOE,wCAASsY,EAAEhZ,UAAUZ,cACrB,qBAAKR,MAAO,CAAEgC,MAAO,QAASC,MAAO,QAArC,mBAAmDC,YACjD8lB,GAAgB5N,EAAG2N,GACnBloB,gBAWlB,SAASmoB,GAAgB5N,EAAmB2N,GAC1C,OAAOA,EACH3N,EAAE7Z,QAAQ0nB,YAAYC,IAAI9N,EAAE7Z,QAAQ4nB,gBACpC/N,EAAE7Z,QAAQ4nB,eHtBD,SAASC,KACtB,MAAsB3nB,mBAASkiB,GAAS3B,IAAxC,mBAAOqH,EAAP,KAAYC,EAAZ,KACA,OACE,gCACE,cAACC,GAAD,CAAcD,OAAQA,IACtB,eAACE,GAAA,EAAD,CAAWC,OAAK,EAACtZ,SAAS,KAAKnP,MAAO,CAAEqH,KAAM,EAAGxF,QAAS,QAA1D,UACGwmB,IAAQ1F,GAAS3B,IAAM,cAACA,GAAD,IACvBqH,IAAQ1F,GAASnY,OAAS,cAACA,GAAA,EAAD,IAC1B6d,IAAQ1F,GAAS4E,SAAW,cAACA,GAAD,UAUrC,SAASgB,GAAa3lB,GACpB,MAAsBnC,mBAASkiB,GAAS3B,IAAxC,mBAAOqH,EAAP,KAAYC,EAAZ,KACA,EAAgDpoB,aAC9C,SAACC,GACC,MAAO,CACLwH,OAAQxH,EAAMiF,SAASuC,OACvBxC,UAAWhF,EAAMiF,SAASD,UAC1BwF,iBAAkBxK,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,gBALxDmH,EAAR,EAAQA,OAAQxC,EAAhB,EAAgBA,UAAWwF,EAA3B,EAA2BA,iBAS3B,EAAkDlK,oBAAS,GAA3D,mBAAOioB,EAAP,KAA0BC,EAA1B,KACA,EAAoDloB,oBAAS,GAA7D,mBAAOmoB,EAAP,KAA2BC,EAA3B,KACA,EAA2C7jB,cAAnCC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,cACzB,EAAmCH,cAA3BoC,EAAR,EAAQA,OAAQrC,EAAhB,EAAgBA,eACV2F,EAAWC,cAEXoe,EAAkB,uCAAG,gEAAApjB,EAAA,6DACzBT,EAAgB,yBAA0B,CACxCnF,QAAS,SAFc,SAINsU,YAAWjP,GAJL,cAInBmP,EAJmB,gBAKJpT,YAAUwY,eAC7BvS,EAAO/F,UACPkT,EACAxP,EAAeiB,WARQ,cAKnB4B,EALmB,gBAUUuD,YACjCpG,EAAeiB,UACfZ,EACAwC,GAbuB,uBAUjBvG,EAViB,EAUjBA,UAAW0E,EAVM,EAUNA,MAKbijB,EAAwB3nB,EAfL,UAiBQoT,YAC/B1P,EAAeoC,SACfyD,EACAoe,GApBuB,2CAiBlBC,EAjBkB,KAiBVnhB,EAjBU,eAsBgB2M,YACvC1P,EAAeoC,SACfyD,EACAoe,GAzBuB,2CAsBlBE,EAtBkB,KAsBRjhB,EAtBQ,UA2BdlD,EAAeokB,YA3BD,KA2B0BpjB,EA3B1B,KA4Bb,CACRX,UAAWA,EACXwC,OAAQA,EACRyD,YAAajE,EAAO/F,UACpB8J,aAAc6d,EACdlhB,WACAG,iBACA3B,aAAcC,qBAAkBC,iBAChCmF,KAAMD,sBApCe,KAuCrB0d,gBAvCqB,KAwCPhiB,EAAO/F,UAxCA,KAyCDuG,EAzCC,KA0CPR,EAAO/F,UA1CA,KA2CnBkT,EA3CmB,UA4CHxP,EAAeoC,SAAS0L,WAAW+B,kCACjD7P,EAAevE,QAAQoH,OAAOyhB,MA7Cb,gCA+CZtkB,EAAevE,QAAQoH,OAAOyhB,KA/ClB,MAgDRtkB,EAAeiB,UAhDP,OAwCnBsjB,WAxCmB,KAyCnBC,iBAzCmB,KA0CnBC,WA1CmB,KA2CnBjV,KA3CmB,KA4CnBM,SA5CmB,KA+CnB4U,MA/CmB,KAgDnBzjB,UAhDmB,kBAuCP0jB,sBAvCO,sCA4BvBnkB,SA5BuB,KAsCvBuG,aAtCuB,OA2BnBnF,EA3BmB,KA2BagjB,aA3Bb,sBAqDnBC,EAAS,CAACX,EAAQC,EAAU,CAAEviB,KAAIkF,QADb,KApDF,UAuDN9G,EAAeoC,SAAS0iB,QAAQD,EAAQ,CACzDhX,WAAY,SACZD,oBAAqB,SACrBmX,eAAe,IA1DQ,eAuDrBC,EAvDqB,OA4DzBxd,QAAQyd,IAAI,sCAAuCD,GA5D1B,UA8DGhlB,EAAevE,QAAQoH,OAAOA,GA9DjC,eA8DnBiD,EA9DmB,OA+DnBof,EAAuB,CAC3B5oB,UAAWuG,EACXpH,QAASqK,GAGXH,EAAS,CACPuB,KAAMtJ,IAAWwV,WACjBzO,KAAM,CACJlJ,QAASypB,KAvEY,UA4EnB3R,EACJ2R,EACAvf,EACA3F,EAAeoC,SAAS0L,YA/ED,QAmFzByF,EAA0B2R,EAAsBllB,EAAgB2F,GAGhEA,EAAS,CACPuB,KAAMtJ,IAAWsV,kBACjBvO,KAAM,CACJ9B,YAIJzC,IACAD,EAAgB,yBAAD,OAA0B0C,EAAOnH,YAAc,CAC5DV,QAAS,YA/Fc,4CAAH,qDAmGlBmqB,EAAYC,KAAO7N,KAAV,8EAMf,OACE,qCACE,sBACErc,MAAO,CACL8e,gBAAiB,OACjBpQ,WAAY,OACZC,aAAc,kBAJlB,UAOE,eAAC6Z,GAAA,EAAD,CACEC,OAAK,EACLtZ,SAAS,KACTnP,MAAO,CACL8P,OAAQ,OACRjO,QAAS,OACTuF,cAAe,SACftF,eAAgB,iBAPpB,UAUE,sBAAK9B,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,iBAA/C,UACE,8BACE,cAACic,EAAA,EAAD,CAAYje,QAAQ,KAAKE,MAAO,CAAE0M,aAAc,QAAhD,wBAIF,qBACE1M,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBsF,cAAe,UAJnB,SAOE,cAACmZ,GAAD,SAGJ,sBACEvgB,MAAO,CACL6B,QAAS,OACTC,eAAgB,iBAHpB,UAME,8BACE,cAACic,EAAA,EAAD,eACcnZ,IAAX+C,EACCA,EAAOnH,WAEP,iEAC4B,IAC1B,cAACypB,EAAD,CACE/lB,QAAS,WACP4kB,IAAqB1c,OAAM,SAAAC,GACzBC,QAAQC,MAAMF,GACdpH,EAAgB,iCAAD,OACoBoH,EAAI7L,YACrC,CACEV,QAAS,cAKjBE,MAAO,CACLiC,MAAO,QACP0L,WAAY,OACZmQ,eAAgB,aAfpB,oBAmBa,IArBf,0BA2BN,8BACE,gCACE,eAACL,EAAA,EAAD,CACE1P,cAAqBnJ,IAAX+C,EACVzD,QAAS,kBAAMykB,GAAqB,IACpC7oB,QAAQ,WACRmC,MAAM,UACNjC,MAAO,CAAEkD,YAAa,QALxB,UAOE,cAAC,KAAD,CAAmBlD,MAAO,CAAE4O,SAAU,UACtC,cAACmP,EAAA,EAAD,CAAY/d,MAAO,CAAEiD,WAAY,MAAOC,YAAa,OAArD,wBAIF,eAACua,EAAA,EAAD,CACE1P,cAAqBnJ,IAAX+C,EACV7H,QAAQ,WACRmC,MAAM,UACNiC,QAAS,kBAAM2kB,GAAsB,IAJvC,UAME,cAAC,KAAD,CAAiB7oB,MAAO,CAAE4O,SAAU,UACpC,cAACmP,EAAA,EAAD,CAAY/d,MAAO,CAAEiD,WAAY,MAAOC,YAAa,OAArD,oCAQV,qBACElD,MAAO,CACLmP,SAAU,QACVlM,WAAY,OACZC,YAAa,OACbsL,YAAa,OACbd,aAAc,OACdjB,UAAW,QAPf,SAUE,eAAC6W,GAAA,EAAD,CACEziB,MAAOwnB,EACPtoB,SAAU,SAACwjB,EAAI1B,GACbyG,EAAOzG,GACPjf,EAAM0lB,OAAOzG,IAJjB,UAOE,cAAC2B,GAAA,EAAD,CAAK3iB,MAAO8hB,GAAS3B,GAAI1W,MAAM,OAC/B,cAACkZ,GAAA,EAAD,CAAK3iB,MAAO8hB,GAASnY,MAAOF,MAAM,UAClC,cAACkZ,GAAA,EAAD,CAAK3iB,MAAO8hB,GAAS4E,QAASjd,MAAM,yBAI9B1F,IAAX+C,GACC,qCACE,cAACwiB,GAAD,CACE3mB,KAAMklB,EACNpK,QAAS,kBAAMqK,GAAqB,MAEtC,cAACyB,GAAD,CACE5mB,KAAMolB,EACNtK,QAAS,kBAAMuK,GAAsB,YAajD,SAASsB,GAAcvnB,GACrB,IAAQY,EAAkBZ,EAAlBY,KAAM8a,EAAY1b,EAAZ0b,QACd,EAA2CtZ,cAAnCC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,cACzB,EAAyCH,cAAjCD,EAAR,EAAQA,eAAgBmO,EAAxB,EAAwBA,aAClBxI,EAAWC,cACjB,EAMIxK,aAAY,SAACC,GACf,IAAIyK,OAAgBhG,EAChBzE,EAAMiF,SAASuC,SACjBiD,EAAgBzK,EAAMmF,SAASnF,EAAMiF,SAASuC,OAAOnH,aAEvD,IAAMmK,EACJxK,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,YACpC2E,EAA4B,CAChC/D,UAAWjB,EAAMiF,SAASD,UAC1B5E,QAASoK,GAEX,MAAO,CACLxF,YACAyF,gBACAjD,OAAQxH,EAAMiF,SAASuC,OACvBoI,YAAa5P,EAAMmF,SAASH,EAAU5E,QAAQX,KAAKY,YACnD8E,SAAUnF,EAAMmF,aArBlBH,EADF,EACEA,UACAwC,EAFF,EAEEA,OACAiD,EAHF,EAGEA,cACAmF,EAJF,EAIEA,YACAzK,EALF,EAKEA,SAoBF,OACE,cAAC+kB,GAAD,CACEtC,SAAS,EACTnb,MAAO,UACP0d,YAAa,+BACb9mB,KAAMA,EACN8a,QAASA,EACTiM,WAAU,uCAAE,WACVvmB,EACAwmB,EACA1f,GAHU,iBAAApF,EAAA,6DAKJlE,EAASsI,YAAY0gB,EAAeza,EAAYlQ,UACtDoF,EAAgB,cAAD,OACCulB,EADD,YACkBzgB,YAC7B5E,EAAU5E,QAAQX,MAFP,iBAGHoE,EAAKxD,YACf,CACEV,QAAS,SAXH,SAcO,sBAAC,4CAAA4F,EAAA,0DACZoF,EADY,wBAER2f,EAAY3lB,EAAeqU,MAAM0N,YAAY6D,OACjD,iBACA,CACElpB,WAGEqW,EAAUvS,EAAStB,EAAKxD,YARhB,SAUN0K,YACJpG,EAAeiB,UACfZ,EAAU/D,UACVuG,GAbU,cASRgjB,EATQ,OAeZvpB,UAfY,SAiBNqhB,GAAcxP,EAAalN,UAAW/B,GAjBhC,cAgBR4mB,EAhBQ,OAkBZxpB,UAlBY,UAsBI0D,EAAe3E,MAAMwJ,UAtBzB,iCAsBV1I,OAtBU,KAuBV4pB,YAAY,EACZha,UAAU,GAxBA,KA0BZ,CACE5P,OAAQkE,EAAU/D,UAClBypB,YAAY,EACZha,UAAU,GA7BA,KA+BZ,CAAE5P,OAAQ0G,EAASkjB,YAAY,EAAOha,UAAU,GA/BpC,KAgCZ,CACE5P,OAAQ6D,EAAeoC,SAASC,OAAO/F,UACvCypB,YAAY,EACZha,UAAU,GAhBRia,EAnBQ,2BAsCG7X,EAAahN,IAtChB,KAuCZwkB,EAvCY,KAwCZjpB,EAxCY,UA6CQyR,EAAa9S,MAAMwJ,UA7C3B,gCA8CO7E,EAAeoC,SAASC,OAAO/F,UA9CtC,MA+Cc0D,EAAeiB,UA/C7B,MAgDG/B,EAhDH,MAiDC6T,EAAQ1R,MAjDT,MAkDSykB,EAlDT,MAmDQtkB,qBAAkBC,iBAnD1B,MAoDmBqE,EAAc5C,eAAe7B,MApDhD,MAqD4BwkB,EArD5B,OA6CNzU,OA7CM,KA8CN9K,YA9CM,KA+CN2f,mBA/CM,MAgDNlT,QAhDM,MAiDN1R,MAjDM,MAkDNsc,cAlDM,MAmDNpc,aAnDM,MAoDN2kB,wBApDM,MAqDNC,iCArDM,cA2CRC,SA3CQ,aAwDSJ,EAxDT,OA0CVxlB,SA1CU,MAwDVshB,kBAxDU,sBAsCoBuE,kBAtCpB,0CAsCRzkB,EAtCQ,iBA6DsBuM,EAAa1S,QAAQsX,QACvD7T,GA9DY,eA6DRonB,EA7DQ,OAgEd3gB,EAAS,CACPuB,KAAMtJ,IAAWkV,oBACjBnO,KAAM,CACJoO,QAAS,CACPzW,UAAW4C,EACXzD,QAAS6qB,MArED,kBA0EP1kB,GA1EO,yBA4EG5B,EAAemB,IAAI8hB,QAAQvmB,EAAQ,CAClD8D,SAAU,CACR0e,UAAWhgB,EACX0gB,mBAAoB5f,EAAeoC,SAASC,OAAO/F,UACnDiF,aAAcC,qBAAkBC,iBAChCJ,MAAOyE,EAAc/C,SAAS1B,MAC9BiF,YAAatG,EAAeoC,SAASC,OAAO/F,UAC5CuG,OAAQA,KAnFE,eA4ERjB,EA5EQ,iBAuFa2kB,0BACzBvmB,EAAeoC,SACflD,GAzFY,eAuFRqX,EAvFQ,OA2Fd5Q,EAAS,CACPuB,KAAMtJ,IAAW8U,+BACjB/N,KAAM,CACJlJ,QAAS,CACPa,UAAW4C,EACXzD,QAAS8a,MAhGD,kBAqGP3U,GArGO,2CAAD,GAdP,OAcJA,EAdI,OAsHVxB,IACAD,EAAgB,mBAAoB,CAClCnF,QAAS,UACT6G,OAAQ,cAAC,KAAD,CAAiCC,UAAWF,MAEtD4X,IA3HU,2CAAF,4DAmIhB,SAAS8L,GAAexnB,GACtB,IAAQY,EAAkBZ,EAAlBY,KAAM8a,EAAY1b,EAAZ0b,QACd,EAAyCvZ,cAAjCD,EAAR,EAAQA,eAAgBmO,EAAxB,EAAwBA,aACxB,EAA2CjO,cAAnCC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,cACnBuF,EAAWC,cACjB,EAOIxK,aAAY,SAACC,GACf,IAAIyK,OAAgBhG,EAChBzE,EAAMiF,SAASuC,SACjBiD,EAAgBzK,EAAMmF,SAASnF,EAAMiF,SAASuC,OAAOnH,aAEvD,IAAMmK,EACJxK,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,YAC1C,MAAO,CACL2E,UAAWhF,EAAMiF,SAASD,UAC1BwF,mBACAhD,OAAQxH,EAAMiF,SAASuC,OACvBiD,gBACAmF,YAAa5P,EAAMmF,SAASqF,EAAiB/K,KAAKY,YAClD8E,SAAUnF,EAAMmF,aAnBlBH,EADF,EACEA,UACAwF,EAFF,EAEEA,iBACAhD,EAHF,EAGEA,OACAiD,EAJF,EAIEA,cACAmF,EALF,EAKEA,YACAzK,EANF,EAMEA,SAiBF,OACE,cAAC+kB,GAAD,CACEzd,MAAO,WACP0d,YAAa,gCACb9mB,KAAMA,EACN8a,QAASA,EACTiM,WAAU,uCAAE,WACVvmB,EACAwmB,EACA1f,GAHU,iBAAApF,EAAA,6DAKJlE,EAASsI,YAAY0gB,EAAeza,EAAYlQ,UACtDoF,EAAgB,eAAD,OACEulB,EADF,YACmBzgB,YAC9BY,EAAiB/K,MAFN,eAGLoE,EAAKxD,YACb,CACEV,QAAS,SAXH,SAcO,sBAAC,8CAAA4F,EAAA,sEACYwF,YAC1BpG,EAAeiB,UACfZ,EACAwC,GAJc,UACVgjB,EADU,QAMZ7f,EANY,wBAOR2f,EAAY3lB,EAAeqU,MAAM0N,YAAY6D,OACjD,kBACA,CACElpB,WAGEqW,EAAUvS,EAAStB,EAAKxD,YAbhB,SAeN0K,YAAapG,EAAeiB,UAAWZ,EAAWwC,GAf5C,cAcRgjB,EAdQ,OAgBZvpB,UAhBY,UAkBNqhB,GAAcxP,EAAalN,UAAW/B,GAlBhC,eAiBR4mB,EAjBQ,OAmBZxpB,UAnBY,UAuBI0D,EAAe3E,MAAMwJ,UAvBzB,iCAuBV1I,OAvBU,KAwBV4pB,YAAY,EACZha,UAAU,GAzBA,KA2BZ,CAAE5P,OAAQkE,EAAW0lB,YAAY,EAAOha,UAAU,GA3BtC,KA4BZ,CAAE5P,OAAQ0G,EAASkjB,YAAY,EAAOha,UAAU,GA5BpC,KA6BZ,CACE5P,OAAQ6D,EAAeoC,SAASC,OAAO/F,UACvCypB,YAAY,EACZha,UAAU,GAZRia,EApBQ,2BAmCG7X,EAAahN,IAnChB,KAmCqCwkB,EAnCrC,UAuCMxX,EAAa9S,MAAMwJ,UAvCzB,gCAwCK7E,EAAeoC,SAASC,OAAO/F,UAxCpC,KAyCY0D,EAAeiB,UAzC3B,MA0CC/B,EA1CD,MA2CD6T,EAAQ1R,MA3CP,MA4COykB,EA5CP,MA6CMtkB,qBAAkBC,iBA7CxB,MA8CiBqE,EAAc5C,eAAe7B,MA9C9C,MA+C0BwkB,EA/C1B,OAuCRzU,OAvCQ,KAwCR9K,YAxCQ,KAyCR2f,mBAzCQ,KA0CRlT,QA1CQ,MA2CR1R,MA3CQ,MA4CRsc,cA5CQ,MA6CRpc,aA7CQ,MA8CR2kB,wBA9CQ,MA+CRC,iCA/CQ,cAqCVC,SArCU,aAkDOJ,EAlDP,OAoCZxlB,SApCY,MAkDZshB,kBAlDY,sBAmCoB0E,iBAnCpB,qCAmCR5kB,EAnCQ,iBAsDsBuM,EAAa1S,QAAQsX,QACvD7T,GAvDY,eAsDRonB,EAtDQ,OAyDd3gB,EAAS,CACPuB,KAAMtJ,IAAWkV,oBACjBnO,KAAM,CACJoO,QAAS,CACPzW,UAAW4C,EACXzD,QAAS6qB,MA9DD,kBAmEP1kB,GAnEO,yBAqEG5B,EAAemB,IAAIslB,SAAS/pB,EAAQ,CACnD8D,SAAU,CACRH,YACAwC,SACAyD,YAAatG,EAAeoC,SAASC,OAAO/F,UAC5C+E,MAAOyE,EAAc/C,SAAS1B,MAC9B+E,aAAcyf,EAAcvpB,UAC5B4iB,UAAWhgB,EACXqC,aAAcC,qBAAkBC,oBA7EtB,eAqERG,EArEQ,iBAiFa2kB,0BACzBvmB,EAAeoC,SACflD,GAnFY,eAiFRqX,EAjFQ,OAqFd5Q,EAAS,CACPuB,KAAMtJ,IAAW8U,+BACjB/N,KAAM,CACJlJ,QAAS,CACPa,UAAW4C,EACXzD,QAAS8a,MA1FD,kBA+FP3U,GA/FO,2CAAD,GAdP,OAcJA,EAdI,OAiHVxB,IACAD,EAAgB,oBAAqB,CACnCnF,QAAS,UACT6G,OAAQ,cAAC,KAAD,CAAiCC,UAAWF,MAEtD4X,IAtHU,2CAAF,4DAyIhB,SAAS+L,GAAeznB,GACtB,MAA8B1C,aAAY,SAACC,GACzC,IAAMgF,EAAYhF,EAAMmF,SAASnF,EAAMiF,SAASD,UAAU3E,YAE1D,MAAO,CACLZ,KAFWuF,EAAYA,EAAUvF,UAAOgF,EAGxCmL,YAAa5P,EAAMmF,SAASH,EAAUvF,KAAKY,gBALvCZ,EAAR,EAAQA,KAAMmQ,EAAd,EAAcA,YAQN9K,EAAoBD,cAApBC,gBACAzB,EAA2DZ,EAA3DY,KAAM8a,EAAqD1b,EAArD0b,QAASiM,EAA4C3nB,EAA5C2nB,WAAY3d,EAAgChK,EAAhCgK,MAAO0d,EAAyB1nB,EAAzB0nB,YAAavC,EAAYnlB,EAAZmlB,QACvD,EAA0CtnB,mBAAwB,MAAlE,mBAAO+pB,EAAP,KAAsBgB,EAAtB,KACA,EAAwB/qB,mBAA2B,MAAnD,mBAAOuD,EAAP,KAAaynB,EAAb,KACA,EAA8BhrB,mBAA2B,MAAzD,mBAAOoX,EAAP,KAAgB6T,EAAhB,KACA,EAAgDjrB,mBAAwB,MAAxE,mBAAOkrB,EAAP,KAAyBC,EAAzB,KACA,EAAgCnrB,oBAAS,GAAzC,mBAAOqK,EAAP,KAAiBqC,EAAjB,KACM0e,GACH/gB,GAAY+M,GAAW7T,KACvBwmB,IACAmB,GACDnB,EAAgBmB,EAElB,OACE,8BACE,eAACxI,GAAA,EAAD,CACE3f,KAAMA,EACNsoB,oBAAqBC,GACrBC,aAAW,EACX1N,QAASA,EACT1d,WAAS,EALX,UAOE,sBAAKZ,MAAO,CAAE6B,QAAS,OAAQC,eAAgB,iBAA/C,UACE,cAACshB,GAAA,EAAD,UAAcxW,IACd,sBAAK5M,MAAO,CAAE6B,QAAS,OAAQ6L,aAAc,QAA7C,UACE,qBACE1N,MAAO,CACL6B,QAAS,OACTC,eAAgB,SAChBsF,cAAe,UAJnB,SAOE,cAAC,KAAD,MAEF,cAAC6kB,GAAA,EAAD,CACEjsB,MAAO,CAAEiD,WAAY,MAAOC,YAAa,OACzC8K,QACE,cAACke,GAAA,EAAD,CACEje,QAASnD,EACT/K,SAAU,kBAAMoN,GAAarC,MAGjCR,MAAM,WAIZ,eAAC+Y,GAAA,EAAD,WACE,qBAAKrjB,MAAO,CAAE6B,QAAS,QAAvB,SACE,sBAAK7B,MAAO,CAAEqH,KAAM,GAApB,UACE,cAACoe,GAAA,EAAD,CACEzlB,MAAO,CAAE4B,MAAO,QAChB8jB,GAAG,kBACHpb,MAAM,SACN0B,KAAK,SACL2Z,gBAAiB,CACfC,QAAQ,GAEV9lB,QAAQ,WACRC,SAAU,SAAAe,GAAC,OACT0qB,EAAiB3F,WAAW/kB,EAAEE,OAAOH,SAEvCilB,WAAY,CACVC,WAAY,CAAEC,IAAK,EAAGmG,IAAG,OAAER,QAAF,IAAEA,IAAoB,MAGnD,cAACrG,GAAA,EAAD,UAAiBgF,SAGrB,cAAC/E,GAAA,EAAD,CAAa3kB,WAAS,EAAtB,SACIkK,EAsBA,qCACE,cAACgd,GAAD,CACEhoB,QAAQ,WACRF,KAAMA,EACNC,SAAUkQ,EAAYlQ,SACtBkoB,QAASA,EACThoB,SAAU,SAACqa,EAAcuR,GACvBD,EAAWtR,GACXwR,EAAoBD,EAAiB9nB,eAGzC,eAACyhB,GAAA,EAAD,uDAC2C,uCAAc,IADzD,iBAhCF,qCACE,cAAC5lB,GAAA,EAAD,CACEI,QAAQ,WACRD,SAAUkQ,EAAYlQ,SACtBD,KAAMA,EACNG,SAAU,SAACuH,EAAc8kB,GACvBX,EAAQnkB,GAORskB,EAAoB,KAAD,IAAC,EAAK,QAG7B,cAACtG,GAAA,EAAD,wDAwBR,eAACc,GAAA,EAAD,WACE,cAAC3I,EAAA,EAAD,CAAQvZ,QAASoa,EAASrc,MAAM,UAAhC,oBAGA,cAACwb,EAAA,EAAD,CAEEvZ,QAAS,WACPqmB,EACEzf,EAAW+M,EAAW7T,EACtBwmB,EACA1f,GACAsB,OAAM,SAAAC,GACNC,QAAQC,MAAMF,GACdpH,EAAgB,6BAAD,OAA8BoH,EAAI7L,YAAc,CAC7DV,QAAS,cAIfmC,MAAM,UACN8L,SAAU8d,EAfZ,SAiBGjf,a,SD/vBR8V,O,uBAAAA,I,oBAAAA,Q,cCLAC,O,WAAAA,I,iBAAAA,I,qBAAAA,I,oBAAAA,Q,KA4wBL,IAAMoJ,GAAavjB,IAAM6jB,YAAW,SAClCzpB,EACA0pB,GAEA,OAAO,cAACC,GAAA,EAAD,aAAOC,UAAU,KAAKF,IAAKA,GAAS1pB,OI3zB9B,SAAS6pB,KACtB,OAAO,cAACrE,GAAD,ICsDMsE,OA1Cf,WACE,IAAM3M,EAAQ4M,YAAe,CAC3BC,QAAS,CACP/P,WAAY,CACVgQ,QAAS,qBAGbC,WAAY,CACVC,WAAY,CAAC,kBAAmB,cAAcC,KAAK,MAErDC,UAAW,KAEb,OACE,cAAC,IAAD,CAAU3W,MAAOA,EAAjB,SACE,eAAC,IAAD,CAAkByJ,MAAOA,EAAzB,UACE,cAACmN,EAAA,EAAD,IACA,cAAC,IAAD,CAAkBC,SAAU,EAAG5U,iBAAkB,IAAjD,SACH,cAAC,IAAD,UACC,cAACzG,EAAA,EAAD,UACC,cAACsG,EAAD,UACC,cAAC,IAAD,CAAYgV,SAAU,IAAtB,SACC,eAAC,GAAD,WACC,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAI/K,UAAWkK,KACjC,cAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,SAAS/K,UAAWkK,wBCzBjCc,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBtkB,MAAK,YAAkD,IAA/CukB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,M,8JCNO,SAAea,EAAtB,wC,4CAAO,WACLxK,EACAyK,EACAC,EACAC,GAJK,eAAA7oB,EAAA,6DAMLke,EAAM3e,gBAAgBopB,EAAa,CACjCvuB,QAAS,SAPN,kBAUYyuB,IAVZ,OAUC7nB,EAVD,OAWHkd,EAAM1e,gBACN0e,EAAM3e,gBAAgBqpB,EAAY,CAChCxuB,QAAS,UACT6G,OAAQ,cAAC6nB,EAAD,CAAiC5nB,UAAWF,MAdnD,gDAiBHkd,EAAM3e,gBAAN,iBAAgC,KAAIzE,YAAc,CAChDV,QAAS,UAlBR,0D,sBAuBA,SAAS0uB,EAAgC5rB,GAC9C,IAAQgE,EAAchE,EAAdgE,UACA6nB,EAA0BvuB,aAAY,SAACC,GAC7C,MAAO,CACLsuB,sBAAuBtuB,EAAMC,OAAOoS,QAAQic,0BAFxCA,sBAKFC,EAAS,mBAAeD,GAC9B,OACE,cAAC,IAAD,CACExsB,MAAM,UACNsgB,UAAU,IACVvhB,OAAO,SACP2tB,IAAI,WACJ/Q,KAAM,yCAAkChX,GAAc8nB,EALxD,uC,gCC1CJ,6CA0BavkB,EAAqB,CAChCC,QAAS,CAEPE,MAAO,eACPwI,IAAK,sCAEL2b,sBAAuB,GAEvBG,UAAW,KACXC,WAAY,KAEZvb,kBAAmB,IAAIpS,YACrB,gDAEFkS,gBAAiB,IAAIlS,YACnB,gDAEFuS,kBAAmB,IAAIvS,YACrB,gDAEFkV,WAAY,CACVC,IAAK,IAAInV,YAAU,gDACnB4tB,KAAM,IAAI5tB,YAAU,gDACpB6tB,KAAM,IAAI7tB,YAAU,gDACpB8tB,IAAK,IAAI9tB,YAAU,iDAGrBmJ,MAAO,CACLgM,IAAK,IAAInV,YAAU,+CACnB4tB,KAAM,IAAI5tB,YAAU,+CACpB6tB,KAAM,IAAI7tB,YAAU,gDACpB8tB,IAAK,IAAI9tB,YAAU,kDAMvB+tB,OAAQ,CAEN3kB,MAAO,SACPwI,IAAK,gCACL2b,sBAAuB,SAEvBG,UAAW,KACXC,WAAY,KACZpb,kBAAmB,IAAIvS,YACrB,gDAGFoS,kBAAmB,IAAIpS,YACrB,gDAEFkS,gBAAiB,IAAIlS,YACnB,+CAEFkV,WAAY,CACV8Y,OAAQ,IAAIhuB,YAAU,gDACtBiuB,OAAQ,IAAIjuB,YAAU,iDAExBmJ,MAAO,CACL6kB,OAAQ,IAAIhuB,YAAU,gDACtBiuB,OAAQ,IAAIjuB,YAAU,kDAK1BkuB,UAAW,CAET9kB,MAAO,YACPwI,IAAK,wBACL2b,sBAAuB,YAEvBG,UAAW,KACXC,WAAY,KAEZpb,kBAAmB,IAAIvS,YACrB,gDAEFoS,kBAAmB,IAAIpS,YACrB,gDAEFkS,gBAAiB,IAAIlS,YACnB,gDAEFkV,WAAY,CACV8Y,OAAQ,IAAIhuB,YAAU,gDACtBiuB,OAAQ,IAAIjuB,YAAU,iDAExBmJ,MAAO,CACL6kB,OAAQ,IAAIhuB,YAAU,gDACtBiuB,OAAQ,IAAIjuB,YAAU,qD","file":"static/js/main.adbd355c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport BN from \"bn.js\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { State as StoreState } from \"../../store/reducer\";\nimport { toDisplay } from \"../../utils/tokens\";\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals?: number;\n  variant?: \"outlined\" | \"standard\";\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n};\n\nexport default function OwnedTokenAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style } = p;\n  const ownedTokenAccounts = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n    return state.common.ownedTokenAccounts.filter(\n      (ota) => ota.account.mint.toString() === mint.toString()\n    );\n  });\n\n  const [fromAccount, setFromAccount] = useState(\"\");\n\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={(e) => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const token = ownedTokenAccounts\n          .filter((ota) => ota.publicKey.equals(pubkey))\n          .pop();\n        onChange(pubkey, new BN(token!.account.amount));\n      }}\n    >\n      {ownedTokenAccounts.length === 0 ? (\n        <MenuItem value={\"\"}>No token accounts found</MenuItem>\n      ) : (\n        ownedTokenAccounts.map((ownedTokenAccount) => {\n          return (\n            <MenuItem value={ownedTokenAccount.publicKey.toString()}>\n              <div\n                style={{\n                  width: \"100%\",\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  overflow: \"hidden\",\n                }}\n              >\n                <div>{`${ownedTokenAccount.publicKey}`}</div>\n                {decimals && (\n                  <div style={{ float: \"right\", color: \"#ccc\" }}>{`${toDisplay(\n                    ownedTokenAccount.account.amount,\n                    decimals ?? 0\n                  )}`}</div>\n                )}\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n","type Skin = {\n  active: string;\n  ready: string;\n  inactive: string;\n  notReady: string;\n  deactivating: string;\n};\n\nconst _skin: Skin = {\n  active: '#43a047',\n  ready: '#3f51b5',\n  notReady: '#ccc',\n  inactive: 'red',\n  deactivating: 'rgb(255, 121, 42)',\n};\n\nexport function instance(): Skin {\n  return _skin;\n}\n","export type Action = {\n  type: ActionType;\n  item: any;\n};\n\nexport enum ActionType {\n  // Common.\n  CommonTriggerBootstrap,\n  CommonAppWillBootstrap,\n  CommonAppDidBootstrap,\n  CommonTriggerShutdown,\n  CommonDidShutdown,\n  CommonWalletDidConnect,\n  CommonWalletDidDisconnect,\n  CommonWalletSetProvider,\n  CommonSetNetwork,\n  CommonOwnedTokenAccountsSet,\n  CommonOwnedTokenAccountsUpdate,\n  CommonWalletReset,\n\n  // Lockup.\n  LockupSetVestings,\n  LockupUpdateVesting,\n  LockupCreateVesting,\n\n  // Registry.\n  RegistrySetMember,\n  RegistrySetRegistrar,\n  RegistrySetPendingWithdrawals,\n  RegistryCreatePendingWithdrawal,\n  RegistryUpdatePendingWithdrawal,\n\n  // Accounts.\n  AccountAdd,\n  AccountUpdate,\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { toDisplay } from '../../utils/tokens';\nimport { ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport { State as StoreState } from '../../store/reducer';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\n\ntype RewardsListProps = {\n  rewards: (RewardListItemViewModel | null)[];\n};\n\nexport default function RewardsList(props: RewardsListProps) {\n  const { rewards } = props;\n  let loading = false;\n  rewards.forEach(r => {\n    if (r === null) {\n      loading = true;\n    }\n  });\n  return (\n    <List>\n      {loading ? (\n        <CircularProgress\n          style={{\n            display: 'block',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n          }}\n        />\n      ) : rewards.length > 0 ? (\n        rewards\n          .filter(r => r!.vendor.account.expired === false)\n          .map(r => {\n            return <RewardListItem rli={r as RewardListItemViewModel} />;\n          })\n      ) : (\n        <ListItem>\n          <ListItemText primary={'No rewards found'} />\n        </ListItem>\n      )}\n    </List>\n  );\n}\n\ntype RewardListItemProps = {\n  rli: RewardListItemViewModel;\n};\n\nfunction RewardListItem(props: RewardListItemProps) {\n  const { rli } = props;\n\n  const [open, setOpen] = useState(false);\n\n  const dateLabel = new Date(\n    rli.vendor!.account.startTs.toNumber() * 1000,\n  ).toLocaleString();\n  let fromLabel = `Dropped by ${rli.vendor.account.from.toString()} | ${dateLabel}`;\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(open => !open)}>\n        <LockIcon\n          style={{\n            visibility: rli.reward.locked ? 'visible' : 'hidden',\n            marginRight: '16px',\n          }}\n        />\n        <ListItemText\n          primary={\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n                color: rli.needsClaim ? '#54a15e' : '',\n              }}\n            >\n              <div>{`${toDisplay(\n                rli.vendor.account.total,\n                rli.mint!.account.decimals,\n              )} ${rli.mint!.publicKey}`}</div>\n            </div>\n          }\n          secondary={fromLabel}\n        />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        {rli.vendor === undefined ? (\n          <CircularProgress />\n        ) : (\n          <RewardListItemDetails vendor={rli.vendor!} />\n        )}\n      </Collapse>\n    </>\n  );\n}\n\ntype RewardListItemDetailsProps = {\n  vendor: ProgramAccount;\n};\n\nfunction RewardListItemDetails(props: RewardListItemDetailsProps) {\n  let { vendor } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { vendorMint, registrar } = useSelector((state: StoreState) => {\n    return {\n      registrar: state.registry.registrar,\n      vendorMint: state.accounts[vendor.account.mint.toString()],\n    };\n  });\n  const [\n    expiryReceiverToken,\n    setExpiryReceiverToken,\n  ] = useState<null | PublicKey>(null);\n  const expire = async () => {\n    enqueueSnackbar('Expiring reward', {\n      variant: 'info',\n    });\n    const vendorSigner = await PublicKey.createProgramAddress(\n      [\n        registrar.toBuffer(),\n        vendor.publicKey.toBuffer(),\n        Buffer.from([vendor.account.nonce]),\n      ],\n      registryClient.programId,\n    );\n\n    const tx = await registryClient.rpc.expireReward({\n      accounts: {\n        registrar,\n        vendor: vendor.publicKey,\n        vault: vendor.account.vault,\n        vendorSigner,\n        expiryReceiver: vendor.account.expiryReceiver,\n        expiryReceiverToken,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        clock: SYSVAR_CLOCK_PUBKEY,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Reward expired`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n    });\n  };\n  return (\n    <div\n      style={{\n        marginLeft: '56px',\n      }}\n    >\n      <div>Vendor</div>\n      <ul>\n        <li>Address {vendor.publicKey.toString()}</li>\n        <li>Vault: {vendor.account.vault.toString()}</li>\n        <li>Mint: {vendor.account.mint.toString()}</li>\n        <li>\n          Pool token supply snapshot:{' '}\n          {vendor.account.poolTokenSupply.toString()}\n        </li>\n        <li>\n          Expiry:{' '}\n          {new Date(\n            vendor.account.expiryTs.toNumber() * 1000,\n          ).toLocaleDateString()}\n          {` (${vendor.account.expiryTs.toNumber()})`}\n        </li>\n        <li>Expiry receiver: {vendor.account.expiryReceiver.toString()}</li>\n        <li>Expired: {vendor.account.expired.toString()}</li>\n        <li>\n          Reward queue cursor: {vendor.account.rewardEventQCursor.toString()}\n        </li>\n      </ul>\n      {(vendor.account.expiryTs.toNumber() <= Date.now()/1000) && registryClient.provider.wallet.publicKey.equals(vendor.account.expiryReceiver) && (\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\n          <Button\n            color=\"primary\"\n            variant=\"outlined\"\n            onClick={expire}\n            style={{ marginRight: '24px' }}\n          >\n            Expire\n          </Button>\n          <div style={{ flex: 1, marginRight: '24px' }}>\n            <OwnedTokenAccountsSelect\n              variant=\"outlined\"\n              decimals={vendorMint.decimals}\n              mint={vendor.account.mint}\n              onChange={(f: PublicKey) => {\n                setExpiryReceiverToken(f);\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport class RewardListItemViewModel {\n  constructor(\n    readonly reward: any,\n    readonly cursor: number,\n    readonly needsClaim: boolean,\n    readonly mint: ProgramAccount,\n    readonly vendor: ProgramAccount,\n  ) {}\n\n  static fromMessage(ctx: Context, event: any): RewardListItemViewModel | null {\n    let needsClaim = false;\n\n    const vendor = ctx.accounts[event.vendor.toString()];\n\n    if (vendor === undefined) {\n      return null;\n    }\n\n    const mint = {\n      publicKey: vendor.mint,\n      account: ctx.accounts[vendor.mint.toString()],\n    };\n\n    if (ctx.member !== undefined) {\n      // Must own shares of the reward's target pool.\n      const sptAccount =\n        ctx.accounts[ctx.member.account.balances.spt.toString()];\n      const lockedSptAccount =\n        ctx.accounts[ctx.member.account.balancesLocked.spt.toString()];\n\n      const ownsPoolShares = sptAccount.amount + lockedSptAccount.amount > 0;\n\n      // Must not have claimed the reward yet.\n      const notYetClaimed =\n        vendor.rewardEventQCursor >= ctx.member.account.rewardsCursor;\n\n      // Must have staked before the reward was dropped.\n      const isEligible = ctx.member.account.lastStakeTs < vendor.startTs;\n\n      // Must not have let the reward expire.\n      const expired = vendor.expired;\n\n      needsClaim = ownsPoolShares && notYetClaimed && isEligible && !expired;\n    }\n\n    const vendorProgramAccount = {\n      publicKey: event.vendor,\n      account: vendor,\n    };\n\n    return new RewardListItemViewModel(\n      event,\n      vendor.rewardEventQCursor,\n      needsClaim,\n      mint,\n      vendorProgramAccount,\n    );\n  }\n}\n\ntype Context = {\n  accounts: any;\n  rewardEventQueue: ProgramAccount;\n  member?: ProgramAccount;\n  network: Network;\n};\n","import React, {\n  ReactNode,\n  PropsWithChildren,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport BN from 'bn.js';\nimport { PublicKey } from '@solana/web3.js';\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\nimport { networks } from '../store/config';\n\nconst TokenListContext = React.createContext<TokenListContextValues>({\n  tokenMap: new Map(),\n});\n\ntype TokenListContextValues = {\n  tokenMap: Map<string, TokenInfo>;\n};\n\nexport function useTokenInfos(): Map<string, TokenInfo> {\n  const { tokenMap } = useContext<TokenListContextValues>(TokenListContext);\n  return tokenMap;\n}\n\nexport function TokenRegistryProvider(props: PropsWithChildren<ReactNode>) {\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\n  useEffect(() => {\n    new TokenListProvider().resolve().then(tokens => {\n      const tokenList = tokens.filterByClusterSlug('mainnet-beta').getList();\n      setTokenMap(\n        tokenList.reduce((map, item) => {\n          map.set(item.address, item);\n          return map;\n        }, new Map()),\n      );\n    });\n  }, [setTokenMap]);\n\n  return (\n    <TokenListContext.Provider value={{ tokenMap }}>\n      {props.children}\n    </TokenListContext.Provider>\n  );\n}\n\nexport function fromDisplay(amount: number, decimals: number): BN {\n  return new BN(amount * 10 ** decimals);\n}\n\nexport function toDisplay(amount: BN | number, decimals: number): string {\n  if (amount instanceof BN) {\n    amount = amount.toNumber();\n  }\n  return (amount / 10 ** decimals).toString();\n}\n\nexport function toDisplayLabel(mint: PublicKey): string {\n  let whitelistedMint = Object.keys(networks.mainnet.mints)\n    .filter(label => networks.mainnet.mints[label].equals(mint))\n    .pop();\n  if (whitelistedMint) {\n    return whitelistedMint.toUpperCase();\n  }\n  return mint.toString();\n}\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport {\n  Account,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport { u64 } from '@solana/spl-token';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { useWallet } from '../components/common/WalletProvider';\nimport { ViewTransactionOnExplorerButton } from '../components/common/Notification';\nimport { State as StoreState, ProgramAccount } from '../store/reducer';\nimport { ActionType } from '../store/actions';\nimport * as skin from '../skin';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\nimport { memberSigner, registrarSigner } from '../utils/registry';\n\nexport default function Stake() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, memberAccount, registrarAccount, registrar } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        member: state.registry.member,\n        memberAccount: state.registry.member\n          ? state.accounts[state.registry.member.toString()]\n          : undefined,\n        registrarAccount: registrarAccount,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n\n  const createPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Staking ${toDisplayLabel(registrarAccount.poolMint)} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const tx = await registryClient.rpc.stake(new u64(amount), isLocked, {\n      accounts: {\n        registrar,\n        rewardEventQ: registrarAccount.rewardEventQ,\n        poolMint: registrarAccount.poolMint,\n        member,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        balances: memberAccount.balances,\n        balancesLocked: memberAccount.balancesLocked,\n        memberSigner: (\n          await memberSigner(registryClient.programId, registrar, member!)\n        ).publicKey,\n        registrarSigner: (\n          await registrarSigner(registryClient.programId, registrar)\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Staking complete`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const redeemPoolTokens = async (amount: number, isLocked: boolean) => {\n    enqueueSnackbar(\n      `Unstaking ${amount} ${toDisplayLabel(\n        registrarAccount.poolMint,\n      )} Pool tokens`,\n      {\n        variant: 'info',\n      },\n    );\n\n    const pendingWithdrawal = new Account();\n    const tx = await registryClient.rpc.startUnstake(\n      new u64(amount),\n      isLocked,\n      {\n        accounts: {\n          registrar,\n          rewardEventQ: registrarAccount.rewardEventQ,\n          poolMint: registrarAccount.poolMint,\n\n          pendingWithdrawal: pendingWithdrawal.publicKey,\n          member,\n          beneficiary: registryClient.provider.wallet.publicKey,\n          balances: memberAccount.balances,\n          balancesLocked: memberAccount.balancesLocked,\n\n          memberSigner: (\n            await memberSigner(registryClient.programId, registrar, member!)\n          ).publicKey,\n\n          tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n          clock: SYSVAR_CLOCK_PUBKEY,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [pendingWithdrawal],\n        instructions: [\n          await registryClient.account.pendingWithdrawal.createInstruction(\n            pendingWithdrawal,\n          ),\n        ],\n      },\n    );\n    const pwAccount = await registryClient.account.pendingWithdrawal(\n      pendingWithdrawal.publicKey,\n    );\n    dispatch({\n      type: ActionType.RegistryCreatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: {\n          publicKey: pendingWithdrawal.publicKey,\n          account: pwAccount,\n        },\n      },\n    });\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer initiated`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  const createPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      createPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error staking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n  const redeemPool = async (shares: number, isLocked: boolean) => {\n    if (shares > 0) {\n      redeemPoolTokens(shares, isLocked).catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error unstaking: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      <div style={{ display: 'flex', width: '100%' }}>\n        <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n          <PoolCard\n            title={'Stake Pool'}\n            create={createPool}\n            redeem={redeemPool}\n          />\n        </div>\n        <RedemptionList\n          style={{\n            marginBottom: '24px',\n          }}\n        />\n      </div>\n      <AllPendingTransfers />\n    </div>\n  );\n}\n\ntype PoolCardProps = {\n  title: string;\n  create: (shares: number, isLocked: boolean) => void;\n  redeem: (shares: number, isLocked: boolean) => void;\n};\n\nfunction PoolCard(props: PoolCardProps) {\n  const { title, create, redeem } = props;\n  const [poolAmount, setPoolAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const { poolTokenMint, member, registrarAccount, mint } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      const poolTokenMint = {\n        publicKey: registrarAccount.poolMint,\n        account: state.accounts[registrarAccount.poolMint.toString()],\n      };\n      return {\n        poolTokenMint,\n        member: state.registry.member,\n        registrarAccount,\n        mint: {\n          publicKey: registrarAccount.mint,\n          account: state.accounts[registrarAccount.mint.toString()],\n        },\n      };\n    },\n  );\n\n  const pricePerShare = toDisplay(\n    registrarAccount.stakeRate,\n    mint.account.decimals,\n  );\n\n  const cost = poolAmount\n    ? toDisplay(\n        registrarAccount.stakeRate.mul(new BN(poolAmount)),\n        mint.account.decimals,\n      )\n    : 0;\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <CardHeader\n          title={title}\n          subheader={poolTokenMint.publicKey.toString()}\n        />\n        <div\n          style={{\n            paddingRight: '16px',\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          <Typography color=\"textSecondary\"></Typography>\n        </div>\n      </div>\n      <CardContent>\n        <div\n          style={{\n            marginBottom: '16px',\n          }}\n        >\n          <Typography>\n            Please enter the amount of pool tokens you would like to purchase in\n            the form below. Upon pressing <b>stake</b> you will create new pool\n            tokens at a fixed price, adding to the amount of pool tokens\n            outstanding.\n          </Typography>\n          <br />\n          <Typography>\n            Unstaking works similarly, except one must incur an unbonding period\n            where funds will not be able to be retrieved until the unbonding\n            period ends. At the end of the unbonding period, click the blue\n            checkbox next to your pending transfer. If the checkbox is grey,\n            your unbonding period has not yet completed.\n          </Typography>\n          <br />\n          <Typography style={{ fontWeight: 'bold' }}>\n            Total pool tokens outstanding\n          </Typography>\n          <Typography>{poolTokenMint.account.supply.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Price per pool token\n          </Typography>\n          <Typography>{pricePerShare.toString()}</Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Your total cost\n          </Typography>\n          <Typography>\n            {cost} {toDisplayLabel(mint.publicKey)}\n          </Typography>\n          <Typography style={{ fontWeight: 'bold' }}>\n            Unbonding period (days)\n          </Typography>\n          <Typography>\n            {(\n              registrarAccount.withdrawalTimelock /\n              (60 * 60 * 24.0)\n            ).toString()}\n          </Typography>\n        </div>\n        <div>\n          <div style={{ marginBottom: '10px' }}>\n            <FormControl>\n              <TextField\n                style={{ width: '100%' }}\n                label=\"Pool tokens\"\n                type=\"number\"\n                variant=\"outlined\"\n                onChange={e => setPoolAmount(parseInt(e.target.value))}\n              />\n            </FormControl>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Button\n                disabled={member === undefined}\n                color=\"primary\"\n                variant=\"contained\"\n                onClick={() => create(poolAmount as number, isLocked)}\n              >\n                Stake\n              </Button>\n              <Button\n                disabled={member === undefined}\n                color=\"secondary\"\n                variant=\"contained\"\n                style={{ marginLeft: '10px' }}\n                onClick={() => redeem(poolAmount as number, isLocked)}\n              >\n                Unstake\n              </Button>\n            </div>\n            <div>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={isLocked}\n                    onChange={() => setIsLocked(!isLocked)}\n                  />\n                }\n                labelPlacement={'start'}\n                label=\"Locked balances\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ntype RedemptionListProps = {\n  style: any;\n};\n\nfunction RedemptionList(props: RedemptionListProps) {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const { member, registrar, mint, pendingWithdrawals } = useSelector(\n    (state: StoreState) => {\n      const member = state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined;\n      const registrar = {\n        publicKey: state.registry.registrar!,\n        account: state.accounts[state.registry.registrar.toString()],\n      };\n      const mint = {\n        publicKey: registrar.account.mint,\n        account: state.accounts[registrar.account.mint.toString()],\n      };\n      const pendingWithdrawals =\n        state.registry.pendingWithdrawals === null\n          ? null\n          : state.registry.pendingWithdrawals.map(pw => {\n              return {\n                publicKey: pw,\n                account: state.accounts[pw.toString()],\n              };\n            });\n      return {\n        member,\n        registrar,\n        mint,\n        pendingWithdrawals,\n      };\n    },\n  );\n\n  useEffect(() => {\n    if (!member) {\n      return;\n    }\n    if (pendingWithdrawals !== null) {\n      return;\n    }\n\n    // Only grab pending withdrawals for the current member account.\n    const filter = Buffer.concat([\n      registrar.publicKey.toBuffer(),\n      member.publicKey.toBuffer(),\n    ]);\n    registryClient.account.pendingWithdrawal\n      .all(filter)\n      .then(pendingWithdrawals => {\n        dispatch({\n          type: ActionType.RegistrySetPendingWithdrawals,\n          item: {\n            pendingWithdrawals,\n          },\n        });\n      });\n  }, [\n    dispatch,\n    registrar,\n    member,\n    pendingWithdrawals,\n    registryClient.account.pendingWithdrawal,\n  ]);\n\n  return (\n    <div style={props.style}>\n      <Card\n        style={{\n          marginLeft: '20px',\n          marginTop: '24px',\n          width: '294px',\n        }}\n      >\n        <CardContent\n          style={{\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingBottom: 0,\n            paddingTop: 0,\n          }}\n        >\n          <div\n            style={{\n              marginLeft: '24px',\n              marginTop: '24px',\n              marginRight: '24px',\n              borderBottom: 'solid 1pt #ccc',\n              paddingBottom: '12px',\n            }}\n          >\n            <Typography style={{}}>Your Pending Transfers</Typography>\n            <Typography style={{ fontSize: '12px' }} color=\"textSecondary\">\n              Click the checkmark to complete a transfer on or after the \"end\"\n              date.\n            </Typography>\n          </div>\n          <div style={{ paddingLeft: '24px', paddingRight: '24px' }}>\n            {member && pendingWithdrawals === null ? (\n              <div style={{ paddingTop: '24px', marginBottom: '24px' }}>\n                <CircularProgress\n                  style={{\n                    display: 'block',\n                    marginLeft: 'auto',\n                    marginRight: 'auto',\n                  }}\n                />\n              </div>\n            ) : pendingWithdrawals !== null && pendingWithdrawals.length > 0 ? (\n              pendingWithdrawals.map((pw, idx) => {\n                return (\n                  <PendingStakeListItem\n                    key={pw.publicKey.toString()}\n                    isLast={idx === pendingWithdrawals.length - 1}\n                    registrar={registrar}\n                    pw={pw}\n                    member={member!}\n                    mint={mint}\n                  />\n                );\n              })\n            ) : (\n              <div\n                style={{\n                  paddingBottom: '24px',\n                  paddingTop: '12px',\n                }}\n              >\n                <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                  None found\n                </Typography>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\ntype PendingStakeListItemProps = {\n  isLast?: boolean;\n  registrar: ProgramAccount;\n  pw: ProgramAccount;\n  member: ProgramAccount;\n  mint: ProgramAccount;\n};\n\nfunction PendingStakeListItem(props: PendingStakeListItemProps) {\n  const { isLast, pw, member, registrar, mint } = props;\n  const sptLabel = (() => {\n    const isLocked = pw.account.locked;\n    const l = isLocked ? '(locked)' : '';\n    return `${toDisplay(\n      pw.account.amount,\n      mint.account.decimals,\n    )} ${toDisplayLabel(mint.publicKey)} ${l}`;\n  })();\n  return (\n    <div\n      style={{\n        paddingBottom: !isLast ? '12px' : '24px',\n        paddingTop: '12px',\n        borderBottom: 'solid 1pt #ccc',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          overflow: 'hidden',\n        }}\n      >\n        <div>\n          <Typography\n            style={{\n              whiteSpace: 'pre',\n              maxWidth: '195px',\n              overflow: 'hidden',\n              fontWeight: 'bold',\n              fontSize: '14px',\n            }}\n          >\n            {`${sptLabel}`}\n          </Typography>\n        </div>\n        <div>\n          <PendingWithdrawalButton\n            registrar={registrar}\n            member={member}\n            pendingWithdrawal={pw}\n          />\n        </div>\n      </div>\n      <Typography style={{ fontSize: '14px' }}>\n        {`Start: ${new Date(\n          pw.account.startTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography style={{ fontSize: '14px' }}>\n        {`End:   ${new Date(\n          pw.account.endTs.toNumber() * 1000,\n        ).toLocaleString()}`}\n      </Typography>\n      <Typography\n        color=\"textSecondary\"\n        style={{\n          fontSize: '14px',\n          overflow: 'hidden',\n        }}\n      >\n        {pw.account.pool.toString()}\n      </Typography>\n    </div>\n  );\n}\n\ntype PendingWithdrawalButtonProps = {\n  registrar: ProgramAccount;\n  pendingWithdrawal: ProgramAccount;\n  member: ProgramAccount;\n};\n\nfunction PendingWithdrawalButton(props: PendingWithdrawalButtonProps) {\n  const { pendingWithdrawal, member, registrar } = props;\n  const { registryClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n\n  const endPendingWithdrawal = async () => {\n    enqueueSnackbar(`Completing redemption`, {\n      variant: 'info',\n    });\n    const balances = pendingWithdrawal.account.locked\n      ? member.account.balancesLocked\n      : member.account.balances;\n    const tx = await registryClient.rpc.endUnstake({\n      accounts: {\n        registrar: registrar.publicKey,\n        member: member.publicKey,\n        beneficiary: registryClient.provider.wallet.publicKey,\n        pendingWithdrawal: pendingWithdrawal.publicKey,\n        vault: balances.vault,\n        vaultPw: balances.vaultPw,\n        memberSigner: (\n          await memberSigner(\n            registryClient.programId,\n            registrar.publicKey,\n            member.publicKey,\n          )\n        ).publicKey,\n        clock: SYSVAR_CLOCK_PUBKEY,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n      },\n    });\n\n    const updatedPendingWithdrawal = {\n      publicKey: pendingWithdrawal.publicKey,\n      account: {\n        ...pendingWithdrawal.account,\n        burned: true,\n      },\n    };\n\n    dispatch({\n      type: ActionType.RegistryUpdatePendingWithdrawal,\n      item: {\n        pendingWithdrawal: updatedPendingWithdrawal,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake transfer completed`, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  };\n\n  let disabled = false;\n  let color = skin.instance().ready;\n  let onClick = async () =>\n    endPendingWithdrawal().catch(err => {\n      console.error(`Error completing transfer: ${err.toString()}`);\n      enqueueSnackbar(\n        `Error completing transfer. Wait for the transfer's timelock to end and try again.`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  if (pendingWithdrawal.account.burned) {\n    disabled = true;\n    color = skin.instance().active;\n    onClick = async () => {};\n  }\n\n  if (pendingWithdrawal.account.endTs.toNumber() > Date.now() / 1000) {\n    disabled = true;\n    color = skin.instance().notReady;\n    onClick = async () => {};\n  }\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <IconButton disabled={disabled} style={{ width: '25px', height: '25px' }}>\n        <CheckCircleIcon style={{ color, fontSize: '20px' }} />\n      </IconButton>\n    </div>\n  );\n}\n\nfunction AllPendingTransfers() {\n  const { registryClient } = useWallet();\n  const { registrar, registrarAccount, mintAccount } = useSelector(\n    (state: StoreState) => {\n      const registrarAccount =\n        state.accounts[state.registry.registrar.toString()];\n      return {\n        registrar: state.registry.registrar,\n        registrarAccount,\n        mintAccount: state.accounts[registrarAccount.mint.toString()],\n      };\n    },\n  );\n  const [pendingTransfers, setPendingTransfers] = useState<null | any>(null);\n  useEffect(() => {\n    const fetchAll = async () => {\n      let transfers = await registryClient.account.pendingWithdrawal.all(\n        registrar.toBuffer(),\n      );\n      transfers = transfers\n        .filter((pw: any) => pw.account.burned === false)\n        .sort((a, b) => {\n          if (a.account.startTs < b.account.startTs) {\n            return 1;\n          } else if (a.account.startTs > b.account.startTs) {\n            return -1;\n          } else {\n            return 0;\n          }\n        });\n      setPendingTransfers(transfers);\n    };\n    fetchAll();\n  }, [registryClient, registrar]);\n\n  return (\n    <Card style={{ maxHeight: '900px', overflow: 'auto' }}>\n      <Typography\n        variant=\"h5\"\n        style={{ padding: '16px', borderBottom: 'solid 1pt #ccc' }}\n      >\n        All pending transfers\n      </Typography>\n      {pendingTransfers !== null ? (\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Member Account</TableCell>\n              <TableCell>Amount</TableCell>\n              <TableCell>Pool</TableCell>\n              <TableCell>Locked</TableCell>\n              <TableCell>Start</TableCell>\n              <TableCell>End</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {pendingTransfers.map((pw: any) => (\n              <TableRow>\n                <TableCell>{pw.account.member.toString()}</TableCell>\n                <TableCell>\n                  {toDisplay(\n                    pw.account.amount.toString(),\n                    mintAccount.decimals,\n                  )}\n                </TableCell>\n                <TableCell>\n                  {pw.account.amount.div(registrarAccount.stakeRate).toString()}\n                </TableCell>\n                <TableCell>{pw.account.locked.toString()}</TableCell>\n                <TableCell>\n                  {new Date(pw.account.startTs.toNumber() * 1000).toString()}\n                </TableCell>\n                <TableCell>\n                  {new Date(pw.account.endTs.toNumber() * 1000).toString()}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      ) : (\n        <div style={{ padding: '24px' }}>\n          <CircularProgress\n            style={{\n              display: 'block',\n              marginLeft: 'auto',\n              marginRight: 'auto',\n            }}\n          />\n        </div>\n      )}\n    </Card>\n  );\n}\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'lockup',\n  instructions: [\n    {\n      name: 'createVesting',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'beneficiary',\n          type: 'publicKey',\n        },\n        {\n          name: 'depositAmount',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'startTs',\n          type: 'i64',\n        },\n        {\n          name: 'endTs',\n          type: 'i64',\n        },\n        {\n          name: 'periodCount',\n          type: 'u64',\n        },\n        {\n          name: 'realizor',\n          type: {\n            option: {\n              defined: 'Realizor',\n            },\n          },\n        },\n      ],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'token',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistWithdraw',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'whitelistDeposit',\n      accounts: [\n        {\n          name: 'transfer',\n          accounts: [\n            {\n              name: 'lockup',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'whitelistedProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vesting',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vestingSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'whitelistedProgramVaultAuthority',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n      ],\n      args: [\n        {\n          name: 'instructionData',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'availableForWithdrawal',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Lockup',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'whitelist',\n            type: {\n              vec: {\n                defined: 'WhitelistEntry',\n              },\n            },\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'whitelistAdd',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'whitelistDelete',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'entry',\n            type: {\n              defined: 'WhitelistEntry',\n            },\n          },\n        ],\n      },\n      {\n        name: 'setAuthority',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'newAuthority',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Vesting',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'grantor',\n            type: 'publicKey',\n          },\n          {\n            name: 'outstanding',\n            type: 'u64',\n          },\n          {\n            name: 'startBalance',\n            type: 'u64',\n          },\n          {\n            name: 'createdTs',\n            type: 'i64',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'periodCount',\n            type: 'u64',\n          },\n          {\n            name: 'whitelistOwned',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'realizor',\n            type: {\n              option: {\n                defined: 'Realizor',\n              },\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Realizor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'program',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'WhitelistEntry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidTimestamp',\n      msg: 'Vesting end must be greater than the current unix timestamp.',\n    },\n    {\n      code: 101,\n      name: 'InvalidPeriod',\n      msg: 'The number of vesting periods must be greater than zero.',\n    },\n    {\n      code: 102,\n      name: 'InvalidDepositAmount',\n      msg: 'The vesting deposit amount must be greater than zero.',\n    },\n    {\n      code: 103,\n      name: 'InvalidWhitelistEntry',\n      msg: 'The Whitelist entry is not a valid program address.',\n    },\n    {\n      code: 104,\n      name: 'InvalidProgramAddress',\n      msg: 'Invalid program address. Did you provide the correct nonce?',\n    },\n    {\n      code: 105,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 106,\n      name: 'InvalidVaultAmount',\n      msg: 'Vault amount must be zero.',\n    },\n    {\n      code: 107,\n      name: 'InsufficientWithdrawalBalance',\n      msg: 'Insufficient withdrawal balance.',\n    },\n    {\n      code: 108,\n      name: 'WhitelistFull',\n      msg: 'Whitelist is full',\n    },\n    {\n      code: 109,\n      name: 'WhitelistEntryAlreadyExists',\n      msg: 'Whitelist entry already exists',\n    },\n    {\n      code: 110,\n      name: 'InsufficientWhitelistDepositAmount',\n      msg: 'Balance must go up when performing a whitelist deposit',\n    },\n    {\n      code: 111,\n      name: 'WhitelistDepositOverflow',\n      msg: 'Cannot deposit more than withdrawn',\n    },\n    {\n      code: 112,\n      name: 'WhitelistWithdrawLimit',\n      msg: 'Tried to withdraw over the specified limit',\n    },\n    {\n      code: 113,\n      name: 'WhitelistEntryNotFound',\n      msg: 'Whitelist entry not found.',\n    },\n    {\n      code: 114,\n      name: 'Unauthorized',\n      msg: 'You do not have sufficient permissions to perform this action.',\n    },\n    {\n      code: 115,\n      name: 'UnableToWithdrawWhileStaked',\n      msg: 'You are unable to realize projected rewards until unstaking.',\n    },\n    {\n      code: 116,\n      name: 'InvalidLockRealizor',\n      msg: \"The given lock realizor doesn't match the vesting account.\",\n    },\n    {\n      code: 117,\n      name: 'UnrealizedVesting',\n      msg: 'You have not realized this vesting account.',\n    },\n    {\n      code: 118,\n      name: 'InvalidSchedule',\n      msg: 'Invalid vesting schedule given.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'registry',\n  instructions: [\n    {\n      name: 'initialize',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'mint',\n          type: 'publicKey',\n        },\n        {\n          name: 'authority',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: 'i64',\n        },\n        {\n          name: 'stakeRate',\n          type: 'u64',\n        },\n        {\n          name: 'rewardQLen',\n          type: 'u32',\n        },\n      ],\n    },\n    {\n      name: 'updateRegistrar',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'newAuthority',\n          type: {\n            option: 'publicKey',\n          },\n        },\n        {\n          name: 'withdrawalTimelock',\n          type: {\n            option: 'i64',\n          },\n        },\n      ],\n    },\n    {\n      name: 'createMember',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'updateMember',\n      accounts: [\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'metadata',\n          type: {\n            option: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'deposit',\n      accounts: [\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'depositLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'stake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrarSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'startUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'balances',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'balancesLocked',\n          accounts: [\n            {\n              name: 'spt',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultStake',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultPw',\n              isMut: true,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'sptAmount',\n          type: 'u64',\n        },\n        {\n          name: 'locked',\n          type: 'bool',\n        },\n      ],\n    },\n    {\n      name: 'endUnstake',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'pendingWithdrawal',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vaultPw',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'withdraw',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'withdrawLocked',\n      accounts: [\n        {\n          name: 'vesting',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vestingVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vestingSigner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'memberVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'memberSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'member',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'beneficiary',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'dropReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rewardEventQ',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'depositorAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'kind',\n          type: {\n            defined: 'RewardVendorKind',\n          },\n        },\n        {\n          name: 'total',\n          type: 'u64',\n        },\n        {\n          name: 'expiryTs',\n          type: 'i64',\n        },\n        {\n          name: 'expiryReceiver',\n          type: 'publicKey',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'claimReward',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'to',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'claimRewardLocked',\n      accounts: [\n        {\n          name: 'cmn',\n          accounts: [\n            {\n              name: 'registrar',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'member',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'beneficiary',\n              isMut: false,\n              isSigner: true,\n            },\n            {\n              name: 'balances',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'balancesLocked',\n              accounts: [\n                {\n                  name: 'spt',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vault',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultStake',\n                  isMut: true,\n                  isSigner: false,\n                },\n                {\n                  name: 'vaultPw',\n                  isMut: true,\n                  isSigner: false,\n                },\n              ],\n            },\n            {\n              name: 'vendor',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'vault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vendorSigner',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'tokenProgram',\n              isMut: false,\n              isSigner: false,\n            },\n            {\n              name: 'clock',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'registry',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'lockupProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'expireReward',\n      accounts: [\n        {\n          name: 'registrar',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'vendor',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'vendorSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'expiryReceiver',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'expiryReceiverToken',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  state: {\n    struct: {\n      name: 'Registry',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    methods: [\n      {\n        name: 'new',\n        accounts: [\n          {\n            name: 'lockupProgram',\n            isMut: false,\n            isSigner: false,\n          },\n        ],\n        args: [],\n      },\n      {\n        name: 'setLockupProgram',\n        accounts: [\n          {\n            name: 'authority',\n            isMut: false,\n            isSigner: true,\n          },\n        ],\n        args: [\n          {\n            name: 'lockupProgram',\n            type: 'publicKey',\n          },\n        ],\n      },\n    ],\n  },\n  accounts: [\n    {\n      name: 'Registrar',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'authority',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'withdrawalTimelock',\n            type: 'i64',\n          },\n          {\n            name: 'rewardEventQ',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'poolMint',\n            type: 'publicKey',\n          },\n          {\n            name: 'stakeRate',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Member',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'beneficiary',\n            type: 'publicKey',\n          },\n          {\n            name: 'metadata',\n            type: 'publicKey',\n          },\n          {\n            name: 'balances',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'balancesLocked',\n            type: {\n              defined: 'BalanceSandbox',\n            },\n          },\n          {\n            name: 'rewardsCursor',\n            type: 'u32',\n          },\n          {\n            name: 'lastStakeTs',\n            type: 'i64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n        ],\n      },\n    },\n    {\n      name: 'PendingWithdrawal',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'member',\n            type: 'publicKey',\n          },\n          {\n            name: 'burned',\n            type: 'bool',\n          },\n          {\n            name: 'pool',\n            type: 'publicKey',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'endTs',\n            type: 'i64',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardQueue',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'head',\n            type: 'u32',\n          },\n          {\n            name: 'tail',\n            type: 'u32',\n          },\n          {\n            name: 'events',\n            type: {\n              vec: {\n                defined: 'RewardEvent',\n              },\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendor',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'registrar',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'poolTokenSupply',\n            type: 'u64',\n          },\n          {\n            name: 'rewardEventQCursor',\n            type: 'u32',\n          },\n          {\n            name: 'startTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryTs',\n            type: 'i64',\n          },\n          {\n            name: 'expiryReceiver',\n            type: 'publicKey',\n          },\n          {\n            name: 'from',\n            type: 'publicKey',\n          },\n          {\n            name: 'total',\n            type: 'u64',\n          },\n          {\n            name: 'expired',\n            type: 'bool',\n          },\n          {\n            name: 'kind',\n            type: {\n              defined: 'RewardVendorKind',\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'BalanceSandbox',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'spt',\n            type: 'publicKey',\n          },\n          {\n            name: 'vault',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultStake',\n            type: 'publicKey',\n          },\n          {\n            name: 'vaultPw',\n            type: 'publicKey',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardEvent',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'vendor',\n            type: 'publicKey',\n          },\n          {\n            name: 'ts',\n            type: 'i64',\n          },\n          {\n            name: 'locked',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'RewardVendorKind',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Unlocked',\n          },\n          {\n            name: 'Locked',\n            fields: [\n              {\n                name: 'start_ts',\n                type: 'i64',\n              },\n              {\n                name: 'end_ts',\n                type: 'i64',\n              },\n              {\n                name: 'period_count',\n                type: 'u64',\n              },\n            ],\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'RewardQAlreadyInitialized',\n      msg: 'The given reward queue has already been initialized.',\n    },\n    {\n      code: 101,\n      name: 'InvalidNonce',\n      msg: \"The nonce given doesn't derive a valid program address.\",\n    },\n    {\n      code: 102,\n      name: 'InvalidPoolMintAuthority',\n      msg: 'Invalid pool mint authority',\n    },\n    {\n      code: 103,\n      name: 'InvalidMemberSigner',\n      msg: \"Member signer doesn't match the derived address.\",\n    },\n    {\n      code: 104,\n      name: 'InvalidVaultDeposit',\n      msg: 'The given vault owner must match the signing depositor.',\n    },\n    {\n      code: 105,\n      name: 'InvalidDepositor',\n      msg: \"The signing depositor doesn't match either of the balance accounts\",\n    },\n    {\n      code: 106,\n      name: 'InvalidVault',\n      msg: 'The vault given does not match the vault expected.',\n    },\n    {\n      code: 107,\n      name: 'InvalidVaultOwner',\n      msg: 'Invalid vault owner.',\n    },\n    {\n      code: 108,\n      name: 'Unknown',\n      msg: 'An unknown error has occured.',\n    },\n    {\n      code: 109,\n      name: 'UnstakeTimelock',\n      msg: 'The unstake timelock has not yet expired.',\n    },\n    {\n      code: 110,\n      name: 'InsufficientReward',\n      msg: 'Reward vendors must have at least one token unit per pool token',\n    },\n    {\n      code: 111,\n      name: 'InvalidExpiry',\n      msg: 'Reward expiry must be after the current clock timestamp.',\n    },\n    {\n      code: 112,\n      name: 'VendorExpired',\n      msg: 'The reward vendor has been expired.',\n    },\n    {\n      code: 113,\n      name: 'CursorAlreadyProcessed',\n      msg: 'This reward has already been processed.',\n    },\n    {\n      code: 114,\n      name: 'NotStakedDuringDrop',\n      msg: 'The account was not staked at the time of this reward.',\n    },\n    {\n      code: 115,\n      name: 'VendorNotYetExpired',\n      msg: 'The vendor is not yet eligible for expiry.',\n    },\n    {\n      code: 116,\n      name: 'RewardsNeedsProcessing',\n      msg: 'Please collect your reward before otherwise using the program.',\n    },\n    {\n      code: 117,\n      name: 'ExpectedLockedVendor',\n      msg: 'Locked reward vendor expected but an unlocked vendor was given.',\n    },\n    {\n      code: 118,\n      name: 'ExpectedUnlockedVendor',\n      msg: 'Unlocked reward vendor expected but a locked vendor was given.',\n    },\n    {\n      code: 119,\n      name: 'InvalidVestingSigner',\n      msg: 'Locked deposit from an invalid deposit authority.',\n    },\n    {\n      code: 120,\n      name: 'UnrealizedReward',\n      msg: 'Locked rewards cannot be realized until one unstaked all tokens.',\n    },\n    {\n      code: 121,\n      name: 'InvalidBeneficiary',\n      msg: \"The beneficiary doesn't match.\",\n    },\n    {\n      code: 122,\n      name: 'InvalidRealizorMetadata',\n      msg: 'The given member account does not match the realizor metadata.',\n    },\n    {\n      code: 123,\n      name: 'InvalidVestingSchedule',\n      msg: 'Invalid vesting schedule for the locked reward.',\n    },\n    {\n      code: 124,\n      name: 'InvalidProgramAuthority',\n      msg: 'Please specify the correct authority for this program.',\n    },\n  ],\n};\n\nexport default idl;\n","import { Idl } from '@project-serum/anchor';\n\nconst idl: Idl = {\n  version: '0.0.0',\n  name: 'multisig',\n  instructions: [\n    {\n      name: 'createMultisig',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n        {\n          name: 'nonce',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'createTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'proposer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'pid',\n          type: 'publicKey',\n        },\n        {\n          name: 'accs',\n          type: {\n            vec: {\n              defined: 'TransactionAccount',\n            },\n          },\n        },\n        {\n          name: 'data',\n          type: 'bytes',\n        },\n      ],\n    },\n    {\n      name: 'approve',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setOwners',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'owners',\n          type: {\n            vec: 'publicKey',\n          },\n        },\n      ],\n    },\n    {\n      name: 'changeThreshold',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'threshold',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'executeTransaction',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'multisigSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'transaction',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'Multisig',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'owners',\n            type: {\n              vec: 'publicKey',\n            },\n          },\n          {\n            name: 'threshold',\n            type: 'u64',\n          },\n          {\n            name: 'nonce',\n            type: 'u8',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Transaction',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'multisig',\n            type: 'publicKey',\n          },\n          {\n            name: 'programId',\n            type: 'publicKey',\n          },\n          {\n            name: 'accounts',\n            type: {\n              vec: {\n                defined: 'TransactionAccount',\n              },\n            },\n          },\n          {\n            name: 'data',\n            type: 'bytes',\n          },\n          {\n            name: 'signers',\n            type: {\n              vec: 'bool',\n            },\n          },\n          {\n            name: 'didExecute',\n            type: 'bool',\n          },\n          {\n            name: 'ownerSetSeqno',\n            type: 'u32',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'TransactionAccount',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'pubkey',\n            type: 'publicKey',\n          },\n          {\n            name: 'isSigner',\n            type: 'bool',\n          },\n          {\n            name: 'isWritable',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: 'InvalidOwner',\n      msg: 'The given owner is not part of this multisig.',\n    },\n    {\n      code: 101,\n      name: 'NotEnoughSigners',\n      msg: 'Not enough owners signed this transaction.',\n    },\n    {\n      code: 102,\n      name: 'TransactionAlreadySigned',\n      msg: 'Cannot delete a transaction that has been signed by an owner.',\n    },\n    {\n      code: 103,\n      name: 'Overflow',\n      msg: 'Overflow when adding.',\n    },\n    {\n      code: 104,\n      name: 'UnableToDelete',\n      msg: 'Cannot delete a transaction the owner did not create.',\n    },\n    {\n      code: 105,\n      name: 'AlreadyExecuted',\n      msg: 'The given transaction has already been executed.',\n    },\n    {\n      code: 106,\n      name: 'InvalidThreshold',\n      msg: 'Threshold must be less than or equal to the number of owners.',\n    },\n  ],\n};\n\nexport default idl;\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useMemo,\n  useContext,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  PublicKey,\n  Transaction,\n  Connection,\n  ConfirmOptions,\n} from \"@solana/web3.js\";\nimport { Provider } from \"@project-serum/common\";\nimport { Program } from \"@project-serum/anchor\";\nimport { WalletProvider as SolanaWalletProvider } from \"@solana/wallet-adapter-react\";\nimport {\n  getPhantomWallet,\n  getSolflareWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { State as StoreState } from \"../../store/reducer\";\nimport LockupIdl from \"../../idl/lockup\";\nimport RegistryIdl from \"../../idl/registry\";\nimport MultisigIdl from \"../../idl/multisig\";\nimport { useWallet as useSolana } from \"@solana/wallet-adapter-react\";\nimport { WalletAdapter } from \"@solana/wallet-adapter-base\";\n\nexport function useWallet(): WalletContextValues {\n  const w = useContext(WalletContext);\n  if (!w) {\n    throw new Error(\"Missing wallet context\");\n  }\n  return w;\n}\n\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\n\ntype WalletContextValues = {\n  wallet: Wallet;\n  lockupClient: Program;\n  registryClient: Program;\n\tmultisigClient: Program;\n};\n\nexport default function WalletProvider(\n  props: PropsWithChildren<ReactNode>\n): ReactElement {\n  const wallets = useMemo(\n    () => [getPhantomWallet(), getSolflareWallet(), getSolletWallet()],\n    []\n  );\n\n  return (\n    <SolanaWalletProvider wallets={wallets}>\n      <WalletProviderInner {...props} />\n    </SolanaWalletProvider>\n  );\n}\n\nfunction WalletProviderInner(props: PropsWithChildren<ReactNode>) {\n  const { wallet: solWallet } = useSolana();\n  const { walletProvider, network } = useSelector((state: StoreState) => {\n    return {\n      walletProvider: state.common.walletProvider,\n      network: state.common.network,\n    };\n  });\n  const { wallet, lockupClient, registryClient, multisigClient } =\n    useMemo(() => {\n      const opts: ConfirmOptions = {\n        preflightCommitment: \"recent\",\n        commitment: \"recent\",\n      };\n      const connection = new Connection(network.url, opts.preflightCommitment);\n      const wallet = new Wallet(solWallet ? solWallet.adapter() : undefined);\n      // @ts-ignore\n      const provider = new Provider(connection, wallet, opts);\n\n      const lockupClient = new Program(\n        LockupIdl,\n        network.lockupProgramId,\n        provider\n      );\n      const registryClient = new Program(\n        RegistryIdl,\n        network.registryProgramId,\n        provider\n      );\n      const multisigClient = new Program(\n        MultisigIdl,\n        network.multisigProgramId,\n        provider,\n      );\n      return {\n        wallet,\n        lockupClient,\n        registryClient,\n        multisigClient,\n      };\n    }, [solWallet, walletProvider, network]);\n\n  return (\n    <WalletContext.Provider\n      value={{ wallet, lockupClient, registryClient, multisigClient }}\n    >\n      {props.children}\n    </WalletContext.Provider>\n  );\n}\n\nclass Wallet {\n  get publicKey(): PublicKey | undefined {\n    // @ts-ignore\n    return this.adapter ? this.adapter.publicKey : undefined;\n  }\n\n  constructor(readonly adapter: WalletAdapter | undefined) {}\n\n  on(event: any, cb: any) {\n    if (this.adapter) {\n      return this.adapter.on(event, cb);\n    }\n  }\n\n  async connect() {\n    if (this.adapter) {\n      try {\n        await this.adapter.connect();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.adapter) {\n      this.adapter.disconnect();\n    }\n  }\n\n  signTransaction(tx: Transaction) {\n    if (this.adapter) {\n      return this.adapter.signTransaction(tx);\n    }\n  }\n\n  signAllTransactions(txs: Transaction[]) {\n    if (this.adapter) {\n      return this.adapter.signAllTransactions(txs);\n    }\n  }\n}\n","import { Transaction, PublicKey, Account } from '@solana/web3.js';\nimport * as serumCmn from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\n\nexport async function registrarSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function memberSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  member: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), member.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\nexport async function vendorSigner(\n  programId: PublicKey,\n  registrar: PublicKey,\n  vendor: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [registrar.toBuffer(), vendor.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Returns the seed used to derive a member address. This is not necessary, but\n// a UX convenience. Each member address is a deterministic function of the\n// program, beneficiary, and this (constant) seed.\nexport async function memberSeed(registrar: PublicKey): Promise<string> {\n  const seed = await anchor.utils.sha256(`${registrar.toString()}:Member`);\n  // The max length of seeds allowed by Solana is 32.\n  return seed.slice(0, 32);\n}\n\n// Creates all the SPL otken vaults needed for constructing a `Member` account.\nexport async function createBalanceSandbox(\n  provider: serumCmn.Provider,\n  r: any,\n  registrySigner: PublicKey,\n) {\n  const spt = new Account();\n  const vault = new Account();\n  const vaultStake = new Account();\n  const vaultPw = new Account();\n\n  const lamports = await provider.connection.getMinimumBalanceForRentExemption(\n    165,\n  );\n\n  const createSptIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    spt.publicKey,\n    r.poolMint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vault.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultStakeIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultStake.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  const createVaultPwIx = await serumCmn.createTokenAccountInstrs(\n    provider,\n    vaultPw.publicKey,\n    r.mint,\n    registrySigner,\n    lamports,\n  );\n  let tx0 = new Transaction();\n  tx0.add(\n    ...createSptIx,\n    ...createVaultIx,\n    ...createVaultStakeIx,\n    ...createVaultPwIx,\n  );\n  let signers0 = [spt, vault, vaultStake, vaultPw];\n\n  const tx = { tx: tx0, signers: signers0 };\n\n  return [\n    tx,\n    {\n      spt: spt.publicKey,\n      vault: vault.publicKey,\n      vaultStake: vaultStake.publicKey,\n      vaultPw: vaultPw.publicKey,\n    },\n  ];\n}\n\n// Returns all events in the reward queue.\nexport function rewardEvents(rewardQ: any): any[] {\n  let events = [];\n  let tail = rewardQ.tail;\n  while (tail < rewardQ.head) {\n    let idx = tail % rewardQ.events.length;\n    events.push(rewardQ.events[idx]);\n    tail += 1;\n  }\n  return events;\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { AccountInfo as TokenAccount } from '@solana/spl-token';\nimport { ProgramAccount as CommonProgramAccount } from '@project-serum/common';\nimport { Action, ActionType } from './actions';\nimport { networks, Network } from './config';\n\nexport enum BootstrapState {\n  NeedsBootstrap,\n  IsBootstrapping,\n  Bootstrapped,\n}\n\nexport default function reducer(\n  state: State = initialState,\n  action: Action,\n): State {\n  let newState = {\n    common: { ...state.common },\n    lockup: { ...state.lockup },\n    registry: { ...state.registry },\n    accounts: { ...state.accounts },\n  };\n  switch (action.type) {\n    // Common.\n    case ActionType.CommonAppWillBootstrap:\n      newState.common.bootstrapState = BootstrapState.IsBootstrapping;\n      newState.common.bootstrapTrigger = false;\n      return newState;\n    case ActionType.CommonAppDidBootstrap:\n      newState.common.bootstrapState = BootstrapState.Bootstrapped;\n      return newState;\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n        newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n        newState.common.shutdownTrigger = true;\n        const network = networks[action.item.networkKey];\n        newState.registry.registrar = Object.values(network.registrars)[0];\n      }\n      return newState;\n    case ActionType.CommonTriggerBootstrap:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.bootstrapTrigger = true;\n      return newState;\n    case ActionType.CommonTriggerShutdown:\n      newState.common.bootstrapState = BootstrapState.NeedsBootstrap;\n      newState.common.shutdownTrigger = true;\n      return newState;\n    case ActionType.CommonDidShutdown:\n      // Reset everything except network and registrar.\n      let s = {\n        ...initialState,\n      };\n      s.common.network = newState.common.network;\n      s.registry.registrar = newState.registry.registrar;\n      return s;\n    case ActionType.CommonOwnedTokenAccountsSet:\n      newState.common.ownedTokenAccounts = action.item.ownedTokenAccounts;\n      return newState;\n\n    case ActionType.CommonOwnedTokenAccountsUpdate:\n      newState.common.ownedTokenAccounts = newState.common.ownedTokenAccounts.map(\n        programAccount => {\n          if (programAccount.publicKey.equals(action.item.account.publicKey)) {\n            return action.item.account;\n          } else {\n            return programAccount;\n          }\n        },\n      );\n      return newState;\n\n    // Lockup.\n    case ActionType.LockupSetVestings:\n      newState.lockup.vestings = action.item.vestingAccounts;\n      return newState;\n    case ActionType.LockupUpdateVesting:\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n    case ActionType.LockupCreateVesting:\n      newState.lockup.vestings.unshift(action.item.vesting.publicKey);\n      newState.accounts[action.item.vesting.publicKey.toString()] =\n        action.item.vesting.account;\n      return newState;\n\n    // Registry.\n    case ActionType.RegistrySetMember:\n      // This should only be called on member creation. All other member\n      // member switches should route through `RegistrySetMember`.\n      newState.registry.member = action.item.member;\n      return newState;\n    case ActionType.RegistrySetRegistrar:\n      newState.registry.registrar = action.item.registrar;\n      newState.registry.member = action.item.member;\n      newState.registry.pendingWithdrawals = null;\n      return newState;\n    case ActionType.RegistrySetPendingWithdrawals:\n      action.item.pendingWithdrawals.forEach((pw: any) => {\n        newState.accounts[pw.publicKey.toString()] = pw.account;\n      });\n      newState.registry.pendingWithdrawals = action.item.pendingWithdrawals.map(\n        (pw: any) => pw.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryCreatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      if (newState.registry.pendingWithdrawals === null) {\n        newState.registry.pendingWithdrawals = [];\n      }\n      newState.registry.pendingWithdrawals.unshift(\n        action.item.pendingWithdrawal.publicKey,\n      );\n      return newState;\n    case ActionType.RegistryUpdatePendingWithdrawal:\n      newState.accounts[action.item.pendingWithdrawal.publicKey.toString()] =\n        action.item.pendingWithdrawal.account;\n      return newState;\n    case ActionType.AccountAdd:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    case ActionType.AccountUpdate:\n      newState.accounts[action.item.account.publicKey.toString()] =\n        action.item.account.account;\n      return newState;\n    default:\n      return newState;\n  }\n}\n\nexport type State = {\n  common: CommonState;\n  lockup: LockupState;\n  registry: RegistryState;\n  accounts: { [pubkey: string]: any };\n};\n\nexport type CommonState = {\n  walletProvider?: string;\n  isWalletConnected: boolean;\n  bootstrapTrigger: boolean;\n  bootstrapState: BootstrapState;\n  shutdownTrigger: boolean;\n  network: Network;\n  ownedTokenAccounts: ProgramAccount<TokenAccount>[];\n};\n\nexport type LockupState = {\n  vestings: PublicKey[];\n};\n\n// All state associated with a single instance of a staking registrar.\nexport type RegistryState = {\n  registrar: PublicKey;\n  member?: PublicKey;\n  pendingWithdrawals: PublicKey[] | null;\n};\n\nexport const initialState: State = {\n  common: {\n    bootstrapTrigger: false,\n    shutdownTrigger: false,\n    isWalletConnected: false,\n    walletProvider: 'https://www.sollet.io',\n    bootstrapState: BootstrapState.NeedsBootstrap,\n    network: networks.mainnet,\n    ownedTokenAccounts: [],\n  },\n  lockup: {\n    vestings: [],\n  },\n  registry: {\n    pendingWithdrawals: null,\n    registrar: networks.mainnet.registrars.srm,\n  },\n  accounts: {},\n};\n\nexport type AsyncData<T> = {\n  isReady: boolean;\n  data?: T;\n};\n\n// Re-export.\nexport type ProgramAccount<T = any> = CommonProgramAccount<T>;\n","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\n","import React, {\n  PropsWithChildren,\n  ReactNode,\n  useEffect,\n  useCallback,\n} from 'react';\nimport * as BufferLayout from 'buffer-layout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  parseMintAccount,\n  parseTokenAccount,\n} from '@project-serum/common';\nimport * as anchor from '@project-serum/anchor';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport { useWallet } from './WalletProvider';\nimport { memberSeed } from '../../utils/registry';\n\n// BootstrapProvider performs data fetching on application startup.\nexport default function BootstrapProvider(props: PropsWithChildren<ReactNode>) {\n  const { bootstrapTrigger, shutdownTrigger, network, registrar } = useSelector(\n    (state: StoreState) => {\n      return {\n        bootstrapTrigger: state.common.bootstrapTrigger,\n        shutdownTrigger: state.common.shutdownTrigger,\n        network: state.common.network,\n        registrar: state.registry.registrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const { wallet, lockupClient, registryClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Entry point for bootstrapping all the data for the app.\n  const bootstrap = useCallback(async () => {\n    enqueueSnackbar(`Connecting to ${network.label}`, {\n      variant: 'info',\n      autoHideDuration: 2500,\n    });\n\n    dispatch({\n      type: ActionType.CommonAppWillBootstrap,\n      item: {},\n    });\n\n    let { registrars, members } = await refreshAccounts({\n      dispatch,\n      lockupClient,\n      registryClient,\n      network,\n      wallet,\n    });\n\n    // Temporary account store for the initial registrar switch.\n    const accountStore = Object.fromEntries(\n      new Map(registrars.map(r => [r.publicKey.toString(), r.account])),\n    );\n    members.forEach(m => {\n      accountStore[m.publicKey.toString()] = m.account;\n    });\n\n    await registrarSwitch(\n      registryClient,\n      accountStore,\n      dispatch,\n      registrar,\n      undefined,\n    );\n\n    dispatch({\n      type: ActionType.CommonAppDidBootstrap,\n      item: {},\n    });\n\n    enqueueSnackbar(`Connection established`, {\n      variant: 'success',\n      autoHideDuration: 2500,\n    });\n  }, [\n    dispatch,\n    enqueueSnackbar,\n    registryClient,\n    registrar,\n    lockupClient,\n    network,\n    wallet,\n  ]);\n\n  const shutdown = useCallback(async () => {\n    wallet.disconnect();\n    dispatch({\n      type: ActionType.CommonDidShutdown,\n      item: {},\n    });\n  }, [dispatch, wallet]);\n\n  useEffect(() => {\n    if (bootstrapTrigger) {\n      bootstrap().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error bootstrapping application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n    if (shutdownTrigger) {\n      shutdown().catch(err => {\n        console.error(err);\n        enqueueSnackbar(`Error shutting down application: ${err.toString()}`, {\n          variant: 'error',\n        });\n      });\n    }\n  }, [bootstrapTrigger, bootstrap, shutdownTrigger, shutdown, enqueueSnackbar]);\n\n  return <>{props.children}</>;\n}\n\n// Fetches and populates the redux store with all accounts needed for the app to start.\nexport async function refreshAccounts({\n  dispatch,\n  lockupClient,\n  registryClient,\n  network,\n  wallet,\n}: any) {\n  // Fetch all staking instances.\n  const fetchRegistrars = async (): Promise<ProgramAccount[]> => {\n    const registrarAddresses: PublicKey[] = Object.values(network.registrars);\n\n    // All registrars.\n    const registrars: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrarAddresses,\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'Registrar',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Mint for each registrar.\n    const mints: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.mint),\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Reward queues for each registrar.\n    const rewardQs = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        registrars.map(r => r.account.rewardEventQ),\n      )\n    ).map(raw => {\n      const account = registryClient.coder.accounts.decode(\n        'RewardQueue',\n        raw!.account.data,\n      );\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n\n    // Add all the accounts to the store.\n    registrars\n      .concat(mints)\n      .concat(rewardQs)\n      .forEach(r => {\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: r,\n          },\n        });\n      });\n    return registrars;\n  };\n\n  // Fetch the stake accounts for each staking instance (for the connected wallet).\n  const fetchMembers = async (\n    registrars: ProgramAccount[],\n  ): Promise<ProgramAccount[]> => {\n    const members = await Promise.all(\n      registrars\n        .map((r: ProgramAccount) => r.publicKey)\n        .map((r: PublicKey) =>\n          memberSeed(r)\n            .then(seed =>\n              PublicKey.createWithSeed(\n                wallet.publicKey,\n                seed,\n                registryClient.programId,\n              ),\n            )\n            .then(member => {\n              return {\n                memberPublicKey: member,\n                registrar: r,\n              };\n            }),\n        ),\n    );\n    const memberAddresses: PublicKey[] = members.map(m => m.memberPublicKey);\n    const memberAccounts: ProgramAccount[] = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        memberAddresses,\n      )\n    )\n      .filter(raw => raw !== null)\n      .map((raw: any) => {\n        const account = registryClient.coder.accounts.decode(\n          'Member',\n          raw!.account.data,\n        );\n        return {\n          publicKey: raw!.publicKey,\n          account,\n        };\n      });\n\n    // Get all accounts for all of our member accounts.\n    //\n    // Note: As the number of registrars grows, we'll probably want to move\n    //       this fetch to be an on demand query, rather than on application\n    //       bootstrap.\n    await Promise.all(\n      memberAccounts.map(memberAccount => {\n        return fetchAndDispatchMemberAccounts(\n          memberAccount,\n          dispatch,\n          registryClient.provider.connection,\n        );\n      }),\n    );\n\n    // Add all the member accounts to the store. Must be done *after* the\n    // active member's vaults.\n    memberAccounts.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n\n    return memberAccounts;\n  };\n\n  // All mints for each staking instance (pool token and the token being staked).\n  const fetchMints = async (registrars: ProgramAccount[]) => {\n    const mintAddresses = registrars\n      .map(r => r.account.mint)\n      .concat(registrars.map(r => r.account.poolMint));\n    const mints = (\n      await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        mintAddresses,\n      )\n    ).map(raw => {\n      const account = parseMintAccount(raw!.account.data);\n      return {\n        publicKey: raw!.publicKey,\n        account,\n      };\n    });\n    mints.forEach(m => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account: m,\n        },\n      });\n    });\n  };\n\n  // All token accounts owned by the current user.\n  const fetchOwnedTokenAccounts = async () => {\n    const ownedTokenAccounts = await getOwnedTokenAccounts(\n      lockupClient.provider.connection,\n      wallet.publicKey,\n    );\n    dispatch({\n      type: ActionType.CommonOwnedTokenAccountsSet,\n      item: {\n        ownedTokenAccounts,\n      },\n    });\n  };\n\n  // All vesting accounts owned by the current user.\n  const fetchVestingAccounts = async () => {\n    const vestingAccounts = await lockupClient.account.vesting.all(\n      wallet.publicKey.toBuffer(),\n    );\n    vestingAccounts.forEach((account: any) => {\n      dispatch({\n        type: ActionType.AccountAdd,\n        item: {\n          account,\n        },\n      });\n    });\n    dispatch({\n      type: ActionType.LockupSetVestings,\n      item: {\n        vestingAccounts: vestingAccounts.map(\n          (v: ProgramAccount) => v.publicKey,\n        ),\n      },\n    });\n  };\n\n  const registrars = await fetchRegistrars();\n  const members = await fetchMembers(registrars);\n  await fetchMints(registrars);\n  await fetchOwnedTokenAccounts();\n  await fetchVestingAccounts();\n\n  return { registrars, members };\n}\n\nexport async function registrarSwitch(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  const oldMember = await (async (): Promise<ProgramAccount | undefined> => {\n    if (oldRegistrar === undefined) {\n      return undefined;\n    }\n    const oldMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(oldRegistrar),\n      registryClient.programId,\n    );\n    const oldMemberAccount = accounts[oldMember.toString()];\n    return oldMemberAccount !== undefined\n      ? {\n          publicKey: oldMember,\n          account: oldMemberAccount,\n        }\n      : undefined;\n  })();\n\n  const newMember = await (async (): Promise<ProgramAccount | undefined> => {\n    const newMember = await PublicKey.createWithSeed(\n      registryClient.provider.wallet.publicKey,\n      await memberSeed(newRegistrar),\n      registryClient.programId,\n    );\n    const newMemberAccount = accounts[newMember.toString()];\n    return newMemberAccount\n      ? {\n          publicKey: newMember,\n          account: newMemberAccount,\n        }\n      : undefined;\n  })();\n\n  await subscribeRegistrar(\n    registryClient,\n    accounts,\n    dispatch,\n    newRegistrar,\n    oldRegistrar,\n  );\n  if (newMember) {\n    unsubscribeMember(registryClient, oldMember);\n    subscribeMember(newMember, registryClient, dispatch);\n  }\n\n  // Perform the UI update.\n  dispatch({\n    type: ActionType.RegistrySetRegistrar,\n    item: {\n      registrar: newRegistrar,\n      member: newMember ? newMember.publicKey : undefined,\n    },\n  });\n}\n\nexport async function subscribeRegistrar(\n  registryClient: any,\n  accounts: any,\n  dispatch: any,\n  newRegistrar: PublicKey,\n  oldRegistrar?: PublicKey,\n) {\n  if (oldRegistrar) {\n    const oldRegistrarAccount = accounts[oldRegistrar.toString()];\n    registryClient.account.rewardQueue.unsubscribe(\n      oldRegistrarAccount.rewardEventQ,\n    );\n    // TODO: unsubscribe from the staking pool subscription.\n  }\n\n  const newRegistrarAccount = accounts[newRegistrar.toString()];\n\n  // Reward event queue sub.\n  const conn = registryClient.account.rewardQueue.subscribe(\n    newRegistrarAccount.rewardEventQ,\n  );\n  conn.on('change', (account: any) => {\n    dispatch({\n      type: ActionType.AccountUpdate,\n      item: {\n        account: {\n          publicKey: newRegistrarAccount.rewardEventQ,\n          account,\n        },\n      },\n    });\n  });\n\n  // Staking pool token sub.\n  // TODO: track these connections somewhere more organized.\n  registryClient.provider.connection.onAccountChange(\n    newRegistrarAccount.poolMint,\n    (acc: any) => {\n      const poolMint = parseMintAccount(acc.data);\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newRegistrarAccount.poolMint,\n            account: poolMint,\n          },\n        },\n      });\n    },\n    'recent',\n  );\n}\n\nexport function subscribeMember(\n  newMember: ProgramAccount,\n  registryClient: any,\n  dispatch: any,\n) {\n  // Subscribe to all member account updates.\n  registryClient.account.member\n    .subscribe(newMember.publicKey)\n    .on('change', (account: any) => {\n      dispatch({\n        type: ActionType.AccountUpdate,\n        item: {\n          account: {\n            publicKey: newMember.publicKey,\n            account,\n          },\n        },\n      });\n    });\n\n  // Subscription function, updating the redux store on every change\n  // to a token account.\n  //\n  // TODO: should track these subscriptions for unsubscribing on demand.\n  const createVaultSubscription = (address: PublicKey) => {\n    registryClient.provider.connection.onAccountChange(\n      address,\n      (acc: any) => {\n        const tokenAccount = parseTokenAccount(acc.data);\n        dispatch({\n          type: ActionType.AccountUpdate,\n          item: {\n            account: {\n              publicKey: address,\n              account: tokenAccount,\n            },\n          },\n        });\n      },\n      'recent',\n    );\n  };\n\n  // Subscribe to all the member's token vaults.\n  createVaultSubscription(newMember.account.balances.vault);\n  createVaultSubscription(newMember.account.balances.vaultStake);\n  createVaultSubscription(newMember.account.balances.vaultPw);\n  createVaultSubscription(newMember.account.balances.spt);\n  createVaultSubscription(newMember.account.balancesLocked.vault);\n  createVaultSubscription(newMember.account.balancesLocked.vaultStake);\n  createVaultSubscription(newMember.account.balancesLocked.vaultPw);\n  createVaultSubscription(newMember.account.balancesLocked.spt);\n}\n\nfunction unsubscribeMember(registryClient: any, newMember?: ProgramAccount) {\n  // todo\n}\n\n// Fetches all accounts for a member account and populates the store with them.\nexport async function fetchAndDispatchMemberAccounts(\n  memberAccount: ProgramAccount,\n  dispatch: any,\n  connection: any,\n) {\n  let accounts = (\n    await anchor.utils.getMultipleAccounts(connection, [\n      memberAccount.account.balances.vault,\n      memberAccount.account.balances.vaultStake,\n      memberAccount.account.balances.vaultPw,\n      memberAccount.account.balances.spt,\n      memberAccount.account.balancesLocked.vault,\n      memberAccount.account.balancesLocked.vaultStake,\n      memberAccount.account.balancesLocked.vaultPw,\n      memberAccount.account.balancesLocked.spt,\n    ])\n  )\n    .filter(raw => raw !== null)\n    .map((raw: any) => {\n      return {\n        publicKey: raw.publicKey,\n        account: parseTokenAccount(raw.account.data),\n      };\n    });\n  accounts.forEach(account => {\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account,\n      },\n    });\n  });\n}\n\nexport async function getOwnedTokenAccounts(connection: Connection, publicKey: PublicKey) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  let resp = await connection.getProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters,\n    },\n  );\n  const result =  resp\n    .map(({ pubkey, account: { data } }) => {\n      return {\n        publicKey: new PublicKey(pubkey),\n        account: parseTokenAccountData(data),\n      };\n    });\n\n  return result;\n}\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, 'mint'),\n  BufferLayout.blob(32, 'owner'),\n  BufferLayout.nu64('amount'),\n  BufferLayout.blob(93),\n]);\n\n\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n\nexport function parseTokenAccountData(data: any) {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount,\n  };\n}\n","import React, { useState, useEffect, ReactElement } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSnackbar } from \"notistack\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Select from \"@material-ui/core/Select\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport Button from \"@material-ui/core/Button\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport BubbleChartIcon from \"@material-ui/icons/BubbleChart\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport {\n  WalletDialogProvider,\n  WalletDisconnectButton,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-material-ui\";\nimport { Popper, MenuList, MenuItem, Grow } from \"@material-ui/core\";\nimport { refreshAccounts } from \"./BootstrapProvider\";\nimport { networks } from \"../../store/config\";\nimport {\n  State as StoreState,\n  ProgramAccount,\n  BootstrapState,\n} from \"../../store/reducer\";\nimport { ActionType } from \"../../store/actions\";\nimport { useWallet } from \"./WalletProvider\";\n\ntype HeaderProps = {\n  isAppReady: boolean;\n  member?: ProgramAccount;\n};\n\nexport default function Header(props: HeaderProps) {\n  const { isAppReady } = props;\n  const { network } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const dispatch = useDispatch();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient, lockupClient } = useWallet();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: \"#ffffff\",\n        color: \"#272727\",\n        boxShadow: \"none\",\n        borderBottom: \"solid 1pt #ccc\",\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n          }}\n        >\n          <div style={{ display: \"flex\" }}>\n            <SerumLogoButton />\n            <BarButton label=\"Stake\" hrefClient=\"/stake\" />\n            <BarButton label=\"Presale\" hrefClient=\"https://greatlegendary.com/presale/\" />\n            <BarButton label=\"Market\" hrefClient=\"https://market.greatlegendary.com/\" />\n            <BarButton label=\"Whitepaper\" hrefClient=\"https://whitepaper.greatlegendary.com/\" />\n            {/* <BarButton label=\"Lockup\" hrefClient=\"/lockup\" />\n            <BarButton\n              label=\"Multisig\"\n              href=\"https://multisig.projectserum.com\"\n            />\n            <BarButton label=\"Trade\" href=\"https://dex.projectserum.com\" />\n            {network.srmFaucet && (\n              <BarButton\n                label=\"Faucet\"\n                href=\"https://www.spl-token-ui.com/#/token-faucets\"\n              />\n            )} */}\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n            }}\n          >\n            <div\n              onClick={() => {\n                setIsRefreshing(true);\n                enqueueSnackbar(`Refreshing`, {\n                  variant: \"info\",\n                });\n                refreshAccounts({\n                  dispatch,\n                  lockupClient,\n                  registryClient,\n                  network,\n                  wallet,\n                })\n                  .then(() => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                  })\n                  .catch((err) => {\n                    setIsRefreshing(false);\n                    closeSnackbar();\n                    enqueueSnackbar(`There was a problem refreshing: ${err}`, {\n                      variant: \"error\",\n                      autoHideDuration: 2500,\n                    });\n                  });\n              }}\n              style={{\n                display: isAppReady ? \"block\" : \"none\",\n                justifyContent: \"center\",\n                flexDirection: \"column\",\n                marginRight: \"10px\",\n              }}\n            >\n              {isRefreshing ? (\n                <div\n                  style={{\n                    marginTop: \"8px\",\n                    padding: \"10px\",\n                  }}\n                >\n                  <CircularProgress style={{ width: \"24px\", height: \"24px\" }} />\n                </div>\n              ) : (\n                <div>\n                  <IconButton>\n                    <RefreshIcon />\n                  </IconButton>\n                </div>\n              )}\n            </div>\n            <NetworkSelector />\n            <WalletConnectButton />\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: \"flex\" }} onClick={() => history.push(\"/\")}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <img\n            style={{\n              display: \"block\",\n              height: \"35px\",\n            }}\n            alt=\"Logo\"\n            src=\"https://greatlegendary.com/wp-content/uploads/2021/11/logo-300x180.png\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: \"inherit\", textDecoration: \"none\" }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography style={{ fontSize: \"15px\" }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const network = useSelector((state: StoreState) => {\n    return state.common.network;\n  });\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: \"10px\",\n        fontSize: \"15px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={(e) =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n          {network.label}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: \"12px\",\n          color: \"white\",\n        }}\n      >\n        {Object.keys(networks).map((n: string) => (\n          <MenuItem\n            key={n}\n            onClick={() => {\n              handleClose();\n              dispatch({\n                type: ActionType.CommonSetNetwork,\n                item: {\n                  network: networks[n],\n                  networkKey: n,\n                },\n              });\n            }}\n          >\n            <Typography>{networks[n].label}</Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n\nexport function WalletConnectButton(): ReactElement {\n  const { showDisconnect } = useSelector((state: StoreState) => {\n    return {\n      showDisconnect: state.common.isWalletConnected,\n    };\n  });\n  const dispatch = useDispatch();\n  const { wallet, lockupClient } = useWallet();\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Wallet connection event listeners.\n  useEffect(() => {\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Disconnected from wallet\", {\n        variant: \"info\",\n        autoHideDuration: 2500,\n      });\n      dispatch({\n        type: ActionType.CommonWalletDidDisconnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerShutdown,\n        item: {},\n      });\n    });\n    wallet.on(\"connect\", async () => {\n      dispatch({\n        type: ActionType.CommonWalletDidConnect,\n        item: {},\n      });\n      dispatch({\n        type: ActionType.CommonTriggerBootstrap,\n        item: {},\n      });\n    });\n  }, [wallet, dispatch, enqueueSnackbar, lockupClient.provider.connection]);\n\n  return (\n    <WalletDialogProvider>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n        onClick={() => wallet.disconnect()}\n      >\n        <WalletDisconnectButton />\n      </div>\n      <div\n        onClick={() => wallet.connect()}\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n        }}\n      >\n        <WalletMultiButton />\n      </div>\n    </WalletDialogProvider>\n  );\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: 'fixed',\n        width: '100%',\n        bottom: 0,\n        textAlign: 'center',\n        height: '30px',\n        backgroundColor: '#fbfbfb',\n        borderTop: 'solid 1pt #ccc',\n        display: 'flex',\n        justifyContent: 'space-between',\n        paddingLeft: '10px',\n        paddingRight: '10px',\n      }}\n    >\n      <div style={{ marginLeft: 'auto', marginRight: 'auto', display: 'flex' }}>\n        <FooterButton\n          href={\n            'https://github.com/project-serum/anchor/blob/master/examples/lockup/docs/staking.md'\n          }\n          label={'Technical Documentation'}\n        />\n        <FooterButton\n          href={'https://github.com/project-serum/awesome-serum'}\n          label={'Developer Resources'}\n        />\n        <FooterButton\n          href={'https://discord.com/channels/739225212658122886'}\n          label={'Discord'}\n        />\n        <FooterButton href={'https://t.me/ProjectSerum'} label={'Telegram'} />\n        <FooterButton\n          href={'https://github.com/project-serum'}\n          label={'GitHub'}\n        />\n        <FooterButton\n          href={'https://solanabeach.io/'}\n          label={'Solana Network'}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        marginRight: isEnd ? '' : '15px',\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: '14px' }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from 'react';\nimport { useSelector } from 'react-redux';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Button from '@material-ui/core/Button';\nimport { State as StoreState, BootstrapState } from '../../store/reducer';\nimport Header from './Header';\nimport Footer from './Footer';\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const { isAppReady } = useSelector((state: StoreState) => {\n    return {\n      isAppReady:\n        state.common.isWalletConnected &&\n        state.common.bootstrapState === BootstrapState.Bootstrapped,\n    };\n  });\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: 'flex',\n        minHeight: '100vh',\n        flexDirection: 'column',\n        backgroundColor: 'rgb(251, 251, 251)',\n      }}\n    >\n      <div\n        style={{\n          position: 'fixed',\n          width: '100%',\n          zIndex: 99,\n        }}\n      >\n      <Header isAppReady={isAppReady} />\n      </div>\n      <div\n        style={{\n          width: '100%',\n          marginTop: '94px',\n          flex: 1,\n          display: 'flex',\n          marginBottom: '30px', // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem('consent') ? (\n          !isAppReady ? (\n            <DisconnectedSplash />\n          ) : (\n            <div style={{ width: '100%' }}>{props.children}</div>\n          )\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem('consent', 'true');\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        <div\n          style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n        >\n          <Typography\n            style={{ marginBottom: '16px', maxWidth: '1000px' }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            The staking will be locked for 15 - 45 days , after that you can unstake any time.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction DisconnectedSplash() {\n  const classes = useStyles();\n  const { network, isDisconnected } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      isDisconnected: !state.common.isWalletConnected,\n    };\n  });\n  return (\n    <div\n      style={{\n        flex: '1',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n      }}\n    >\n      <div style={{ width: '100%', display: 'flex' }}>\n        {isDisconnected ? (\n          <div\n            style={{ display: 'flex', marginLeft: 'auto', marginRight: 'auto' }}\n          >\n            <Typography\n              style={{ marginLeft: '24px' }}\n              color=\"textSecondary\"\n              variant=\"h4\"\n            >\n              Disconnected\n            </Typography>\n          </div>\n        ) : (\n          <div style={{ width: '100%' }}>\n            <div style={{ width: '100%' }} className={classes.root}>\n              <div>\n                <Typography variant=\"h5\">\n                  {`Connecting to ${network.label}...`}\n                </Typography>\n              </div>\n              <div\n                style={{\n                  marginLeft: 'auto',\n                  marginRight: 'auto',\n                  width: '300px',\n                }}\n              >\n                <LinearProgress style={{ width: '100%' }} />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { TokenInfo } from '@solana/spl-token-registry';\nimport { useTokenInfos } from '../../utils/tokens';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { Network } from '../../store/config';\nimport * as bootstrap from './BootstrapProvider';\nimport { useWallet } from './WalletProvider';\n\nexport function activeRegistrar(\n  state: StoreState,\n): { label: string; programAccount: any } {\n  const registrars = Object.keys(state.common.network.registrars)\n    .map(registrar => {\n      let entry: [string, ProgramAccount] = [\n        registrar,\n        {\n          publicKey: state.common.network.registrars[registrar],\n          account:\n            state.accounts[\n              state.common.network.registrars[registrar].toString()\n            ],\n        },\n      ];\n      return entry;\n    })\n    .filter(r => r[1].account !== undefined);\n  const selectedRegistrar: any = registrars\n    .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n    .map(([r, acc]) => {\n      return {\n        label: r,\n        programAccount: acc,\n      };\n    })\n    .pop();\n\n  return selectedRegistrar;\n}\n\nexport default function RegistrarSelect() {\n  const { registryClient } = useWallet();\n  const { registrars, selectedRegistrar, accounts, network } = useSelector(\n    (state: StoreState) => {\n      const registrars = Object.keys(state.common.network.registrars)\n        .map(registrar => {\n          let entry: [string, ProgramAccount] = [\n            registrar,\n            {\n              publicKey: state.common.network.registrars[registrar],\n              account:\n                state.accounts[\n                  state.common.network.registrars[registrar].toString()\n                ],\n            },\n          ];\n          return entry;\n        })\n        .filter(r => r[1].account !== undefined);\n      const selectedRegistrar: any = registrars\n        .filter(([r, acc]) => acc.publicKey.equals(state.registry.registrar))\n        .map(([r, acc]) => {\n          return {\n            label: r,\n            programAccount: acc,\n          };\n        })\n        .pop();\n      return {\n        network: state.common.network,\n        accounts: state.accounts,\n        registrars,\n        selectedRegistrar,\n      };\n    },\n  );\n  const dispatch = useDispatch();\n  const tokenInfos = useTokenInfos();\n\n  return (\n    <Select\n      style={{ width: '294px', height: '36px' }}\n      variant={'outlined'}\n      fullWidth\n      value={selectedRegistrar.label}\n      onChange={async e => {\n        const registrar: ProgramAccount = registrars\n          .filter(([r, acc]) => r === e.target.value)\n          .map(([r, acc]) => acc)\n          .pop()!;\n\n        bootstrap.registrarSwitch(\n          registryClient,\n          accounts,\n          dispatch,\n          registrar!.publicKey, // New.\n          selectedRegistrar.programAccount.publicKey, // Old.\n        );\n      }}\n    >\n      {registrars.length === 0 ? (\n        <MenuItem value={'_loading'}>Loading registrars...</MenuItem>\n      ) : (\n        registrars.map(([label, registrar]) => {\n          return (\n            <MenuItem key={label} value={label}>\n              <div style={{ display: 'flex' }}>\n                <div\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {getImage(tokenInfos.get(registrar.account.mint.toString()))}\n                </div>\n                <div\n                  style={{\n                    overflow: 'hidden',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {`${registrarToDisplayLabel(registrar, network)}`}\n                </div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction registrarToDisplayLabel(\n  registrar: ProgramAccount,\n  network: Network,\n): string {\n  const entry = Object.keys(network.registrars)\n    .filter(r => network.registrars[r].equals(registrar.publicKey))\n    .pop();\n  if (entry !== undefined) {\n    return entry.toUpperCase();\n  }\n  return registrar.publicKey.toString();\n}\n\nexport function getImage(token?: TokenInfo, style?: any) {\n  if (token) {\n    return (\n      <img\n        alt=\"Token Icon\"\n        style={style ?? { marginRight: '10px', height: '25px' }}\n        src={token.logoURI}\n      />\n    );\n  } else {\n    return <div style={{ marginLeft: '32px' }}></div>;\n  }\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { State as StoreState } from '../store/reducer';\nimport { toDisplay, toDisplayLabel } from '../utils/tokens';\n\nexport default function Me() {\n  const { member } = useSelector((state: StoreState) => {\n    return {\n      member: state.registry.member,\n    };\n  });\n\n  return (\n    <div style={{ display: 'flex', width: '100%' }}>\n      <div style={{ flex: 1, marginTop: '24px', marginBottom: '24px' }}>\n        {member && <MemberBalancesCard />}\n      </div>\n    </div>\n  );\n}\n\n// Assumes a member and all vaults is available in the store.\nfunction MemberBalancesCard() {\n  const {\n    mint,\n    registrar,\n    vault,\n    vaultStake,\n    vaultPw,\n    spt,\n    lockedVault,\n    lockedVaultStake,\n    lockedVaultPw,\n    lockedSpt,\n  } = useSelector((state: StoreState) => {\n    const member = state.accounts[state.registry.member!.toString()];\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar,\n      mint: state.accounts[registrar.mint.toString()],\n      vault: state.accounts[member.balances.vault],\n      vaultStake: state.accounts[member.balances.vaultStake],\n      vaultPw: state.accounts[member.balances.vaultPw],\n      spt: state.accounts[member.balances.spt],\n      lockedVault: state.accounts[member.balancesLocked.vault],\n      lockedVaultStake: state.accounts[member.balancesLocked.vaultStake],\n      lockedVaultPw: state.accounts[member.balancesLocked.vaultPw],\n      lockedSpt: state.accounts[member.balancesLocked.spt],\n    };\n  });\n  const tables = [\n    {\n      title: 'Main Balances',\n      description: 'Balances deposited directly from the connected wallet.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(vault.amount, mint.decimals),\n          stake: toDisplay(vaultStake.amount, mint.decimals),\n          pending: toDisplay(vaultPw.amount, mint.decimals),\n          spt: toDisplay(spt.amount, 0),\n        },\n      ],\n    },\n    {\n      title: 'Locked Balances',\n      description:\n        'Balances deposited from the lockup program. These funds are isolated from the Main Balances and may only be withdrawn back to the lockup program. At all times they are program controlled.',\n      rows: [\n        {\n          token: toDisplayLabel(registrar.mint),\n          balance: toDisplay(lockedVault.amount, mint.decimals),\n          stake: toDisplay(lockedVaultStake.amount, mint.decimals),\n          pending: toDisplay(lockedVaultPw.amount, mint.decimals),\n          spt: toDisplay(lockedSpt.amount, 0),\n        },\n      ],\n    },\n  ];\n  return (\n    <Card\n      style={{\n        marginBottom: '24px',\n      }}\n    >\n      <CardContent\n        style={{\n          marginTop: '24px',\n          position: 'relative',\n          paddingTop: 0,\n          paddingBottom: '16px',\n        }}\n      >\n        {tables.map(t => (\n          <BalanceTable\n            key={t.title}\n            title={t.title}\n            description={t.description}\n            rows={t.rows}\n          />\n        ))}\n      </CardContent>\n    </Card>\n  );\n}\n\ntype BalanceTableProps = {\n  title: string;\n  description: string;\n  rows:\n    | null\n    | {\n        token: string;\n        balance: string;\n        stake: string;\n        pending: string;\n        spt: string;\n      }[];\n};\n\nfunction BalanceTable(props: BalanceTableProps) {\n  const { title, rows, description } = props;\n  return (\n    <div style={{ marginBottom: '16px' }}>\n      <Typography style={{ fontWeight: 'bold' }}>{title}</Typography>\n      <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n        {description}\n      </Typography>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Token</TableCell>\n              <TableCell align=\"right\">Available</TableCell>\n              <TableCell align=\"right\">Pending</TableCell>\n              <TableCell align=\"right\">Staked</TableCell>\n              <TableCell align=\"right\">Pool</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows === null ? (\n              <CircularProgress />\n            ) : (\n              rows.map(row => (\n                <TableRow key={row.token}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.token}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.balance}</TableCell>\n                  <TableCell align=\"right\">{row.pending}</TableCell>\n                  <TableCell align=\"right\">{row.stake}</TableCell>\n                  <TableCell align=\"right\">{row.spt}</TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n","import { PublicKey, SYSVAR_CLOCK_PUBKEY } from '@solana/web3.js';\nimport * as anchor from '@project-serum/anchor';\nimport { simulateTransaction } from '@project-serum/common';\n\nexport async function vestingSigner(\n  programId: PublicKey,\n  vesting: PublicKey,\n): Promise<{ publicKey: PublicKey; nonce: number }> {\n  const [publicKey, nonce] = await anchor.web3.PublicKey.findProgramAddress(\n    [vesting.toBuffer()],\n    programId,\n  );\n  return {\n    publicKey,\n    nonce,\n  };\n}\n\n// Simulates the `availableForWithdrawal` instruction to funnel out a the\n// emitted log data (as a hack to get a return value).\nexport async function availableForWithdrawal(\n  lockupClient: anchor.Program,\n  vesting: PublicKey,\n): Promise<anchor.BN> {\n  let tx = lockupClient.transaction.availableForWithdrawal({\n    accounts: {\n      vesting,\n      clock: SYSVAR_CLOCK_PUBKEY,\n    },\n  });\n  tx.setSigners(...[lockupClient.provider.wallet.publicKey]);\n  let resp = await simulateTransaction(\n    lockupClient.provider.connection,\n    tx,\n    'recent',\n  );\n  if (resp.value.err) {\n    throw new Error(`RPC error: ${resp.value.err.toString()}`);\n  }\n  let log = resp.value.logs![1].slice('Program log: '.length);\n  return new anchor.BN(JSON.parse(log).result);\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport { useSnackbar } from 'notistack';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Tabs from '@material-ui/core/Tabs';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport * as serumCmn from '@project-serum/common';\nimport { TokenInstructions } from '@project-serum/serum';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport * as notification from '../common/Notification';\nimport { fromDisplay } from '../../utils/tokens';\nimport { Network } from '../../store/config';\nimport { activeRegistrar } from '../common/RegistrarSelect';\n\nexport default function DropRewardButton() {\n  const [showDialog, setShowDialog] = useState(false);\n  return (\n    <>\n      <div onClick={() => setShowDialog(true)}>\n        <Button variant=\"contained\" color=\"secondary\">\n          Drop Rewards\n        </Button>\n      </div>\n      <DropRewardDialog\n        open={showDialog}\n        onClose={() => setShowDialog(false)}\n      />\n    </>\n  );\n}\n\nenum RewardTypeViewModel {\n  Unlocked,\n  Locked,\n}\n\ntype DropRewardsDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DropRewardDialog(props: DropRewardsDialogProps) {\n  const { open, onClose } = props;\n  const { selectedRegistrar } = useSelector((state: StoreState) => {\n    return {\n      selectedRegistrar: activeRegistrar(state),\n    };\n  });\n  const [rewardTypeTab, setRewardTypeTab] = useState(\n    RewardTypeViewModel.Unlocked,\n  );\n\n  return (\n    <Dialog open={open} onClose={onClose} fullWidth maxWidth=\"md\">\n      <DialogTitle>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography variant=\"h4\" component=\"h2\">\n            {`Drop Rewards on ${selectedRegistrar.label.toUpperCase()} Stakers`}\n          </Typography>\n        </div>\n      </DialogTitle>\n      <DialogContent>\n        <Tabs value={rewardTypeTab} onChange={(_e, t) => setRewardTypeTab(t)}>\n          <Tab value={RewardTypeViewModel.Unlocked} label=\"Unlocked\" />\n          <Tab value={RewardTypeViewModel.Locked} label=\"Locked\" />\n        </Tabs>\n        {rewardTypeTab === RewardTypeViewModel.Unlocked && (\n          <DropUnlockedForm onClose={onClose} />\n        )}\n        {rewardTypeTab === RewardTypeViewModel.Locked && (\n          <DropLockedForm onClose={onClose} />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\ntype DropUnlockedFormProps = {\n  onClose: () => void;\n};\n\nfunction DropUnlockedForm(props: DropUnlockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n\n  const isSendEnabled =\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendUnlockedReward = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping unlocked reward...',\n      'Unlocked reward dropped',\n      async () => {\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        if (!mintAccount) {\n          mintAccount = await serumCmn.getMintInfo(\n            registryClient.provider,\n            network.mints[mint!],\n          );\n        }\n\n        const lockedRewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        const rewardKind = { unlocked: {} };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          lockedRewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n  const onClick = () => {\n    sendUnlockedReward().catch(err => {\n      console.error(err);\n      snack.enqueueSnackbar(\n        `Error dropping unlocked reward: ${err.toString()}`,\n        {\n          variant: 'error',\n        },\n      );\n    });\n  };\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropLockedFormProps = DropUnlockedFormProps;\n\nfunction DropLockedForm(props: DropLockedFormProps) {\n  const { onClose } = props;\n  const snack = useSnackbar();\n  const { registryClient } = useWallet();\n  const { network, registrar, accounts } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n      registrar: {\n        publicKey: state.registry.registrar,\n        account: state.accounts[state.registry.registrar.toString()],\n      },\n      accounts: state.accounts,\n    };\n  });\n\n  const [rewardDisplayAmount, setRewardDisplayAmount] = useState<null | number>(\n    null,\n  );\n  const [startTs, setStartTs] = useState<null | number>(null);\n  const [endTs, setEndTs] = useState<null | number>(null);\n  const [expiryTs, setExpiryTs] = useState<null | number>(null);\n  const [depositor, setDepositor] = useState<null | PublicKey>(null);\n  const [mint, setMint] = useState<null | string>(null);\n  const [periodCount, setPeriodCount] = useState(7);\n\n  const isSendEnabled =\n    startTs !== null &&\n    endTs !== null &&\n    mint !== null &&\n    depositor !== null &&\n    rewardDisplayAmount !== null &&\n    rewardDisplayAmount >= 100 &&\n    expiryTs !== null;\n\n  const sendLockedRewards = async () => {\n    await notification.withTx(\n      snack,\n      'Dropping locked reward...',\n      'Locked reward dropped',\n      async () => {\n        const rewardKind = {\n          locked: {\n            startTs: new BN(startTs!),\n            endTs: new BN(endTs!),\n            periodCount: new BN(periodCount),\n          },\n        };\n        const vendor = new Account();\n        const vendorVault = new Account();\n        const [vendorSigner, nonce] = await PublicKey.findProgramAddress(\n          [registrar.publicKey.toBuffer(), vendor.publicKey.toBuffer()],\n          registryClient.programId,\n        );\n        let mintAccount = accounts[network.mints[mint!].toString()];\n        const rewardAmount = fromDisplay(\n          rewardDisplayAmount!,\n          mintAccount.decimals,\n        );\n        return await registryClient.rpc.dropReward(\n          rewardKind,\n          rewardAmount,\n          new BN(expiryTs!),\n          registryClient.provider.wallet.publicKey,\n          nonce,\n          {\n            accounts: {\n              registrar: registrar.publicKey,\n              rewardEventQ: registrar.account.rewardEventQ,\n              poolMint: registrar.account.poolMint,\n              vendor: vendor.publicKey,\n              vendorVault: vendorVault.publicKey,\n              depositor,\n              depositorAuthority: registryClient.provider.wallet.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              clock: SYSVAR_CLOCK_PUBKEY,\n              rent: SYSVAR_RENT_PUBKEY,\n            },\n            signers: [vendorVault, vendor],\n            instructions: [\n              ...(await serumCmn.createTokenAccountInstrs(\n                registryClient.provider,\n                vendorVault.publicKey,\n                network.mints[mint!],\n                vendorSigner,\n              )),\n              await registryClient.account.rewardVendor.createInstruction(\n                vendor,\n              ),\n            ],\n          },\n        );\n      },\n    );\n    onClose();\n  };\n\n  const onClick = () => {\n    sendLockedRewards().catch(err => {\n      snack.enqueueSnackbar(`Error dropping locked reward: ${err.toString()}`, {\n        variant: 'error',\n      });\n    });\n  };\n\n  return (\n    <DropVendorForm\n      network={network}\n      mint={mint}\n      setMint={setMint}\n      setDepositor={setDepositor}\n      setRewardDisplayAmount={setRewardDisplayAmount}\n      setStartTs={setStartTs}\n      setEndTs={setEndTs}\n      periodCount={periodCount}\n      setPeriodCount={setPeriodCount}\n      expiryTs={expiryTs}\n      setExpiryTs={setExpiryTs}\n      onCancel={onClose}\n      onClick={onClick}\n      isSendEnabled={isSendEnabled}\n    />\n  );\n}\n\ntype DropVendorFormProps = {\n  network: Network;\n  mint: string | null;\n  setMint: (mintLabel: string) => void;\n  setDepositor: (pk: PublicKey) => void;\n  setRewardDisplayAmount: (n: number) => void;\n  setStartTs?: (n: number) => void;\n  setEndTs?: (n: number) => void;\n  periodCount?: number;\n  setPeriodCount?: (p: number) => void;\n  expiryTs: number | null;\n  setExpiryTs: (ts: number) => void;\n  onCancel: () => void;\n  onClick: () => void;\n  isSendEnabled: boolean;\n};\n\nfunction DropVendorForm(props: DropVendorFormProps) {\n  const {\n    network,\n    mint,\n    setDepositor,\n    setMint,\n    setRewardDisplayAmount,\n    setStartTs,\n    setEndTs,\n    periodCount,\n    setPeriodCount,\n    expiryTs,\n    setExpiryTs,\n    onCancel,\n    onClick,\n    isSendEnabled,\n  } = props;\n  const mintOptions: { label: string; publicKey: PublicKey }[] = Object.keys(\n    network.mints,\n  ).map(label => {\n    return {\n      label,\n      publicKey: network.mints[label],\n    };\n  });\n\n  return (\n    <>\n      <div>\n        <div style={{ display: 'flex', marginTop: '10px' }}>\n          <div style={{ flex: 1 }}>\n            <OwnedTokenAccountsSelect\n              style={{ height: '100%' }}\n              mint={mint === null ? undefined : network.mints[mint]}\n              onChange={(f: PublicKey) => setDepositor(f)}\n            />\n            <FormHelperText>Account to send from</FormHelperText>\n          </div>\n          <div>\n            <FormControl\n              variant=\"outlined\"\n              style={{ width: '200px', marginLeft: '10px', marginTop: '10px' }}\n            >\n              <InputLabel>Mint</InputLabel>\n              <Select\n                value={mint}\n                onChange={e => setMint(e.target.value as string)}\n                label=\"Mint\"\n              >\n                {mintOptions.map(m => (\n                  <MenuItem value={m.label}>{m.label.toUpperCase()}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n          <div>\n            <TextField\n              style={{ marginLeft: '10px', marginTop: '10px' }}\n              id=\"outlined-number\"\n              label=\"Amount\"\n              type=\"number\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              onChange={e =>\n                setRewardDisplayAmount(parseFloat(e.target.value) as number)\n              }\n              InputProps={{ inputProps: { min: 0 } }}\n            />\n          </div>\n        </div>\n        {setEndTs !== undefined && setStartTs !== undefined && (\n          <>\n            <div style={{ display: 'flex', marginTop: '37px' }}>\n              <div style={{ flex: 1 }}>\n                <TextField\n                  fullWidth\n                  label=\"Start date\"\n                  type=\"datetime-local\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={e => {\n                    const d = new Date(e.target.value);\n                    setStartTs(d.getTime() / 1000);\n                  }}\n                />\n                <FormHelperText>Date vesting begins</FormHelperText>\n              </div>\n            </div>\n            <div style={{ flex: 1, marginTop: '20px' }}>\n              <TextField\n                fullWidth\n                label=\"End date\"\n                type=\"datetime-local\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={e => {\n                  const d = new Date(e.target.value);\n                  setEndTs(d.getTime() / 1000);\n                }}\n              />\n              <FormHelperText>\n                Date the vesting account is fully vested\n              </FormHelperText>\n            </div>\n            <div>\n              <FormControl fullWidth>\n                <TextField\n                  style={{ marginTop: '37px' }}\n                  id=\"outlined-number\"\n                  label=\"Period Count\"\n                  type=\"number\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  value={periodCount}\n                  onChange={e =>\n                    setPeriodCount!(parseInt(e.target.value) as number)\n                  }\n                  InputProps={{ inputProps: { min: 1 } }}\n                />\n              </FormControl>\n            </div>\n          </>\n        )}\n        <div style={{ marginTop: '37px', display: 'flex' }}>\n          <div\n            style={{\n              flex: 1,\n              height: '100%',\n              marginRight: '10px',\n            }}\n          >\n            <TextField\n              fullWidth\n              label=\"Expiry date\"\n              type=\"datetime-local\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              onChange={e => {\n                const d = new Date(e.target.value);\n                setExpiryTs(d.getTime() / 1000);\n              }}\n            />\n            <FormHelperText>\n              Date after which the account owner dropping rewards can withdraw\n              all unclaimed rewards.\n            </FormHelperText>\n          </div>\n          <div style={{ marginTop: '26px' }}>\n            <TextField\n              style={{ height: '100%' }}\n              disabled\n              placeholder=\"Expiry Unix timestamp\"\n              fullWidth\n              value={expiryTs}\n            />\n          </div>\n        </div>\n      </div>\n      <DialogActions>\n        <Button onClick={onCancel}>Cancel</Button>\n        <Button\n          onClick={onClick}\n          type=\"submit\"\n          color=\"primary\"\n          disabled={!isSendEnabled}\n        >\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport BN from 'bn.js';\nimport styled from 'styled-components';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport Slide from '@material-ui/core/Slide';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { Account, SYSVAR_RENT_PUBKEY, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { getTokenAccount } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport OwnedTokenAccountsSelect from '../../components/common/OwnedTokenAccountsSelect';\nimport { ViewTransactionOnExplorerButton } from '../../components/common/Notification';\nimport RegistrarSelect from './RegistrarSelect';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport * as bootstrap from './BootstrapProvider';\nimport Me from '../Me';\nimport {\n  memberSigner,\n  memberSeed,\n  createBalanceSandbox,\n} from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\nimport Stake from '../Stake';\nimport Rewards from '../rewards/Rewards';\nimport VestingAccountsSelect from './VestingAccountsSelect';\nimport { toDisplayLabel, fromDisplay } from '../../utils/tokens';\n\nenum TabModel {\n  Me,\n  Stake,\n  Rewards,\n  Lockup,\n}\n\nexport default function MyNode() {\n  const [tab, setTab] = useState(TabModel.Me);\n  return (\n    <div>\n      <MyNodeBanner setTab={setTab} />\n      <Container fixed maxWidth=\"md\" style={{ flex: 1, display: 'flex' }}>\n        {tab === TabModel.Me && <Me />}\n        {tab === TabModel.Stake && <Stake />}\n        {tab === TabModel.Rewards && <Rewards />}\n      </Container>\n    </div>\n  );\n}\n\ntype MyNodeBannerProps = {\n  setTab: (t: TabModel) => void;\n};\n\nfunction MyNodeBanner(props: MyNodeBannerProps) {\n  const [tab, setTab] = useState(TabModel.Me);\n  const { member, registrar, registrarAccount } = useSelector(\n    (state: StoreState) => {\n      return {\n        member: state.registry.member,\n        registrar: state.registry.registrar,\n        registrarAccount: state.accounts[state.registry.registrar.toString()],\n      };\n    },\n  );\n  const [showDepositDialog, setShowDepositDialog] = useState(false);\n  const [showWithdrawDialog, setShowWithdrawDialog] = useState(false);\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { wallet, registryClient } = useWallet();\n  const dispatch = useDispatch();\n\n  const createStakeAccount = async () => {\n    enqueueSnackbar('Creating stake account', {\n      variant: 'info',\n    });\n    const seed = await memberSeed(registrar);\n    const member = await PublicKey.createWithSeed(\n      wallet.publicKey!,\n      seed,\n      registryClient.programId,\n    );\n    const { publicKey, nonce } = await memberSigner(\n      registryClient.programId,\n      registrar,\n      member,\n    );\n    const memberSignerPublicKey = publicKey;\n\n    const [mainTx, balances] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const [lockedTx, balancesLocked] = await createBalanceSandbox(\n      registryClient.provider,\n      registrarAccount,\n      memberSignerPublicKey,\n    );\n    const tx = registryClient.transaction.createMember(nonce, {\n      accounts: {\n        registrar: registrar,\n        member: member,\n        beneficiary: wallet.publicKey,\n        memberSigner: memberSignerPublicKey,\n        balances,\n        balancesLocked,\n        tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      },\n      instructions: [\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: wallet.publicKey!,\n          newAccountPubkey: member,\n          basePubkey: wallet.publicKey!,\n          seed,\n          lamports: await registryClient.provider.connection.getMinimumBalanceForRentExemption(\n            registryClient.account.member.size,\n          ),\n          space: registryClient.account.member.size,\n          programId: registryClient.programId,\n        }),\n      ],\n    });\n    const signers: Account[] = [];\n    const allTxs = [mainTx, lockedTx, { tx, signers }];\n    // @ts-ignore\n    let txSigs = await registryClient.provider.sendAll(allTxs, {\n      commitment: 'recent',\n      preflightCommitment: 'recent',\n      skipPreflight: true,\n    });\n    console.log('Accounts created with transactions:', txSigs);\n\n    const memberAccount = await registryClient.account.member(member);\n    const memberProgramAccount = {\n      publicKey: member,\n      account: memberAccount,\n    };\n    // Add the new member to the store.\n    dispatch({\n      type: ActionType.AccountAdd,\n      item: {\n        account: memberProgramAccount,\n      },\n    });\n\n    // Populate the store with all of the member's accounts.\n    await bootstrap.fetchAndDispatchMemberAccounts(\n      memberProgramAccount,\n      dispatch,\n      registryClient.provider.connection,\n    );\n\n    // Subscribe to any updates to the member.\n    bootstrap.subscribeMember(memberProgramAccount, registryClient, dispatch);\n\n    // Tell the UI that our member is ready.\n    dispatch({\n      type: ActionType.RegistrySetMember,\n      item: {\n        member,\n      },\n    });\n\n    closeSnackbar();\n    enqueueSnackbar(`Stake account created ${member.toString()}`, {\n      variant: 'success',\n    });\n  };\n\n  const HoverSpan = styled.span`\n    :hover {\n      cursor: pointer;\n    }\n  `;\n\n  return (\n    <>\n      <div\n        style={{\n          backgroundColor: '#fff',\n          paddingTop: '24px',\n          borderBottom: 'solid 1pt #ccc',\n        }}\n      >\n        <Container\n          fixed\n          maxWidth=\"md\"\n          style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <div>\n              <Typography variant=\"h4\" style={{ marginBottom: '10px' }}>\n                My Stake\n              </Typography>\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <RegistrarSelect />\n            </div>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div>\n              <Typography>\n                {member !== undefined ? (\n                  member.toString()\n                ) : (\n                  <>\n                    Account not found. Please{' '}\n                    <HoverSpan\n                      onClick={() => {\n                        createStakeAccount().catch(err => {\n                          console.error(err);\n                          enqueueSnackbar(\n                            `Error creating stake account: ${err.toString()}`,\n                            {\n                              variant: 'error',\n                            },\n                          );\n                        });\n                      }}\n                      style={{\n                        color: 'black',\n                        fontWeight: 'bold',\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      create\n                    </HoverSpan>{' '}\n                    a stake account.\n                  </>\n                )}\n              </Typography>\n            </div>\n            <div>\n              <div>\n                <Button\n                  disabled={member === undefined}\n                  onClick={() => setShowDepositDialog(true)}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  style={{ marginRight: '10px' }}\n                >\n                  <ArrowDownwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Deposit\n                  </Typography>\n                </Button>\n                <Button\n                  disabled={member === undefined}\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={() => setShowWithdrawDialog(true)}\n                >\n                  <ArrowUpwardIcon style={{ fontSize: '20px' }} />\n                  <Typography style={{ marginLeft: '5px', marginRight: '5px' }}>\n                    Withdraw\n                  </Typography>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Container>\n        <div\n          style={{\n            maxWidth: '960px',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            paddingLeft: '24px',\n            paddingRight: '24px',\n            marginTop: '10px',\n          }}\n        >\n          <Tabs\n            value={tab}\n            onChange={(_e, t) => {\n              setTab(t);\n              props.setTab(t);\n            }}\n          >\n            <Tab value={TabModel.Me} label=\"Me\" />\n            <Tab value={TabModel.Stake} label=\"Stake\" />\n            <Tab value={TabModel.Rewards} label=\"Rewards\" />\n          </Tabs>\n        </div>\n      </div>\n      {member !== undefined && (\n        <>\n          <DepositDialog\n            open={showDepositDialog}\n            onClose={() => setShowDepositDialog(false)}\n          />\n          <WithdrawDialog\n            open={showWithdrawDialog}\n            onClose={() => setShowWithdrawDialog(false)}\n          />\n        </>\n      )}\n    </>\n  );\n}\n\ntype DepositDialogProps = {\n  open: boolean;\n  onClose: () => void;\n};\n\nfunction DepositDialog(props: DepositDialogProps) {\n  const { open, onClose } = props;\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const { registryClient, lockupClient } = useWallet();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    const registrar: ProgramAccount = {\n      publicKey: state.registry.registrar,\n      account: registrarAccount,\n    };\n    return {\n      registrar,\n      memberAccount,\n      member: state.registry.member,\n      mintAccount: state.accounts[registrar.account.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      deposit={true}\n      title={'Deposit'}\n      contextText={'Select the amount to deposit'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Depositing ${displayAmount} ${toDisplayLabel(\n            registrar.account.mint,\n          )} from ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'deposit_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(\n                registryClient.programId,\n                registrar.publicKey,\n                member!,\n              )\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              {\n                pubkey: registrar.publicKey,\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistWithdraw(\n              relayData,\n              amount,\n              {\n                accounts: {\n                  transfer: {\n                    // @ts-ignore\n                    lockup: await lockupClient.state.address(),\n                    beneficiary: registryClient.provider.wallet.publicKey,\n                    whitelistedProgram: registryClient.programId,\n                    vesting: from,\n                    vault: vesting.vault,\n                    vestingSigner: _vestingSigner,\n                    tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                    whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                    whitelistedProgramVaultAuthority: _memberSigner,\n                  },\n                },\n                remainingAccounts: relayAccounts,\n              },\n            );\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.deposit(amount, {\n              accounts: {\n                depositor: from,\n                depositorAuthority: registryClient.provider.wallet.publicKey,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                vault: memberAccount.balances.vault,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                member: member,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n        closeSnackbar();\n        enqueueSnackbar(`Deposit complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype WithdrawDialogProps = DepositDialogProps;\n\nfunction WithdrawDialog(props: WithdrawDialogProps) {\n  const { open, onClose } = props;\n  const { registryClient, lockupClient } = useWallet();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const dispatch = useDispatch();\n  const {\n    registrar,\n    registrarAccount,\n    member,\n    memberAccount,\n    mintAccount,\n    accounts,\n  } = useSelector((state: StoreState) => {\n    let memberAccount = undefined;\n    if (state.registry.member) {\n      memberAccount = state.accounts[state.registry.member.toString()];\n    }\n    const registrarAccount =\n      state.accounts[state.registry.registrar.toString()];\n    return {\n      registrar: state.registry.registrar,\n      registrarAccount,\n      member: state.registry.member,\n      memberAccount,\n      mintAccount: state.accounts[registrarAccount.mint.toString()],\n      accounts: state.accounts,\n    };\n  });\n  return (\n    <TransferDialog\n      title={'Withdraw'}\n      contextText={'Select the amount to withdraw'}\n      open={open}\n      onClose={onClose}\n      onTransfer={async (\n        from: PublicKey,\n        displayAmount: number,\n        isLocked: boolean,\n      ) => {\n        const amount = fromDisplay(displayAmount, mintAccount.decimals);\n        enqueueSnackbar(\n          `Withdrawing ${displayAmount} ${toDisplayLabel(\n            registrarAccount.mint,\n          )} to ${from.toString()}`,\n          {\n            variant: 'info',\n          },\n        );\n        const tx = await (async () => {\n          const _memberSigner = await memberSigner(\n            registryClient.programId,\n            registrar,\n            member!,\n          );\n          if (isLocked) {\n            const relayData = registryClient.coder.instruction.encode(\n              'withdraw_locked',\n              {\n                amount,\n              },\n            );\n            const vesting = accounts[from.toString()];\n            const _memberSigner = (\n              await memberSigner(registryClient.programId, registrar, member!)\n            ).publicKey;\n            const _vestingSigner = (\n              await vestingSigner(lockupClient.programId, from)\n            ).publicKey;\n            const relayAccounts = [\n              {\n                // @ts-ignore\n                pubkey: await registryClient.state.address(),\n                isWritable: false,\n                isSigner: false,\n              },\n              { pubkey: registrar, isWritable: false, isSigner: false },\n              { pubkey: member!, isWritable: false, isSigner: false },\n              {\n                pubkey: registryClient.provider.wallet.publicKey,\n                isWritable: false,\n                isSigner: true,\n              },\n            ];\n            const tx = await lockupClient.rpc.whitelistDeposit(relayData, {\n              accounts: {\n                transfer: {\n                  // @ts-ignore\n                  lockup: await lockupClient.state.address(),\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  whitelistedProgram: registryClient.programId,\n                  vesting: from,\n                  vault: vesting.vault,\n                  vestingSigner: _vestingSigner,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  whitelistedProgramVault: memberAccount.balancesLocked.vault,\n                  whitelistedProgramVaultAuthority: _memberSigner,\n                },\n              },\n              remainingAccounts: relayAccounts,\n            });\n\n            // Update the store with the updated account.\n            const updatedVestingAccount = await lockupClient.account.vesting(\n              from,\n            );\n            dispatch({\n              type: ActionType.LockupUpdateVesting,\n              item: {\n                vesting: {\n                  publicKey: from,\n                  account: updatedVestingAccount,\n                },\n              },\n            });\n\n            return tx;\n          } else {\n            const tx = await registryClient.rpc.withdraw(amount, {\n              accounts: {\n                registrar,\n                member,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                vault: memberAccount.balances.vault,\n                memberSigner: _memberSigner.publicKey,\n                depositor: from,\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              },\n            });\n\n            const tokenAccount = await getTokenAccount(\n              registryClient.provider,\n              from,\n            );\n            dispatch({\n              type: ActionType.CommonOwnedTokenAccountsUpdate,\n              item: {\n                account: {\n                  publicKey: from,\n                  account: tokenAccount,\n                },\n              },\n            });\n\n            return tx;\n          }\n        })();\n\n        closeSnackbar();\n        enqueueSnackbar(`Withdraw complete`, {\n          variant: 'success',\n          action: <ViewTransactionOnExplorerButton signature={tx as string} />,\n        });\n        onClose();\n      }}\n    />\n  );\n}\n\ntype TransferDialogProps = {\n  title: string;\n  contextText: string;\n  open: boolean;\n  deposit?: boolean;\n  onClose: () => void;\n  onTransfer: (\n    from: PublicKey,\n    amount: number,\n    isLocked: boolean,\n  ) => Promise<void>;\n};\n\nfunction TransferDialog(props: TransferDialogProps) {\n  const { mint, mintAccount } = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const mint = registrar ? registrar.mint : undefined;\n    return {\n      mint,\n      mintAccount: state.accounts[registrar.mint.toString()],\n    };\n  });\n  const { enqueueSnackbar } = useSnackbar();\n  const { open, onClose, onTransfer, title, contextText, deposit } = props;\n  const [displayAmount, setDisplayAmount] = useState<null | number>(null);\n  const [from, setFrom] = useState<null | PublicKey>(null);\n  const [vesting, setVesting] = useState<null | PublicKey>(null);\n  const [maxDisplayAmount, setMaxDisplayAmount] = useState<null | number>(null);\n  const [isLocked, setIsLocked] = useState(false);\n  const submitBtnDisabled =\n    (isLocked ? !vesting : !from) ||\n    !displayAmount ||\n    !maxDisplayAmount ||\n    displayAmount > maxDisplayAmount;\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={onClose}\n        fullWidth\n      >\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <DialogTitle>{title}</DialogTitle>\n          <div style={{ display: 'flex', paddingRight: '24px' }}>\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'center',\n                flexDirection: 'column',\n              }}\n            >\n              <LockIcon />\n            </div>\n            <FormControlLabel\n              style={{ marginLeft: '0px', marginRight: '0px' }}\n              control={\n                <Switch\n                  checked={isLocked}\n                  onChange={() => setIsLocked(!isLocked)}\n                />\n              }\n              label=\"\"\n            />\n          </div>\n        </div>\n        <DialogContent>\n          <div style={{ display: 'flex' }}>\n            <div style={{ flex: 1 }}>\n              <TextField\n                style={{ width: '100%' }}\n                id=\"outlined-number\"\n                label=\"Amount\"\n                type=\"number\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                onChange={e =>\n                  setDisplayAmount(parseFloat(e.target.value) as number)\n                }\n                InputProps={{\n                  inputProps: { min: 0, max: maxDisplayAmount ?? 0 },\n                }}\n              />\n              <FormHelperText>{contextText}</FormHelperText>\n            </div>\n          </div>\n          <FormControl fullWidth>\n            {!isLocked ? (\n              <>\n                <OwnedTokenAccountsSelect\n                  variant=\"outlined\"\n                  decimals={mintAccount.decimals}\n                  mint={mint}\n                  onChange={(f: PublicKey, _maxDisplayAmount: BN) => {\n                    setFrom(f);\n                    // TODO: set an actual limit for the withdrawal UI (i.e.\n                    //       what's currently in the vault). Currently not\n                    //       done since we dont' have websocket connections\n                    //       for each of the users accounts. However we\n                    //       still use the \"max\" amount for display vesting\n                    //       accounts.\n                    setMaxDisplayAmount(2 ** 53);\n                  }}\n                />\n                <FormHelperText>\n                  Token account to transfer to/from\n                </FormHelperText>\n              </>\n            ) : (\n              <>\n                <VestingAccountsSelect\n                  variant=\"outlined\"\n                  mint={mint}\n                  decimals={mintAccount.decimals}\n                  deposit={deposit}\n                  onChange={(v: PublicKey, maxDisplayAmount: BN) => {\n                    setVesting(v);\n                    setMaxDisplayAmount(maxDisplayAmount.toNumber());\n                  }}\n                />\n                <FormHelperText>\n                  Vesting account to transfer to/from your <b>locked</b>{' '}\n                  balances\n                </FormHelperText>\n              </>\n            )}\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button\n            //@ts-ignore\n            onClick={() => {\n              onTransfer(\n                isLocked ? vesting! : from!,\n                displayAmount!,\n                isLocked,\n              ).catch(err => {\n                console.error(err);\n                enqueueSnackbar(`Error transferring funds: ${err.toString()}`, {\n                  variant: 'error',\n                });\n              });\n            }}\n            color=\"primary\"\n            disabled={submitBtnDisabled}\n          >\n            {title}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nconst Transition = React.forwardRef(function Transition(\n  props: TransitionProps & { children?: React.ReactElement<any, any> },\n  ref: React.Ref<unknown>,\n) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Button from '@material-ui/core/Button';\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n} from '@solana/web3.js';\nimport { TokenInstructions } from '@project-serum/serum';\nimport { createTokenAccountInstrs } from '@project-serum/common';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport * as notification from '../common/Notification';\nimport OwnedTokenAccountsSelect from '../common/OwnedTokenAccountsSelect';\nimport { RewardListItemViewModel } from './RewardsList';\nimport { ActionType } from '../../store/actions';\nimport { State as StoreState } from '../../store/reducer';\nimport { vendorSigner } from '../../utils/registry';\nimport { vestingSigner } from '../../utils/lockup';\n\ntype ClaimRewardButtonProps = {\n  rli: RewardListItemViewModel;\n};\n\nexport default function ClaimRewardButton(props: ClaimRewardButtonProps) {\n  const { registryClient, lockupClient } = useWallet();\n  const { member, registrar } = useSelector((state: StoreState) => {\n    const registrar = {\n      publicKey: state.registry.registrar,\n      account: state.accounts[state.registry.registrar.toString()],\n    };\n    const member = state.registry.member\n      ? {\n          publicKey: state.registry.member,\n          account: state.accounts[state.registry.member.toString()],\n        }\n      : undefined;\n    return {\n      registrar,\n      member,\n    };\n  });\n  const { rli } = props;\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const [token, setToken] = useState<null | PublicKey>(null);\n\n  // On click.\n  const clickHandler = async (): Promise<void> => {\n    notification.withTx(\n      snack,\n      `Processing vendor reward ${rli!.vendor!.publicKey.toString()}`,\n      'Reward processed',\n      async () => {\n        const vendor = await registryClient.account.rewardVendor(\n          rli.vendor!.publicKey,\n        );\n        const _vendorSigner = await vendorSigner(\n          registryClient.programId,\n          registrar.publicKey,\n          rli.vendor!.publicKey,\n        );\n        if (rli!.reward.locked) {\n          const vendoredVesting = new Account();\n          const vendoredVestingVault = new Account();\n          const vendoredVestingSigner = await vestingSigner(\n            lockupClient.programId,\n            vendoredVesting.publicKey,\n          );\n          const remainingAccounts = lockupClient.instruction.createVesting\n            .accounts({\n              vesting: vendoredVesting.publicKey,\n              vault: vendoredVestingVault.publicKey,\n              depositor: vendor.vault,\n              depositorAuthority: _vendorSigner.publicKey,\n              tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n              rent: SYSVAR_RENT_PUBKEY,\n              clock: SYSVAR_CLOCK_PUBKEY,\n            })\n            // Change the signer status on the vendor signer since it's signed by the program, not the\n            // client.\n            .map((meta: any) =>\n              meta.pubkey.equals(_vendorSigner.publicKey)\n                ? { ...meta, isSigner: false }\n                : meta,\n            );\n          const tx = await registryClient.rpc.claimRewardLocked(\n            vendoredVestingSigner.nonce,\n            {\n              accounts: {\n                // @ts-ignore\n                registry: await registryClient.state.address(),\n                lockupProgram: lockupClient.programId,\n                cmn: {\n                  registrar: registrar.publicKey,\n                  member: member!.publicKey,\n                  beneficiary: registryClient.provider.wallet.publicKey,\n                  balances: member!.account.balances,\n                  balancesLocked: member!.account.balancesLocked,\n                  vendor: rli.vendor!.publicKey,\n                  vault: rli.vendor!.account.vault,\n                  vendorSigner: _vendorSigner.publicKey,\n                  tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                  clock: SYSVAR_CLOCK_PUBKEY,\n                },\n              },\n              remainingAccounts,\n              signers: [vendoredVesting, vendoredVestingVault],\n              instructions: [\n                await lockupClient.account.vesting.createInstruction(\n                  vendoredVesting,\n                ),\n                ...(await createTokenAccountInstrs(\n                  registryClient.provider,\n                  vendoredVestingVault.publicKey,\n                  rli.vendor!.account.mint,\n                  vendoredVestingSigner.publicKey,\n                )),\n              ],\n            },\n          );\n          // Refetch the vesting accounts to update the UI with the new reward.\n          const vestingAccounts = await lockupClient.account.vesting.all(\n            registryClient.provider.wallet.publicKey.toBuffer(),\n          );\n          vestingAccounts.forEach(account => {\n            dispatch({\n              type: ActionType.AccountAdd,\n              item: {\n                account,\n              },\n            });\n          });\n          dispatch({\n            type: ActionType.LockupSetVestings,\n            item: {\n              vestingAccounts: vestingAccounts.map(v => v.publicKey),\n            },\n          });\n          return tx;\n        } else {\n          return await registryClient.rpc.claimReward({\n            accounts: {\n              to: token,\n              cmn: {\n                registrar: registrar.publicKey,\n                member: member!.publicKey,\n                beneficiary: registryClient.provider.wallet.publicKey,\n                balances: member!.account.balances,\n                balancesLocked: member!.account.balancesLocked,\n\n                vendor: rli.vendor!.publicKey,\n                vault: vendor.vault,\n                vendorSigner: _vendorSigner.publicKey,\n\n                tokenProgram: TokenInstructions.TOKEN_PROGRAM_ID,\n                clock: SYSVAR_CLOCK_PUBKEY,\n              },\n            },\n          });\n        }\n      },\n    );\n  };\n\n  return (\n    <>\n      {!rli.reward.locked && (\n        <div>\n          <OwnedTokenAccountsSelect\n            style={{ width: '400px', height: '100%' }}\n            mint={rli.vendor.account.mint}\n            onChange={(f: PublicKey) => setToken(f)}\n          />\n        </div>\n      )}\n      <div style={{ marginLeft: '10px', marginRight: '10px' }}>\n        <Button\n          disabled={rli.reward.unlockedAlloc && token === null}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() =>\n            clickHandler().catch(err => {\n              console.error(err);\n              snack.enqueueSnackbar(\n                `Error ending pending redemption: ${err.toString()}`,\n                {\n                  variant: 'error',\n                },\n              );\n            })\n          }\n        >\n          Process Reward\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useSnackbar } from 'notistack';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport * as anchor from '@project-serum/anchor';\nimport { useWallet } from '../../components/common/WalletProvider';\nimport { State as StoreState } from '../../store/reducer';\nimport { ActionType } from '../../store/actions';\nimport RewardsList, { RewardListItemViewModel } from './RewardsList';\nimport DropRewardButton from './DropRewardButton';\nimport ClaimRewardButton from './ClaimRewardButton';\nimport { rewardEvents } from '../../utils/registry';\n\nexport default function Rewards() {\n  const { registryClient } = useWallet();\n  const dispatch = useDispatch();\n  const snack = useSnackbar();\n  const ctx = useSelector((state: StoreState) => {\n    const registrar = state.accounts[state.registry.registrar.toString()];\n    const rewardEventQueue = {\n      publicKey: registrar.rewardEventQ,\n      account: state.accounts[registrar.rewardEventQ.toString()],\n    };\n    return {\n      accounts: state.accounts,\n      rewardEventQueue,\n      member: state.registry.member\n        ? {\n            publicKey: state.registry.member,\n            account: state.accounts[state.registry.member.toString()],\n          }\n        : undefined,\n      network: state.common.network,\n    };\n  });\n  const { rewardEventQueue } = ctx;\n\n  const events = useMemo(() => rewardEvents(rewardEventQueue.account), [\n    rewardEventQueue.account,\n  ]);\n\n  useEffect(() => {\n    (async () => {\n      // TODO: need to chop up the calls here, for reward vendors > 100 entires.\n      const accounts = await anchor.utils.getMultipleAccounts(\n        registryClient.provider.connection,\n        events.map(m => m.vendor),\n      );\n      accounts.forEach(a => {\n        if (a === null) {\n          snack.enqueueSnackbar(`RPC node returned invalid vendor account`, {\n            variant: 'error',\n          });\n          return;\n        }\n        const account = registryClient.coder.accounts.decode(\n          'RewardVendor',\n          a.account.data,\n        );\n        dispatch({\n          type: ActionType.AccountAdd,\n          item: {\n            account: { publicKey: a.publicKey, account },\n          },\n        });\n      });\n    })();\n  }, [\n    events,\n    dispatch,\n    snack,\n    registryClient.coder.accounts,\n    registryClient.provider.connection,\n  ]);\n\n  // All rewards to display.\n  const rewards = events\n    .map((m: any) => RewardListItemViewModel.fromMessage(ctx, m))\n    .reverse();\n\n  // Next reward to claim.\n  let nextReward = null;\n  if (rewards.filter(r => r === null).length === 0) {\n    nextReward = rewards\n      .filter(r => r!.needsClaim)\n      .sort((a, b) =>\n        a!.cursor < b!.cursor ? -1 : a!.cursor > b!.cursor ? 1 : 0,\n      )\n      .shift();\n  }\n\n  return (\n    <div style={{ width: '100%', marginTop: '24px' }}>\n      {nextReward && (\n        <Card style={{ marginBottom: '24px' }}>\n          <CardContent>\n            <Typography variant=\"h6\">\n              You were staked during a previous reward. To prove eligibility,\n              click the \"Process\" button until you've processed <b>all</b>{' '}\n              eligible rewards. For unlocked rewards, don't forget to select the\n              address you wish to send your stake reward to.\n            </Typography>\n          </CardContent>\n        </Card>\n      )}\n      <div\n        style={{\n          marginBottom: '10px',\n          display: 'flex',\n          justifyContent: 'space-between',\n        }}\n      >\n        <Typography style={{ fontWeight: 'bold', fontSize: '20px' }}>\n          Reward History\n        </Typography>\n        <div style={{ display: 'flex' }}>\n          {nextReward && <ClaimRewardButton rli={nextReward} />}\n          {localStorage.getItem('private') && <DropRewardButton />}\n        </div>\n      </div>\n      <div style={{ marginBottom: '16px' }}>\n        <Typography>\n          When rewards are dropped, one must prove one was staked during the\n          time of drop. This means sending a transaction to the staking program\n          to <b>process</b> the reward. For <b>unlocked</b> rewards, select the\n          token address to transfer the reward to. For <b>locked</b> rewards, a\n          locked vesting account will be created and realized to the staker upon\n          unstaking. See the Lockup tab.\n        </Typography>\n      </div>\n      <Paper>\n        <RewardsList rewards={rewards} />\n      </Paper>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport BN from 'bn.js';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { PublicKey } from '@solana/web3.js';\nimport { State as StoreState, ProgramAccount } from '../../store/reducer';\nimport { toDisplay } from '../../utils/tokens';\n\ntype Props = {\n  style?: any;\n  mint?: PublicKey | null;\n  decimals: number;\n  variant?: 'outlined' | 'standard';\n  onChange: (from: PublicKey, maxAmount: BN) => void;\n  deposit?: boolean;\n};\n\nexport default function VestingAccountsSelect(p: Props) {\n  const { mint, decimals, variant, onChange, style, deposit } = p;\n  const vestings: ProgramAccount[] = useSelector((state: StoreState) => {\n    if (!mint) {\n      return [];\n    }\n    return state.lockup.vestings\n      .map(v => {\n        return { publicKey: v, account: state.accounts[v.toString()] };\n      })\n      .filter(v => v.account.mint.equals(mint));\n  });\n  const [fromAccount, setFromAccount] = useState('');\n  return (\n    <Select\n      style={style}\n      variant={variant}\n      fullWidth\n      value={fromAccount}\n      onChange={e => {\n        const pk = e.target.value as string;\n        setFromAccount(pk);\n        const pubkey = new PublicKey(pk);\n        const v = vestings.filter(v => v.publicKey.equals(pubkey)).pop();\n        onChange(pubkey, availableAmount(v!, deposit));\n      }}\n    >\n      {vestings.length === 0 ? (\n        <MenuItem value={''}>No vesting accounts found</MenuItem>\n      ) : (\n        vestings.map(v => {\n          return (\n            <MenuItem value={v.publicKey.toString()}>\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <div>{`${v.publicKey.toString()}`}</div>\n                <div style={{ float: 'right', color: '#ccc' }}>{`${toDisplay(\n                  availableAmount(v, deposit),\n                  decimals,\n                )}`}</div>\n              </div>\n            </MenuItem>\n          );\n        })\n      )}\n    </Select>\n  );\n}\n\nfunction availableAmount(v: ProgramAccount, deposit?: boolean): BN {\n  return deposit\n    ? v.account.outstanding.sub(v.account.whitelistOwned)\n    : v.account.whitelistOwned;\n}\n","import React from 'react';\nimport MyNode from '../components/common/MyNode';\n\nexport default function MyNodePage() {\n  return <MyNode />;\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { SnackbarProvider } from 'notistack';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles';\nimport { store } from './store';\nimport WalletProvider from './components/common/WalletProvider';\nimport BootstrapProvider from './components/common/BootstrapProvider';\nimport { TokenRegistryProvider } from './utils/tokens';\nimport Layout from './components/common/Layout';\nimport MyNodePage from './pages/MyNode';\nimport LockupPage from './pages/Lockup';\nimport MultisigPage, { MultisigInstancePage } from './pages/Multisig';\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: 'rgb(255,255,255)',\n      },\n    },\n    typography: {\n      fontFamily: ['Source Sans Pro', 'sans-serif'].join(','),\n    },\n    overrides: {},\n  });\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n\t\t\t\t\t<TokenRegistryProvider>\n\t\t\t\t\t\t<WalletProvider>\n\t\t\t\t\t\t\t<BootstrapProvider>\n\t\t\t\t\t\t\t\t<HashRouter basename={'/'}>\n\t\t\t\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/stake\" component={MyNodePage} />\n\t\t\t\t\t\t\t\t\t\t{/* <Route exact path=\"/lockup\" component={LockupPage} />\n\t\t\t\t\t\t\t\t\t\t<Route exact path=\"/multisig\" component={MultisigPage} />\n\t\t\t\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\t\t\t\tpath=\"/multisig/:address\"\n\t\t\t\t\t\t\t\t\t\t\tcomponent={MultisigInstancePage}\n\t\t\t\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t\t\t</Layout>\n\t\t\t\t\t\t\t\t</HashRouter>\n\t\t\t\t\t\t\t</BootstrapProvider>\n\t\t\t\t\t\t</WalletProvider>\n\t\t\t\t\t</TokenRegistryProvider>\n        </SnackbarProvider>\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { TransactionSignature } from '@solana/web3.js';\nimport { State as StoreState } from '../../store/reducer';\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>,\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: 'info',\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: 'success',\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${err.toString()}`, {\n      variant: 'error',\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { explorerClusterSuffix } = useSelector((state: StoreState) => {\n    return {\n      explorerClusterSuffix: state.common.network.explorerClusterSuffix,\n    };\n  });\n  const urlSuffix = `?cluster=${explorerClusterSuffix}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n","import { PublicKey } from '@solana/web3.js';\n\ntype Networks = { [label: string]: Network };\n\nexport type Network = {\n  // Cluster.\n  label: string;\n  url: string;\n  explorerClusterSuffix: string;\n\n  // Faucets.\n  srmFaucet: PublicKey | null;\n  msrmFaucet: PublicKey | null;\n\n  // Programs.\n  registryProgramId: PublicKey;\n  lockupProgramId: PublicKey;\n  multisigProgramId: PublicKey;\n\n  // Staking instances.\n  registrars: { [token: string]: PublicKey };\n\n  // Whitelisted token mints.\n  mints: { [token: string]: PublicKey };\n};\n\nexport const networks: Networks = {\n  mainnet: {\n    // Cluster.\n    label: 'Mainnet Beta',\n    url: 'https://api.mainnet-beta.solana.com',\n    //url: 'https://api.mainnet-beta.solana.com',\n    explorerClusterSuffix: '',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    registryProgramId: new PublicKey(\n      'GrAkKfEpTKQuVHG2Y97Y2FF4i7y7Q5AHLK94JBy7Y5yv',\n    ),\n    lockupProgramId: new PublicKey(\n      '6ebQNeTPZ1j7k3TtkCCtEPRvG7GQsucQrZ7sSEDQi9Ks',\n    ),\n    multisigProgramId: new PublicKey(\n      '3S6ALMCGVib4X3vVR3CLpm2K6Ng5qbWFYMTo5jfxWcEq',\n    ),\n    registrars: {\n      srm: new PublicKey('5vJRzKtcp4fJxqmR7qzajkaKSiAb6aT9grRsaZKXU222'),\n      msrm: new PublicKey('7uURiX2DwCpRuMFebKSkFtX9v5GK1Cd8nWLL8tyoyxZY'),\n      fida: new PublicKey('5C2ayX1E2SJ5kKEmDCA9ue9eeo3EPR34QFrhyzbbs3qh'),\n      dxl: new PublicKey('BQtp3xGPTFXJSt1MVKxtVSefRcBWmUkzTNM3g1t9efcK'),\n      // great: new PublicKey('5oABrZwi27UsT9o1DiUFdNtDFXgdyLGZDPJUZZSWfZY'),\n    },\n    mints: {\n      srm: new PublicKey('SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt'),\n      msrm: new PublicKey('MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L'),\n      fida: new PublicKey('EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp'),\n      dxl: new PublicKey('GsNzxJfFn6zQdJGeYsupJWzUAm57Ba7335mfhWvFiE9Z'),\n      // great: new PublicKey('J4D6LT4YqaZBF4snQskq8sYbxjx5P9pXHyXKBcaGbq98'),\n\n    },\n  },\n\n  devnet: {\n    // Cluster.\n    label: 'Devnet',\n    url: 'https://api.devnet.solana.com',\n    explorerClusterSuffix: 'devnet',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n\n    registryProgramId: new PublicKey(\n      '65aMavjMw3EhmWKVCkGn1Uj2SqZ3XY4coJhYM1BVJTHw',\n    ),\n    lockupProgramId: new PublicKey(\n      'bRGMWZz4mzJ8NG8csn5QNTbJDv2973QSvppbfcAboje',\n    ),\n    registrars: {\n      token1: new PublicKey('EqbwcuvPWLZ5fav58HrieHmJEqTm6RPu5bmn5bBQJ3mu'),\n      token2: new PublicKey('2rDWuS6yVFQ3jYx1nQq7gs3HgzWLJcUwm9sTUBWuXuyK'),\n    },\n    mints: {\n      token1: new PublicKey('Ep6ASaHQ4gKiN3gWNRKYttZEQ7b82seMk9HWc5JNBJZP'),\n      token2: new PublicKey('5vWxJthWbCFuNSZj1qcP9WoU8E6UG3DUfeAoPvYoN8PQ'),\n    },\n  },\n\n  // Fill in with your local cluster addresses.\n  localhost: {\n    // Cluster.\n    label: 'Localhost',\n    url: 'http://localhost:8899',\n    explorerClusterSuffix: 'localhost',\n\n    srmFaucet: null,\n    msrmFaucet: null,\n\n    multisigProgramId: new PublicKey(\n      '9z7Pq56To96qbVLzuBcf47Lc7u8uUWZh6k5rhcaTsDjz',\n    ),\n    registryProgramId: new PublicKey(\n      'A3ukM9swAsTqVC6g5Zy9FsWXofe5f2JhXMEfzenNf9Q7',\n    ),\n    lockupProgramId: new PublicKey(\n      '2z65xTKJDM4iJBVz5aXtNrWfQvKGgNJvnqY1GL2mkimu',\n    ),\n    registrars: {\n      token1: new PublicKey('Fwi5pie2VgWTDUSRNkca1HdFCke5r3v3mY83JbxtC3CJ'),\n      token2: new PublicKey('9kCGBWgHzGGChvmAsmu5jrXwEShZfLxKRTmKdxEpFUBr'),\n    },\n    mints: {\n      token1: new PublicKey('2aE1pietadYMeDtdqKayS4SVo9W4xtC3U7SN4iGWCVcX'),\n      token2: new PublicKey('Cgan7PWyBH6Z7JNA6f9kDYgwBMZBxRexpdd29PJgnqah'),\n    },\n  },\n};\n"],"sourceRoot":""}